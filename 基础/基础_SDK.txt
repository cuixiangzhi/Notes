基础知识
    appID:      应用的唯一标识id
    appKey:     应用的账号和秘钥成对出现,appID和appKey可以一致(针对不需要设置账号权限的服务)
    appSecret:  应用的公钥密码
    token:      应用敏感数据获取时用于验证,使用appID、appKey、appSecret进行初始化后,会生成一个acces_token,用于后续的API调用
    dpi:        每英寸墨点数，用于描述打印密度
    ppi:        每英寸像素数，用于描述屏幕密度(安卓设备的DPI等价于PPI)
    dp:         安卓系统的物理尺寸px=dp*ppi/160
    dpichart:   DPI_DENSITY_PIXEL ldpi_120_36px mdpi_160_48px hdpi_240_72px xhdpi_320_96px xxhdpi_480_144px xxxhdpi_640_192px
    dpirule:    same_dpi->high_dpi->no_dpi->low_dpi->drawable
安卓SDK
    jre:    基础运行环境(java命令)
    jdk:    基础开发类库、工具包
    sdk:    应用开发类库、工具包(buildtool platform com.*)
    ndk:    安卓C/C++(so文件)编译工具包,Application.mk配置平台相关(stl.abi.optim.platform) Android.mk配置编译相关(模块名字.编译选项.文件路径.编译目标)
    gradle: 安卓自动化构建工具(caches目录下包含各种依赖库com.*)
    jar:    java字节码集合,包含一个META-INF/MANIFEST.MF清单文件和一组.class文件
    war:    web应用程序,里边包含了应用运行所需的所有脚本和配置以及资源(class、config、html、image等等)
    aar:    aar是一个包含自定义UI和字体等资源和代码的类库,例如调用API之后弹出一个窗口,窗口的UI和字体都是库内的
    dex:    apk的java字节码会转换成dex字节码,由android系统的dvm(dalvik)虚拟机执行
    assets: 有些jar库使用了外部的资源或者配置文件,需要放在assets(对应于apk/assets目录)文件夹下
    obb:    googleplay对apk大小做了限制,需要把apk的一部分资源拆分出来打成obb包(main.版本号.包名.obb)
    keystore 安卓应用打包签名所需要的文件,用于标识一个应用,相同签名的应用会覆盖安装,可以使用keytool命令生成keystore文件(注意要加上时间戳)
    resign: 首先使用zip命令把META-INF签名信息删掉(不能用rar文件解压),然后使用jarsigner命令重新签名(注意添加-digestalg和-sigalg选项)
    meta-inf: 应用内所有文件的RSA签名信息(MF:APK文件签名 SF:MF内容签名 RSA:SF文件签名)
    AndroidManifest:
        安卓apk配置文件
            首先是一个xml文件头 <?xml version="1.0" encoding="utf-8"?>
            然后是manifest头
                xmlns:android=命名空间
                package=包名
                android:vesionCode=数值(用于表示APP更新过几次,比较哪个是最新的) 
                android:versionName=字符串(显示用)
                android:installlocation=
            接下来是配置内容
                SDK版本配置 <uses-sdk android:minSdkVersion=16 android:targetSdkVersion=22 android:maxSdkVersion=26 />
                权限配置    <uses-permission android:name="android.permission.INTERNET" />
                特征配置    <uses-feature android:name="android.hardware.camera" android:required="true|false" >
                屏幕配置    <supports-screens android:resizeable=true android:smallScreens|normalScreens|largeScreebs|xlargeScreens|anyDensity/>
                应用配置
                    <application android:label="@string/app_name" android:icon="@drawable:app_icon" android:debuggable调试 android:usesCleartextTraffic明文HTTP android:largeHeap >
                        <!-- activity       activity是一个活动窗口,使用setContentView来显示不同的控件 -->
                        <!-- launchMode     singleTop栈顶单例,打开栈顶的activity singleTask栈内单例,弹出它上面的所有activity-->
                        <!-- intent-filter  startActivity或startService的参数是一个intent,intent会和activity的filter配置进行匹配-->
                        <activity android:name="com.xx.xx.Unity3dPlayer"android:label="@string/app_name" android:launchMode="singleTop|singleTask"> 
                            <intent-filter>
                                <action android:name="android.intent.action.MAIN" />            action.MAIN表示主activity action.VIEW显示activity
                                <category android:name="android.intent.category.LAUNCHER" />    category.LAUNCHER表示在桌面添加启动图标
                            </intent-filter>
                            <meta-data android:name="key" android:value="value" />
                        </activity>

                        <!-- provider是应用之间共享数据的功能,继承ContentProvider提供接口实现增删改查-->
                        <provider
                            android:name="com.xx.xx.XXProvider" 类名,一般使用supportv4库的FileProvider(android.support.v4.FileProvider)
                            android:authorities="com.xx.xx"     唯一标识，内容提供者生成Uri时要和此处匹配 FileProvider.getUriForFile(activity, authority, file)
                            android:grantUriPermission="true"   对内容接收者授与分享文件的访问权限，内容接收者通过context.getContentResolver()
                            android:exported=""                 是否可被其它应用启动
                            >                                   
                            <meta-data android:name="android.support.FILE_PROVIDER_PATHS" android:value=@xml/file_paths/>
                        </provider>

                        <!-- service是一个在后台运行的服务,start/stopService启动/关闭和应用无关的服务,bind/unbindService启动/关闭和应用绑定的服务 -->
                        <service 
                            android:name="com.xx.xx.XXService" 服务名字
                            android:exported="false"           是否可被其它应用启动
                            android:permission=""              启动该服务需要的权限
                            android:process=""                 是否在单独的进程中执行
                            >
                        </service>

                        <!-- receiver是一个继承自BroadcastReceiver的接收器,接收来自sendBroadcast的广播,xml内配置之后可以在应用没有运行的时候接收广播-->
                        <receiver 
                            android:name="com.xx.xx.XXReceiver" 类名
                            android:process="">                 进程
                            <intent-filter>
                                <action android:name="android.intent.action.CAMERA_BUTTON"> 事件来源
                            </intent-filter>
                        </receiver>
                    </application>
苹果SDK
    .mm         oc语言的源代码文件,放入iOS/模块名字/ 目录下
    .a:         静态库,生成方式(gcc编译*.o ar&rcs打包成*.a),查看CPU架构lipo -info 
    .framework  系统的.framework文件属于动态库,个人创建的属于静态库 .framework包含资源文件
    .dylib      动态库,一般都是系统库,在xcode内以*.tbd形式存在,iOS不支持自己实现动态库
    target      编译目标,继承project的编译配置
    scheme      编译任务,指定编译哪几个目标
    .xcarchive  中间文件(包含了.app和dSYM符号表文件),生成命令 xcodebuild archive -scheme * -configuration * -archivepath *.xcarchive
    .ipa        安装包,生成命令 xcodebuild -exportArchive -archivePath *.xcarchive -configuration D|R -exportPath *.ipa -exportOptionsPlist
    .app        应用程序,应用目录通过[[NSBundle mainBundle] bundlePath]获取，沙盒目录通过NSHomeDirectory获取(Documents是其子目录)
    .appleid    分为个人、公司、企业三种,企业账号只能用来测试，并且APPID不可以使用通配符，描述文件和APPID一一对应
    .certificates 证书文件,通过钥匙串生成CSR文件用来申请证书(只包含公钥),导出p12文件(包含公钥和私钥)给项目用
    .provisioning 描述文件,生成描述文件时需要指定APPID、证书、设备列表(INHOUSE模式或者正式发布不需要指定)
    .entitlements 配置文件，描述了应用可以使用哪些系统服务以及证书信息,需要和描述文件内的服务列表匹配
