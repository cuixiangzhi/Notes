基础知识
    appID:      应用的唯一标识id
    appKey:     应用的账号和秘钥成对出现
                appID和appKey可以一致(针对不需要设置账号权限的服务)
    appSecret:  应用的公钥密码
    token:      应用敏感数据获取时用于验证
                使用appID、appKey、appSecret进行初始化后,会生成一个acces_token,用于后续的API调用
    jdk         基础运行环境、基础类库 
    sdk         应用开发类库、工具包 
                android_support_v?.jar库有三个版本
                v4(最低支持android1.6 api4)
                v7(最低支持android2.1,和appcompat-v7一起使用 api7)
                v13(最低支持android3.2 api13)
    ndk         安卓C/C++编译类库、工具包,可用于编写直接调用JNI的C库
    llvm        编译器框架,NDK和XCODE采用LLVM作为默认的编译器
                前端语言->BITCODE->Optimizer->CodeGenerator
                类似C#,先编译为中间语言,然后通过虚拟机执行或者生成机器码
    project     一个项目,可独立存在,也可以包含在workspace内
    target      项目的一个编译目标,继承project的编译配置
    scheme      编译任务,指定编译哪几个目标
    .xcarchive  中间文件(包含了.app和dSYM符号表文件)
                xcodebuild archive -scheme * -configuration * -archivepath *.xcarchive
    .ipa        安装包
                xcodebuild -exportArchive -archivePath *.xcarchive -configuration D|R -exportPath *.ipa -exportOptionsPlist
    .app        执行程序
    iOS证书与描述文件
                证书包含公钥和私钥,用来对app进行加密和解密
                描述文件包含了AppID、BundleID、证书、设备的关联信息
                自动签名只需要设置好TeamID和BundleID,会自动筛选对应的证书和描述文件信息,这种必须使用开发证书
                主动签名需要指定TeamID、BundelID、描述文件ID,根据证书类型选择是开发还是发布
安卓SDK
    .so:
        c/c++动态库,使用NDK编译,包括armeavbi-v7a x64 x86三种架构,具体见系统_编译.txt NDK部分
        ndk库ndk-build用于构建动态库,-j选项用于多线程编译,platforms目录下是安卓平台标准库(包含JNI库)
        注意放入之后CPU架构要选择好对应的类型 ARMV7 X86
        直接放入对应的libs/x86|armeabi-v7a文件夹下
    obb:
        googleplay对apk大小做了限制,需要把apk的一部分资源拆分出来打成obb包(main|patch.版本号.包名.obb)
        googlesdk包含了对应的下载和读取功能(功能有BUG,需要做一些调整)
    jar: 
        java文件集合,包含一个META-INF/MANIFEST.MF清单文件和一组.class文件
            jar -cu *.class -f .jar 创建/更新jar包
    aar:
        aar是一个包含自定义UI和字体等资源和代码的类库,例如调用API之后弹出一个窗口,窗口的UI和字体都是库内的
    assets:
        有些jar库使用了外部的资源或者配置文件,需要放在assets(对应于apk/assets目录)文件夹下
    AndroidMainfest:
        安卓apk配置文件
            首先是一个xml文件头 <?xml version="1.0" encoding="utf-8"?>
            然后是mainfest头
                xmlns:android=命名空间
                package=包名
                android:vesionCode=数值(用于表示APP更新过几次,比较哪个是最新的) 
                android:versionName=字符串(显示用)
                android:installlocation=
            接下来是配置内容
                SDK版本配置
                    <uses-sdk android:minSdkVersion=16 android:targetSdkVersion=22 android:maxSdkVersion=26 />
                权限配置
                    <uses-permission android:name="android.permission.INTERNET" />
                屏幕配置
                    <uses-screens android:resizeable=true />
                应用配置
                    <application android:label="@string/app_name" android:icon android:debuggable android:largeHeap >
                        <activity android:name="com.xx.xx.Unity3dPlayer"android:label="@string/app_name" android:launchMode="singleTop|singleTask"> 
                            <intent-filter>
                                <data android:scheme="http" android:mimeType="text/plain">
                                <action android:name="android.intent.action.MAIN" />
                                <category android:name="android.intent.category.LAUNCHER" />
                            </intent-filter>
                            <meta-data android:name="key" android:value="value" />
                        </activity>
                        <provider>
                            TODO
                        </provider>
                        <receiver>
                            TODO
                        </receiver>
                        <service>
                            TODO
                        </service>
                    </application>
                节点介绍
                    activity
                        activity是一个活动窗口,使用setContentView来显示不同的控件
                    android:name
                        activity入口类的import路径
                    intent-filter
                        startActivity或startService的参数是一个intent,intent会和activity的filter配置进行匹配
                    @string/app_name
                        引用res指定子目录下的某个文件内的配置,app_name引用的是strings.xml的app_name
    keystoreName keyaliasName
        安卓应用打包签名所需要的文件,用于标识一个应用,相同签名的应用会覆盖安装
        这个文件一般是渠道给的,用于发布APK使用
苹果SDK
    .h&.m&.mm
        oc语言的源代码文件,放入iOS/模块名字/ 目录下
    .a:
        静态库,使用DllImport("__Internal")特性标记,xcode编译时会链接该静态库
        gcc .. -o *.o | ar rcs libxx.a *.OnPostProcessBuild
    .framework
        系统的.framework文件属于动态库,个人创建的属于静态库 .framework包含资源文件
    .dylib
        动态库,一般都是系统库,在xcode内以*.tbd形式存在,iOS不支持自己实现动态库
    常见的工程配置
        OTHER_LDFLAGS -ObjC
        ENABLE_BITCODE NO
    导出xcode工程时,依赖库配置
        xcode工程文件是*.xcodeproj文件夹,具体配置文件是*.xcodeproj/*.pbxproj文件
        xcode工程配置包含两种类型,一种是库的依赖、搜索路径;另一种是k/v形式的编译配置
        unity支持导出xcode之后修改pbxproj配置文件 OnPostProcessBuild(BuildTarget buildTarget, string buildPath)
            PBXProject pbx = new PBXProject(); pbx.ReadFromFile(PBXProject.GetPBXProjectPath(buildPath));
            PlistDocument plist = new PlistDocument(); plist.ReadFromFile(buildPath + "/Info.plist");
            ParseFromConfigJson(); CreateDirectory(buildPath + "Libraries/Plugins/iOS/"); CreateDirectory(buildPath + "Framework/Plugins/iOS/");
            开始根据配置文件修改工程设置
            string buildTarget = pbx.TargetGuidByName("Unity-iPhone");
                库搜索路径
                pbx.SetBuildProperty(buildTarget,"FRAMEWORK_SEARCH_PATHS","$(SRCROOT)/Frameworks/Plugins/iOS/|$(inherited)");
                pbx.SetBuildProperty(buildTarget,"LIBRARY_SEARCH_PATHS","$(SRCROOT)/Libraries/Plugins/iOS/|$(SRCROOT)/Libraries|$(SRCROOT)|$(inherited)");
                proj.AddBuildProperty(target, "LIBRARY_SEARCH_PATHS", json.lib_searchpath[j]);
                proj.AddBuildProperty(target, "FRAMEWORK_SEARCH_PATHS", json.framework_searchpath[j]);
                系统动态库引用
                pbx.AddFrameworkToProject(buildTarget,"frameworkName",false);
                系统动态库引用
                pbx.AddFileToBuild(buildTarget,pbx.AddFile("usr/lib/dylibName","Frameworks/Plugins/iOS/",PBXSourceTree.Sdk));
                外部静态库引用
                pbx.AddFileToBuild(buildTarget,pbx.AddFile("Frameworks/Plugins/iOS/frameworkName","Frameworks/frameworkName",PBXSourceTree.Source));
                外部静态库引用
                pbx.AddFileToBuild(buildTarget,pbx.AddFile("Libraries/Plugins/iOS/libName","Libraries/libName",PBXSourceTree.Source));
                外部文件引用
                pbx.AddFileToBuild(buildTarget,pbx.AddFile("Libraries/Plugins/iOS/filePath","Libraries/filePath",PBXSourceTree.Source));
                编译配置
                proj.SetBuildProperty(target, json.buildset_set[j].key, json.buildset_set[j].value);
                proj.UpdateBuildProperty(target, json.buildset_add[j].key, new List<string>() { json.buildset_add[j].value },new List<string>());
                Info.plist配置
                PlistElementDict dict = plist.root.AsDict();
                for (int j = 0; j < json.plistset.Length; j++)
                {
                    dict.SetString(json.plistset[j].key, json.plistset[j].value);
                }
        JSON文件数据结构
        [System.Serializable]
        public class Unity_Xcode_Json_KV
        {
            public string key;
            public string value;
        }

        [System.Serializable]
        public class Unity_Xcode_Json
        {
            public string[] internal_frameworks;
            public string[] internal_dynamiclibs;
            public string[] external_frameworks;
            public string[] external_staticlibs;
            public string[] external_files;
            public string[] lib_searchpath;
            public string[] framework_searchpath;
            public Unity_Xcode_Json_KV[] buildset_set;
            public Unity_Xcode_Json_KV[] buildset_add;
            public Unity_Xcode_Json_KV[] plistset;
        }