GCC编译 
    -g -m64 -O2 -c -o -I -static -l -std -fPIC -shared -Wl 
    ar rcs
GDB调试
	gdb --pid
	r 运行
	c 继续
	n F10
	s F11
	b 文件:行号 函数 
	d 删除断点
	p 打印
VI编辑器
	编辑模式
		输入i进入编辑模式,编辑文本
	命令模式
		输入esc进入命令模式
		:行号,跳转到指定行
		/ name 向后查找
		? name 向前查找
		:wq 保存并退出
		:set number 显示行号
NDK编译
	Android.mk
		指定编译路径
		LOCAL_PATH := $(call my-dir)

		#设置模块名字
		include $(CLEAR_VARS)
		LOCAL_MODULE := module_name

		设置编译选项
		LOCAL_CFLAGS :=
		LOCAL_CPPFLAGS := $(LOCAL_CFLAGS)
		LOCAL_LDLIBS := 

		设置包含文件
		LOCAL_C_INCLUDES := 
		LOCAL_SRC_FILES :=

		#添加包含目录
	  	$(call import-add-path, $(LOCAL_PATH)/)
 
	  	#设置依赖库(whole表示全链接,没有只链接使用到的函数)
	  	LOCAL_WHOLE_STATIC_LIBRARIES +=

	  	include $(BUILD_STATIC_LIBRARY) 当前模块是一个静态库 .lib or .a
	  	include $(BUILD_SHARED_LIBRARY) 当前模块是一个动态库 .dll or .so
	  	include $(BUILD_EXECUTABLE)     当前模块是一个可执行程序

	  	#添加依赖模块目录
	  	$(call import-module,../../xxx)
	Application.mk
		APP_STL := gnustl_static
		APP_ABI := armeabi-v7a x86
		APP_OPTIM := release
		APP_PLATFORM := android-16
MAC编译
	一个scheme对应一个target
	导出archive  
		xcodebuild archive -scheme xx -configuration Debug|Release -archivePath *.xcarchive -quiet>null
	导出ipa 
		xcodebuild -exportArchive -archivePath *.xcarchive -configuration D|R -exportPath *.ipa -exportOptionsPlist
	lipo -info 查看静态库支持的CPU架构
	lipo -create xx.a x.a -output xx.a合并多个版本的静态库
Mono编译
	源代码
		.java .lua .cs都是源码,需要先解析成字节码才可以执行
	字节码
		.class是JVM执行的字节码
		.dex是DVM执行的字节码,DVM是安卓系统下的JVM优化版本
		.il是CLR执行的字节码
	机器码
		字节码是解释执行的,也就是一个execute函数,循环执行每一条字节码
	JIT
		动态编译,运行时生成机器码并执行,可以根据硬件和程序运行情况生成最优指令
			1.申请可执行内存空间 	void* addr = mmap(0,size,MMAP_EXEC | MMAP_READ | MMAP_WRITE,MMAP_PRIVATE,-1,0)
			2.初始化函数机器码   	memcpy(addr,code,sizeof(code))
			3.函数指针指向该地址	typedef ret (*func)(arg); func f = addr
			3.执行该函数
	AOT
		静态编译,直接生成机器码,Mono的AOT会把部分IL编译成机器码
		--aot-only会把能编译的都编译,并且运行时无法进行JIT
	编译执行
		javac *.java 把java文件编译成class字节码
		mcs *.cs 把cs文件编译成mono可执行的exe
		mcs -r:*.dll -target:library *.cs 把cs文件编译成dll文件
		java *.jar|*.class
		mono --aot-only *.exe 以FULL_AOT模式执行exe
Cmake配置
	#最低版本
	cmake_minimum_required(VERSION 2.8)
	#项目名字
	project(ProjName)
	#源码信息
	aux_source_directory(<dir> DIR_SRCS)
	#包含目录
	include_directories(<dir> <dir> <dir>)
	#子级目录
	add_subdirectory(<dir>)
	#链接目录
	link_directories(<dir>)
	#生成目标
	add_executable(ProjName ${DIR_SRCS})
	add_library(LibName ${DIR_SRCS})
	#链接目标
	target_link_libraries(ProjName LibName)