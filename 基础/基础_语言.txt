Monday Tuesday Wednesday Thursday Friday Saturday SunDay
January February March April May June July August Spetember October November December
基础知识
	数值存储
		计算机只有加法运算器,计算机存储补码,运算器补码运算
		正数补码与原码一致 负数补码符号位不变,其余位取反加1 -2^(n-1)没有反码,补码与原码一致
		N位有符号整数范围是1000..0->0111..1
	PROTO&TAG
		一个tag由序号+类型构成,写入到BUFFER时,每7位作为一个字节,小于0x80的字节是最后一个字节
	字节对齐
		硬件支持
			不同的硬件对存储空间的处理不同,某些平台对特定类型的数据只能从特定地址开始存取,而不允许任意存放,有时会触发异常
		存取效率
			CPU是按照chunk来读取内存的,chunk大小可以是2字节、4字节、8字节等,chunk称为内存访问粒度
			CPU每次都是从chunk对齐地址处读取内存数据,如果一个数据不是对齐的,而是分散在不同的chunk上,那么就会增加访问次数
			CPU访问内存的时间:
				总线周期,一个总线周期由几个时钟周期组成;
				指令周期:执行一条指令的时间
				访问次数增加会增加访问数据消耗的总线周期时间
		对齐规则
			根据编译器的不同而不同
			自身对齐:以变量大小字节数对齐
			结构对齐:成员最大字节大小对齐
			指定对齐:#pragma pack(n)
			有效值:  min{自身对齐,指定对齐}
	变量类型
		int uint 32位
		short ushort 16位
		float double 
					表示形式	
						IEEE754编码方式 符号位(1) + 指数位(8|11) + 尾数(23|52) 指数=E-127|1024
						符号位*(1.M)*2^E
					指数状态
						normal number 隐藏位为1,指数位非0,符号位*(1.M)*2^E	
						sub normal number 隐藏位为0,指数位为0,符号位*(0.M)*2^E
						non normal	指数位全为1,表示NAN或者INFINITY,也就是无穷大和非数值
					取值范围
						指数0和255被占用,因此指数范围是[-126,127]|[-1022,1023]
						尾数范围是[1.000..0,1.111.1]约等于[1,2]
						因此float范围是[-2*2^127,-1*2^-126]U[1*2^-126,2*2^127]
					有效位数
						单精度32位 有效6位  
						双精度64位 有效15位
						lua采用双精度浮点数
					定点数
			 			定点数小数点在十进制数值中的位置固定,小数个数确定了精度,精度为 1/2^n,n为小数个数
			 			Qx(x为小数位数) Sx.y(为整数个数,y为小数个数) 表示范围为-2^n ~ (2^n-1) + (1-1/2^n)
		string char uchar 
					 字符数组和字符 
					 char*最后是一个\0字符  
					 C# char代表一个字符或者一个中文符号,长度不固定 
					 lua和C++一样 字符集分为ASCII和Unicode  UTF-8和GBK是一种UNICODE编号的编码方式
									UTF-8不定字节编码以字节数开头,0xxxxxxx 表示一个字节  110xxxxx表示2个字节,后续字节以10开头  最多会有6个字节
	多线程
		RingBuffer无锁环形缓冲区,适用于命令队列
		atomic标记,原子类型,加减操作是原子操作,不可再分 例如atomic<int>
	编译执行
		C++  GCC(LINUX) CL(WINDOWS) MINGW(WINDOWS)  
		JIT 即时编译,在运行时将频繁执行的方法编译成本地机器代码,需要可执行内存支持
		AOT 提前编译,运行前编译
	逆波兰式  
		后缀表达式,方便堆栈操作实现任意复杂度的表达式,一次扫描即可得出结果,遇到操作数压栈,遇到运算符弹出操作数并运算
		波兰式即前缀表达式,对应于二叉树的前序遍历结果,逆波兰式对应于后序遍历结果
C/C++
	关键字
		指针	
			它也是个变量,它的值是对象的地址,使用&运算符获取对象  p->等价于(&p).
			指针和引用变量赋值时必须匹配类型
		引用	
			变量换了个名字,没有内存分配,它和它引用的变量用的是一份内存
			引用必须在声明时初始化
		const  
			C++字面字符串 文件内的常量不可以const_cast 函数内的可以
			C#变量必须属于类,函数内变量不能加const和static
			顶层const：指针本身是个常量
			底层const：指针所指的对象是个常量
		static	
			静态全局常量(文件内有效)
		extern 
			外部变量
		#define 
			宏定义 ##宏拼接 ##用于拼接变量 #宏替换 #代表后面的是个字符串
		typedef 
			类型组合定义		 
		lua里number统一为double类型,转为int会丢失精度并且会被限制在int范围内
	类型转换 
		basic-type 隐式转换	
		static_cast 基本类型之间相互转换,可替代隐式转换
					 类层次转换,父类到子类没有类型检查
					 void转换
		const_cast只能改变底层const,也就是指针所指向的对象的const
		dynamic_cast 用于指针和引用的类层次转换
		reinterpret_cast 用于将二进制位解释为另一种类型
		as type.IsAssignableFrom 
	函数    
		引用&值参数传递 ...传递参数时只能传递基本类型
	   数组作为参数无法拷贝,所以传递过来之后会退化为指针
	   注意不要返回栈变量的指针,因为已经销毁了
	   函数指针  指针指向一个函数,可以直接P()调用
	   定义一个函数,返回函数指针 int (*f())()
	类&继承  
		private public protected friend class 
		virtual vptr 重载 覆盖 vtable virtual=0 
		每个带有虚函数的类都有一个静态的虚表,每个带有虚函数的类对象都有一个虚表指针,在构造函数内初始化
		编译时多态性,模板,重载   运行时多态性,虚函数重写  
		虚继承,保证基类只有一份实例virtual-base-class  如果有构造函数,那么必须在最底层派生类里实现虚基类的构造,否则会有编译错误 
		构造初始化 拷贝赋值时指针 
		友元函数不受访问权限影响
		C# internal修饰程序集内部变量或者类
	模板&泛型 
		template where限定 
		模板 template<class T> 函数定义
		模板特例 template<> return function<int>(){}
		lambda [捕捉列表](参数列表){函数体} =值捕捉 &引用
		bind 参数重新排列  bind(func,placeorders::_1,_2,var);
		function<void(int,int)>
	库&dll&依赖 
		DLL库 
			__declspec(dllexport) __stdcall __cdecl
			头文件 dlfcn.h unix可用 mac/windows需要别的API,编译时-ldl -rdynamic
			void* dlptr = dlopen("dlname",RTLD_NOW) 
			void* funcptr = dlsym(dlptr,"funcname")
			int ret = dlclose(dlptr)
		IO库 iostream 控制台读写 cin>> cout<<
			 fstream 文件读写 成员函数 f("",ios::in|ios::out|ios:binary) 
									   f.close() 
									   eof()文件结尾
									   tellg() tellp() 用于获取当前文件读取或者写入的位置
									   seekg(offset,ios::cur) seekp() 用于移动读写指针到指定位置 ios::beg ios::cur ios::end
									   read(buffer,size) write(buffer,size) 字节数组读写
					C文件读写 open和write属于系统调用,低级IO无内存缓冲,不同操作系统不一样
							  fopen "path","wrab+"
							  fclose fp
							  fread buffer,size,count,fp
							  fseek fp off,seek_cur
							  ftell fp
			 字符串读写 strstream char*读写 istr(char*) 废弃的API,推荐使用string读写,因为char的不保证最后一个字符是'\0'
						sstream string读写 istr(string) clear() str()
			 IO流不能拷贝和赋值
		顺序容器 vector 插入元素push_back insert 删除元素erase clear 
				 list   插入元素push_back push_front insert 访问 front back 删除erase pop_front pop_back
				 stack  push pop top empty size
		迭代器 ::iterator iter = ww.begin() ww.end() cbegin cend rbegin rend
		算法库  algorithm numeric
				查找 find  find_if
				删除 remove remove_if
				赋值 fill fill_n
				替换 replace replace_if
				排序 sort
				去重 unique
		关联容器 map multimap  pair<>类型make_pair   添加元素insert 删除元素erase 
		右值引用,&&引用一个即将被销毁的对象,可用于move构造和赋值
	常用基础函数 
		assert assert(ptr)
		ctype  isupper islower isdigit isalpha toupper tolower
		limit  最值宏定义
		math   常用数学函数
		signal 进程信号处理,signal函数用于注册信号处理函数,常见信号有
				SIGILL 非法指令  SIGINT 输入CTRL+D SIGABRT 终止 SIGCHLD 子进程异常停止 SIGFPE 除0异常 SIGKILL 杀死进程 SIGSEGV 非法内存访问 SIGSYS 非法系统调用
		stddef NULL定义
		stdlib 内存分配 malloc free 数值与字符串转换 atoi itoa 随机数 srand(seed) rand 系统操作 system exit abort 环境变量 getenv putenv
		stdarg 不定长参数处理  __VA_ARGS__ va_list ap; va_start(ap,format); char buffer[512]; len = vsprintf(buffer,format,ap); va_end(ap);
		string strcat(dst,src) strcpy(dst,src) strlen(src) strcmp(src,dst) c_str
		ctime time_t time(NULL)系统时间秒 clock_t clock()运行时间毫秒 tm localtime(time_t t)具体日期
		基础宏定义 __LINE__ __FUNCTION__ __FILE__

	EFFECTIVE C++ 
		1.尽量使用const而不是#define, 宏定义没有类型检查
		2.构造、析构、赋值
		  编译期会默认生成 无参构造函数(没有构造函数时),拷贝构造函数、拷贝赋值运算符,不想要就声明为private,但不实现
		  如果基类或者派生类会有虚函数,那么基类析构函数必须是虚函数,有虚函数就会有虚表和虚表指针,虚表为静态,类共享,虚表指针为对象私有,初始化之后不会改变
		  析构函数要确保不能出现错误,否则会导致内存泄漏
		  构造和析构过程中不能调用虚函数,因为这个时候基类或者子类部分已被销毁或者尚未初始化
		  赋值运算符返回对象引用,注意自我赋值判断,注意复制指针内存
		3.资源管理
		  以对象的形式进行资源管理,依靠构造和析构函数来处理资源的初始化和释放
		  智能指针不能用于数组,因为析构调用的是delete而不是delete[]
		4.类的设计
		  API接口要简单清晰易用,不能有二义性
		  参数传递使用引用传递,临时对象会等引用结束后析构
		  返回值不能返回引用,主要针对临时对象,尽量只返回基本类型
		  成员变量私有,通过API修改其值
		  类功能尽量单一,尽量使用非成员函数完成额外的功能
		5.类的实现
		  变量在使用之前在定义
		  减少类型转换
		  降低文件依赖关系
		6.类的继承关系,体系结构
		  设计模式,接口继承与实现继承
		7.自增自减区别、
		8.抛出异常使用函数内静态变量,利用引用捕捉,防止对象拷贝同时防止异常对象是临时对象
		9.参数传递不能传递子类对象给基类对象,因为子类部分会被切掉,所以参数用引用比较合适
	C++对象内存布局
		单继承  基类虚表+子类虚表,只有一个虚表,基类在前,子类在后,子类重写的在基类的对应位置
		多继承  会有N-1个虚表,第一个基类与子类合一,子类虚函数在第一个虚表内,
		菱形继承 这个时候要利用虚继承,这样每个子类有一个指向虚基类的指针,只有一份基类对象,该对象是由派生类初始化的(创建的哪个子类,哪个子类虚继承了父类)
		malloc是分配一块新的内存  realloc是在原内存后加长,可能会变化地址
	C++跳转
		goto:函数内跳转
		setjmp longjmp 非局部跳转
		setjmp(jmp_buf env) 设置跳转点,保存函数上下文 直接调用返回0,跳转调用返回longjmp第二个参数
		longjmp(jmp_buf env,int ret) 调到跳转点,恢复函数上下文
	C赋值	int ? = (1,2,3,4,5); 会取最后一个值
			typedef struct 		 可以定义一个在其它地方定义的链接,相当于extern

C#   
	.NET规范
		类似于OpenGL规范,.NET规范定义了实现这种技术需要的API集合
		CIL CLR CLI FCL等组成,CLR是运行时,CIL是中间语言,FCL是基础类库
		.NET2.0支持最常用的类库
		.NET3.5支持System.Linq
	.NET实现
		.NET FRAMEWORK是windows平台的.NET实现
		MONO是跨平台的.NET实现 mono2.0/.net2.0/3.5 mono2.10/.net4.0 mono3.4/.net4.5 mono4.4/.net4.6
  	反射
		特性,继承自System.Attribute的类,放在类上面通过构造函数初始化,可以使用GetType().GetCustomAttributes(类型,继承)获取所有特性
		Reflection 反射程序集包含 Type 类型管理 Assembly 程序集管理
  	DLL
		C++使用__cdecl __declspec(dllexport)导出API
		C#使用DllImport(dllName,EntryPoint,CharSet,CallVersion) static extern调用API
		int float bool uint long直接对应
	  	string对应char* 
	  	byte[]对应unsigned char*,传递时需要使用Marshal.Copy用于在托管与非托管之间转换内存 Marshal.Copy(src, start, dst, len);  Marshal.Copy(src, dst, start, len);
	  	function pointer对应 delegate MonoPInvokeCallback(typeof(DelegateName))
      	StructLayout(LayoutKind.Sequential),RequiredByNativeCode
		[MethodImpl(MethodImplOptions.InternalCall), WrapperlessIcall] 标记该方法在C++内实现		  
		C++使用mono运行C# DLL,需要mono提供的库和头文件,注意c# dll需要使用 mono命令来生成, msc *.cs -t:library
python 
	   函数定义
			def name(params):
	   判断是否是主动执行
			__name__ == "__main__": 
	   设置文件编码
		   #coding:utf-8 
		   import sys
		   reload(sys)
		   sys.setdefaultencoding("utf-8")
	   当前脚本执行路径
		   import os
		   os.path.abspath(sys.path[0])
	   参数
		   sys.argv数组
	   数组  append   
	   循环  for var in 数组或者range(1,n):
	   文件操作  file = open(path,"wb")  file.write() file.close() file.readline file.readlines file.seek(cur,off) file.tell
	   目录操作 是否为目录 os.path.isdir() 
				目录列表 os.listdir()
				删除空目录 os.rmdir()
				路径是否存在 os.path.exists()
				分解为文件名和路径 os.path.split()
				删除目录 shutil.rmtree()
				         shutil copy()文件夹
						 shutil copyfile 文件
						 shutil move 移动
						 shutil remove 删除文件
	   堆栈   traceback.print_exc()
	   输入  rawinput()
	   字符串  string[0:-3]  
	           string.split() 
			  字符串拼接 string.join(array)  "%s" % varname  a + b
			  替换replace
	   字节   b前缀后跟ASCII字符
	   		  b前缀后跟转义16进制 b'xFF'
	   		  bytesarray(b'')
	   编码   python字符串是对象,有两种,
	   		  一个是str类型,可能是gbk或utf-8编码或者ascii编码 通过decode("gbk|ascii|utf-8")操作转换为unicode对象
	   		  一个是unicode类型,通过encode("gbk|utf-8|ascii")转换为str对象
	   		  判断对象类型 type(x) is unicode or type(x) is str
	   
	   库  excel库xlrd
	              excel = xlrd.open_workbook(path)
				  sheetnames = excel.sheet_names()
				  sheet = excel.sheet_byname(name)
				  cols = sheet.row_values(n)
				  ctype = sheet.cell(row,col)
				  value = sheet.cell_value(row,col);
	   库  xml库xml.etree.ElementTree
	   			  root = ET.parse(".xml")
	   			  for child in root:
	   			  	for field in child:
	   			  		filed.tag 
	   			  		field.text
lua
	后缀表达式:  建立符号栈,
	             遍历中缀表达式
				   1.数字,直接输出
				   2.运算符 (入栈  )弹出符号栈元素,遇到)停止,)弹出但不输出  其他符号,弹栈直到遇到(或者遇到优先级低的符号停止
				   3.遍历完成,输出符号栈所有符号
	常量定义 luaconf.h       平台相关 搜索路径 堆栈大小 
	基础函数定义lua.h        以lua_为前缀,版本、REGISTERINDEX、GLOBALSINDEX、T* lua_Alloc lua_CFunction lua_is* lua_to* lua_push* lua_get* lua_set*
	辅助函数定义luaxlib.h    以luaL_为前缀
	基础库注册定义lualib.h   lua_open基础库相关函数定义,实现在各个库对应的.c内
	库实现       
		 以lua_open为前缀,具体实现分散在不同的.cc文件内  
		 lauxlib.c  辅助库实现 luaL_loadfile luaL_loadbuffer luaL_reg/luaL_register luaL_check* luaL_opt* luaL_ref/unref luaL_newstate
		 lbaselib.c base库实现 g/setfenv g/setmetatable x/pcall tonumber/string rawg/set pack/unpack dofile/loadstring
		 liolib.c  io库实现 read write flush close open input output type
		 lmath.c   math库实现 abs ceil floor random randomseed cos sin acos asin tan atan exp log sqrt
		 lstrlib.c string库实现 lower upper len format reverse sub gsub find gmatch byte char dump match rep
		 ltablib.c table库实现 insert concat maxn remove sort
		 loslib.c  os库实现
		 loadlib.c 文件解释入口 require module seeall path cpath loaded preload loaders loadlib seeall
		 ldblib.c  debug库实现 traceback getenv gethook sethook getmetatable
		 linit.c  库注册入口函数整合
	常用API:  
		函数注册luaL_Reg注册函数结构体 luaL_Reg[] = { {"func_name",func},{"func_name1",func1} } luaL_register
		函数调用lua_call(L,narg,nresult) lua_pcall(L,nargs,nresults,err_func)
		table字段获取lua_getfield(L,stackid,k) lua_getmetatable lua_gettable lua_gettop lua_getglobal
		table字段创建lua_newtable lua_newuserdata
		lua_raw/get会在指定位置读取指定key的数据并压入栈顶
		lua_raw/set会移除栈顶数据(value和key),并设置指定table的key对应value
		lua_pop会移除栈顶指定个数的数据
		lua_push复制指定位置并压入栈顶
		lua_to系列不会移除栈数据 lua_toboolean lua_tocfunction lua_tointeger lua_tolstring lua_tonumber lua_tostring
		lua_is系列也不会移除栈数据 lua_isnil lua_isnumber lua_istable lua_isstring
		lua_ref lua_unref lua_getref 会通过一个int数据创建、解除、获取引用类型数据,可以是userdata(指定大小的指针,有元表)
	常用库函数
		coroutine 
			协同程序,非抢占式多线程,需要自己主动在不同的协程之间切换,同时只有一个协程在运行
			协程状态
				suspended 挂起状态,创建create或者yield之后处于这个状态
				running 运行状态,resume之后处于这个状态
				dead 死亡状态,没有遇到yield或者yield结束了,表示协程执行结束了
				normal 正常状态,协程套协程,执行到另一个协程去了
			协程操作
				status 获取协程状态
				create 传入一个执行函数,类似于UNITY的StartCoroutine
				resume 协程需要自己主动调用才可以开始或者继续执行
					   yield之后回到了主线程,主线程主动调用进入协程
					   resume可以在第一次启动时传递参数
					   resume可以传递参数作为初始化参数或者yield的返回值
				yield 只会出现在协程函数内部,yield可以传参数作为resume的返回值
				running 当前正在执行的协同程序
	变量定义位置
		全局表	      	LuaState.l_gt
		注册表 	      	LuaState.l_G.l_registry
		基础类型元表    LuaState.l_G.mt
		基础元函数名字 	LuaState.l_G.tmnames
		字符串哈希表    LuaState.l_G.strt
		GC对象
		函数LocVar 		Proto.localvars
		函数UpVar       Proto.upvalues存储名字,LClosure.upvals存储具体变量(new时赋值,具体指在LuaState.openupval)
ShaderForUnity
	定义shader名字,用于Shader.Find
	Shader "" 
	{
		1.	定义shader变量,可以在Unity中赋值 2D Float Int Vector Range Color CUBE
			Properties { _Name ("InspectorName",Type) = default } 
		2.	SubShader 只选取一个执行
			首先判断SubShader的标签和Pass的标签,检测渲染路径、渲染类型
			然后在判断shader代码指令是否和当前GPU兼容
			SubShader 
			{
				3.SubShader&shader_feature&multi_compile
					shader_feature相当于一个全局bool变量(会生成N*N个变体),通过shader.EnableKeyword来开启这个特性
					multi_compile相当于宏定义
				3.SubShader&Tags 
					Queue包括BackGround背景天空盒1000 Geometry不透明2000 AlphaTest2450 2500以下属于不透明物体 Transparent半透明3000 Overlay4000
					RenderType包括Opaque Transparent
					ForceNoShadowCasting 计算阴影时不计算该物体,灯光空间计算深度纹理忽略该类型
					IgnoreProjector 是否接受投影 
				4.Pass&CommonState
					LOD n 设置距离摄像机多近才有效,例如设定不同的LOD级别来渲染物体
					Cull Back/Front On/Off 裁剪正、反面的开关
					AlphaTest Less CutOff 透明度测试,测试选项和深度测试一样		
					Offset 深度偏移结果为Factor * DZ + r * Units 用于控制两个多边形重叠时始终保持每帧渲染结果一致,计算后离摄像机更远则不渲染,负数离摄像机更近
					ZTest Less/LEqual/Equal/NotEqual/GEqual/Greater/Always 检测Z值与深度缓冲的值大小,不满足条件则不渲染
					Zwrite On/Off 是否将当前物体的Z值写入深度缓冲
					Lighting On/Off 是否计算光照			
					Fog On/Off 是否计算雾效果
					Blend One/One SrcAlpha/OneMinusSrcAlpha 颜色混合方式,src是指当前颜色,dst是指颜色缓冲区内的颜色
				5.Pass
				{	
					Name "PassName" 定义Pass名字
					UsePass "Shader/PassName 插入在其他位置定义的Pass代码
					5.Pass&Tag
						LightMode 正向渲染,按照常规流程在顶点或者像素shader内计算光照,由于同一像素会被绘制很多次,因此实时光源很多时计算量就会很大
										  根据QualitySetting设置的逐像素光源数量,从光源中选取最亮的前几个计算像素光照,其它光源以球谐函数计算
								  延迟渲染,首先计算场景信息存储到G-Buffer内,,场景信息包括位置、法线、漫反射颜色、高光等等,占用显存带宽,需要MRT支持
								Always 不计算光照
							    ForwardBase模式的Pass用于计算主光源和所有的逐顶点、球谐函数光源
							    ForwardAdd模式计算其他逐像素光源,并且不产生阴影
							    Deferred延迟渲染
							    ShadowCaster计算阴影时写入该物体的深度
					CGPROGRAM
					6.Pass&Uniform
						一个uniform是针对一个shader的常量,由应用程序设定
						可以再shader内定义uniform变量,在C#内使用Shader.PropertyToID()获取变量ID,通过mat.Set来设置变量
						常用的常量包括UNITY_MATRIX_MVP UNITY_PI
					6.Pass&DataType
						float32为 half16位[-60000,60000],精确到小数点3.3位 fixed12位定点数[-2,2],精确度1/256
							颜色和单位向量使用fixed足够
							其他信息尽量使用half,除非三位小数点不够用,或者数值超过+-60000
						sampler2D 图片类型,变量名和Properties一致
					7.Pass&#pragma

					8.Pass&#include "xx.cginc"

					ENDCG
				}
				6.surf
				{
					定义
					#pragma surface surf LightMode 
				}
			}
			Fallback ""
	} 
ShaderForOgre
	.cg文件用来写vert和frag相关函数
	.program文件用来定义shader程序的名字、源码、入口函数、版本
	.material文件用来定义使用哪种方式渲染
		material定义不同的材质
		technique定义显卡适配参数
		pass内定义shader初始参数,使用哪个shader程序
Shader&库

OC: 面向对象的语言
	基础函数类库 
		#import <Foundation/Foundation.h>
		日志打印:NSLog
		字符串:NSString
	类声明
		声明类以@interface开头,@end结尾 
		@interface cls : NSObject
		@end
	类实现
		实现类以@implementation开头,以@end结尾
		@implementation cls
		{
			大括号内部是成员变量
		}
		@end
	类函数:
		-(void)name:(bool)param;  减号表示函数开始,加号定义的是静态函数,冒号前面是函数名字和返回值,类型用括号括起来
	类对象:
		创建
			cls* ptr = [[cls alloc] init];
			类对象创建使用中括号,前面是类名,后面是分配函数,在后面是初始化函数
		释放
			[cls release:1];
			OC不支持垃圾回收,用完需要释放,参数用冒号表示开始
Java:
	JDK分类
		J2ME J2SE J2EE分别是针对移动平台和嵌入式、PC平台、企业版设计的JDK
		JDK是Java开发工具包,包括了开发环境JRE、Java编译运行工具、一些基础类库
		JRE是Java的运行环境,包括了JVM虚拟机和核心类库
	JDK工具
		javac 编译工具,把.java编译为.class字节码
		jar 打包工具,把.class文件打包在一起
		java 运行工具,运行.class后缀的java程序
		javap 反编译
	类库
		java.lang 系统基础库,不引入就可以使用的包
		java.io   IO相关类库
		java.nio  非阻塞IO相关类库
		java.net  网络相关类库
		java.util STL相关类库
		java.sql  数据库操作类库
		

			  





