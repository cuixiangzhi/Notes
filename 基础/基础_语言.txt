日期月份
	Monday Tuesday Wednesday Thursday Friday Saturday SunDay
	January February March April May June July August Spetember October November December

基础知识
	数值存储
		原码补码
			计算机只有加法运算器,计算机存储补码,运算器补码运算
			正数补码与原码一致 负数补码符号位不变,其余位取反加1
			N位有符号整数范围是1000..0->0111..1
		浮点类型	
			IEEE754编码方式 符号位(1) + 指数位(8|11) + 尾数(23|52) 指数=E-127|1024 符号位*(1.M)*2^E
		指数状态
			指数位全0且尾数全0,表示0
			指数位全1且尾数全0,表示INFINITY(无穷大)
			指数位全1且尾数非0,表示NAN(非数值)
		取值范围
			指数0和255被占用,因此指数范围是[-126,127]|[-1022,1023]
		有效位数
			单精度32位 误差为2^(e-23)
			双精度64位 误差为2^(e-52)
			lua采用双精度浮点数
			注意点
				有效位数并不是指前6位数字是有效的,而是指真实值和存储值的差与原值的比值在误差范围之内
				例如
					123456789存储为123456792,误差为3(小于2^(26-23)=8)
					1.1存储结果为1.10000002,误差为0.00000002(小于2^(-23)=0.0000001)
		定点数
				Sx.y(x为整数位数,y为小数位数),定点数会精确存储小数的每一位,误差在1/2^y以内
	字节对齐
		硬件支持
			不同的硬件对存储空间的处理不同,某些平台对特定类型的数据只能从特定地址开始存取,而不允许任意存放,有时会触发异常
		存取效率
			CPU是按照chunk来读取内存的,chunk大小可以是2字节、4字节、8字节等,chunk称为内存访问粒度
			CPU每次都是从chunk对齐地址处读取内存数据,如果一个数据不是对齐的,而是分散在不同的chunk上,那么就会增加访问次数
			CPU访问内存的时间:
				总线周期,一个总线周期由几个时钟周期组成;
				指令周期:执行一条指令的时间
				访问次数增加会增加访问数据消耗的总线周期时间
		对齐规则
			根据编译器的不同而不同
			自身对齐:以变量大小字节数对齐
			结构对齐:成员最大字节大小对齐
			指定对齐:#pragma pack(n)
			有效值:  min{自身对齐,指定对齐}
	函数栈帧
		函数调用约定
			cdecl    参数从右至左入栈,调用参数之后生成add esp指令清理函数参数栈
			stdcall  参数从右至左入栈,被调用函数最终生成ret ?指令清理函数参数栈
			fastcall 参数从右至左入栈,被调用函数最终生成ret ?指令清理函数参数栈,不大于4个字节的参数存入寄存器ECX EDX
			thiscall this指针存储在ECX寄存器内
		函数名字编译
			_stdcall  C语言编译后为_funcname@nnumber C++编译后为?funcname@YG******@Z
			_cdecl    C语言编译后为_funcname         C++编译后为?funcname@YA******@Z
			_fastcall C语言编译后为@funcname@nnumber C++编译后为?funcname@YI******@Z
		函数栈帧指针
			ebp指向栈底,esp指向栈顶,栈指针从高地址向低地址移动
		函数调用和返回指令
			函数调用开始
				push param
				call func     call指令会保存返回地址(下一条指令地址),ret会返回到该地址继续执行
				调用约定
				add esp ?     cdecl调用约定会生成该指令
			函数代码开始
				保护现场
				push ebp      ebp指向调用函数栈底(调用函数的栈帧起始点)
				move ebp esp  esp指向当前函数栈底(被调函数的栈帧起始点)
				执行逻辑
				func code     临时变量、操作指令等等
				恢复现场
				move esp ebp  esp恢复为调用函数栈顶(esp指向调用函数栈帧的栈顶)
				pop ebp       ebp恢复为调用函数栈底(ebp指向调用函数栈帧的栈底)
				调用约定
				ret ?         stdcall调用约定会生成该指令
	脚本语言 
		https://www.cnblogs.com/murongxiaopifu/p/4557365.html
	逆波兰式  
		后缀表达式,方便堆栈操作实现任意复杂度的表达式,一次扫描即可得出结果,遇到操作数压栈,遇到运算符弹出操作数并运算

ASM
	寄存器
		R0-R3  参数传递
		R4-R11 局部变量
		IP-R12 
		SP-R13 栈顶指针
		LR-R14 返回地址
		PC-R15 指令地址
		CPSR   程序状态
	指令集
		MOV A B 赋值指令,把B值赋给A
		CMP A B 比较指令
		JNE     跳转指令,条件跳转
		JMP     跳转指令,无条件跳转
		PUSH    压栈指令
		POP     出栈指令
		CALL PC 调用指令
		RET     返回指令
	SSE指令
		加载数据 _mm_load_ss|ps _mm_set_ss|ps
		存储数据 _mm_store_ss|ps
		逻辑运算 __mm_add|mul_ss|ps

C/C++
	关键字
		指针   它也是个变量,它的值是对象的地址,使用&运算符获取对象  p->等价于(&p).
		引用   变量换了个名字,没有内存分配,它和它引用的变量用的是一份内存
		static 静态全局常量(文件内有效) 静态局部变量(作用域内有效)
		extern 外部变量或函数
		#define ##拼接变量 #替换变量
		typedef 类型组合定义
		sizeof  编译期有效,不能在运行时判断数据长度
		const  指针常量
			顶层const：指针本身是个常量
			底层const：指针所指的对象是个常量
			const函数: 不可以修改类成员变量
			const参数: 不可以参数内容,const参数可以接收任意参数,非const只能接收非const类型参数
			const返回: 不可以修改返回值的内容
		new&delete
			new object()  调用operator new函数分配内存,然后调用object的构造函数
			delete ptr    调用ptr所指向的对象的析构函数,然后调用operator delete函数释放内存
			operator new  内存分配函数void* operator new(size_t size)
			placement new 在指定内存块上构造对象 new (buffer) object()
	类型转换 
		static_cast 基本类型之间相互转换,可替代隐式转换 类层次转换,父类到子类没有类型检查
		const_cast 只能改变底层const,也就是指针所指向的对象的const
		dynamic_cast 用于指针和引用的类层次转换,向下转换有类型检查,不一致结果为NULL
		reinterpret_cast 用于将二进制位解释为另一种类型
		operator T() 类型转换运算符,前面添加explicit后禁止隐式转换
	类&&继承
		参数传递
			传递方式:引用&值参数传递 
			左值传递:直接在调用函数时构造一个对象传递,会发生两次构造
			右值传递:传递构造出来的对象,避免二次构造
		虚表&虚表指针&虚继承&虚析构函数
			虚表: 每个带有虚函数的类都有一个静态的虚表
			虚表指针: 每个带有虚函数的类对象都有一个虚表指针,在构造函数内初始化
			虚析构函数: 声明了虚函数的基类必须实现虚析构函数,确保正确析构
			虚继承: 保证基类只有一份实例virtual-base-class
			注意点: 基类构造函数不能调用虚函数 子类必须实现虚基类的构造
		类初始化
		  	虚表指针->初始化列表->构造函数体
		内存布局
			类对象
				虚表指针(每个基类部分都有一个,构造的时候会经过多次初始化,直到子类对象)
				虚基类指针(虚继承才会有,每个虚基类都有一个,存储基类地址偏移)
				基类成员
				子类成员
				基类成员(多继承,虚继承时重复基类成员在最后面)
			虚函数表(多继承时有多个)
				基类虚函数(会被子类相同的虚函数覆盖)
				子类虚函数(只存在于第一个基类虚表)
	模板&泛型
		模板定义 template<class T> return_type function_name(arg_type) {}
		模板特化 template<> return_type function_name(special_arg_type) {}
		函数对象 function<return_type (arg_type)> function是一个重载了()运算符的模板类
		lambda   [捕捉列表](参数列表){函数体} =值捕捉 &引用
	常用基础函数
		assert assert(expression)
		ctype  isupper islower isdigit isalpha toupper tolower
		signal SIGILL 非法指令 SIGINT 输入CTRL+D SIGABRT 终止 SIGCHLD 子进程异常停止 SIGFPE 除0异常 SIGKILL 杀死进程 SIGSEGV 非法内存访问 SIGSYS 非法系统调用
		stdlib 内存分配 malloc free 数值与字符串转换 atoi itoa 随机数 srand(seed) rand 系统操作 system exit abort 环境变量 getenv putenv
		stdarg 不定长参数  __VA_ARGS__ va_list ap; va_start(ap,format); char buffer[512]; len = vsprintf(buffer,format,ap); va_end(ap);
		string 字符串处理 strcat(dst,src) strcpy(dst,src) strstr(src,content) strlen(src) strcmp(src,dst) c_str
		ctime  低精度时间 time_t time(NULL)秒级系统时间 clock_t clock()毫秒级运行时间 tm localtime(time_t t)具体日期 
		chrono 高精度时间 steady_clock::now精度为100ns high_resolution_clock::now()
		stdio  C文件读写 fopen("path","wrab+") fclose(fp) fread(buffer,size,count,fp) fseek(fp,offset,seek_cur) ftell(fp) r模式遇到不可显示字符时读取结束
		fstream C++文件读写 OO方式读写文件
		sstream 字符串读写 istringstream istr(string) istr.clear() istr.c_str() istr >> "string value"
		stl		vector list stack map&multimap set&multiset 增insert 删erase make_pair(key,value)
		algorithm 查找(find、find_if) 删除 remove remove_if 赋值 fill fill_n 替换 replace replace_if 排序 sort 去重 unique
		iterator  迭代器 ::iterator iter = ww.begin() ww.end() cbegin cend rbegin rend
		goto 	函数内跳转
		jmp     非局部跳转
	C++11特性
		构造函数
			删除函数:声明为private或者使用delete关键字 
			强制生成:使用default关键字
			嵌套调用:构造函数可以互相调用,不用再通过额外的函数来提取公共代码
		成员变量
			默认值:声明时可以直接添加默认值,赋值操作会在构造函数之前执行
		成员函数
			显示重载:添加override关键字编译器检查函数签名是否和基类虚函数一致
			禁止重载:添加final关键字禁止虚函数被子类重写
		枚举类型
			C++默认声明的枚举是全局的容易命名冲突,添加class关键字生成强类型枚举
		空指针
			NULL关键字是个值为0的int,在参数为int和ptr的时候产生歧义,用nullptr代替
		类型推断
			auto关键字代替模板类型简化代码(注意不要滥用,用多了会降低代码可读性)
		初始化列表
			以{}作为参数调用类的构造函数,参数类型为std::initializer_list<T>&

C#
	程序域
		AppDomain类记录了当前应用(exe)的所有引用和定义的程序集信息
	程序集
		Assembly类记录了当前程序集(dll)的所有信息,包括包含的模块(封装为Module)、引用和定义的类型信息(封装为Type类)
	类型系统
		Type类包含一个类型的的所有信息,包括BaseType ConstructInfo FieldInfo PropertyInfo MethodInfo ParameterInfo等等,Attribute给类型提供了额外的元数据
  	托管交互
	  	C++导出 windows:extern "C" __cdecl|__declspec(dllexport) other: extern "C"
		C++实现 [MethodImpl(MethodImplOptions.InternalCall), WrapperlessIcall] 标记该方法在C++内实现
		C#导入  DllImport(dllName,EntryPoint,CharSet,CallVersion) static extern
		参数对应 int float bool uint long string对应char* byte[]对应unsigned char*
		数据拷贝 Marshal.Copy(src, start, dst, len);  Marshal.Copy(src, dst, start, len);
		函数指针 MonoPInvokeCallback(typeof(DelegateName))
		引用传递 StructLayout(LayoutKind.Sequential),RequiredByNativeCode
	ref&out
		参数传递默认为值传递(值类型复制一份,引用类型复制引用)
		引用传递传递地址,ref&out不会进行装箱操作

Lua
	常量定义 luaconf.h       平台相关 搜索路径 堆栈大小 
	基础函数定义lua.h        以lua_为前缀,版本、REGISTERINDEX、GLOBALSINDEX、T* lua_Alloc lua_CFunction lua_is* lua_to* lua_push* lua_get* lua_set*
	辅助函数定义luaxlib.h    以luaL_为前缀
	基础库注册定义lualib.h   lua_open基础库相关函数定义,实现在各个库对应的.c内
	库实现
		 以lua_open为前缀,具体实现分散在不同的.cc文件内  
		 lauxlib.c  辅助库实现 luaL_loadfile luaL_loadbuffer luaL_reg/luaL_register luaL_check* luaL_opt* luaL_ref/unref luaL_newstate
		 lbaselib.c base库实现 g/setfenv g/setmetatable x/pcall tonumber/string rawg/set pack/unpack dofile/loadstring
		 liolib.c  io库实现 read write flush close open input output type
		 lmath.c   math库实现 abs ceil floor random randomseed cos sin acos asin tan atan exp log sqrt
		 lstrlib.c string库实现 lower upper len format reverse sub gsub find gmatch byte char dump match rep
		 ltablib.c table库实现 insert concat maxn remove sort
		 loslib.c  os库实现
		 loadlib.c 文件解释入口 require module seeall path cpath loaded preload loaders loadlib seeall
		 ldblib.c  debug库实现 traceback getenv gethook sethook getmetatable
		 linit.c  库注册入口函数整合
	常用API:  
		函数注册luaL_Reg注册函数结构体 luaL_Reg[] = { {"func_name",func},{"func_name1",func1} } luaL_register
		函数调用lua_call(L,narg,nresult) lua_pcall(L,nargs,nresults,err_func)
		table字段获取lua_getfield(L,stackid,k) lua_getmetatable lua_gettable lua_gettop lua_getglobal
		table字段创建lua_newtable lua_newuserdata
		lua_raw/get会在指定位置读取指定key的数据并压入栈顶
		lua_raw/set会移除栈顶数据(value和key),并设置指定table的key对应value
		lua_pop会移除栈顶指定个数的数据
		lua_push复制指定位置并压入栈顶
		lua_to系列不会移除栈数据 lua_toboolean lua_tocfunction lua_tointeger lua_tolstring lua_tonumber lua_tostring
		lua_is系列也不会移除栈数据 lua_isnil lua_isnumber lua_istable lua_isstring
		lua_ref会在注册表创建栈顶对象引用并返回索引 lua_unref解除引用 lua_getref获取引用对象并放到栈顶
	常用库函数
		coroutine 
			协同程序,非抢占式多线程,需要自己主动在不同的协程之间切换,同时只有一个协程在运行
			协程状态
				suspended 挂起状态,创建create或者yield之后处于这个状态
				running 运行状态,resume之后处于这个状态
				dead 死亡状态,没有遇到yield或者yield结束了,表示协程执行结束了
				normal 正常状态,协程套协程,执行到另一个协程去了
			协程操作
				status 获取协程状态
				create 传入一个执行函数,类似于UNITY的StartCoroutine
				resume 协程需要自己主动调用才可以开始或者继续执行
					   yield之后回到了主线程,主线程主动调用进入协程
					   resume可以在第一次启动时传递参数
					   resume可以传递参数作为初始化参数或者yield的返回值
				yield 只会出现在协程函数内部,yield可以传参数作为resume的返回值
				running 当前正在执行的协同程序
	变量定义位置
		全局表	      	LuaState.l_gt
		注册表 	      	LuaState.l_G.l_registry
		环境表          LuaState.env
		基础类型元表    LuaState.l_G.mt
		基础元函数名字 	LuaState.l_G.tmnames
		字符串哈希表    LuaState.l_G.strt
		GC对象          LuaState.gclist
		函数Env         Closure.env
		函数LocVar 		Proto.localvars
		函数UpVar       LClosure.upvals LuaState.openupval upval一定在外层函数的localvars或者upvals中,外层函数的local是通过openupval间接引用的
		package.loaded  LuaState.l_G.l_registry._LOADED require会先到该表查找对应模块是否已加载,加载出来之后有返回值则为返回值,否则为true
		package.loaders LuaState.env
		module          push_module->mod_init->setenv

Python
	基本类型
		string
		tuple
		list   l={} l.append()
		map
	类&函数
		类型信息 type(obj) is class
		类定义   class typename:
		构造函数 def __init__(self):
		成员函数 def funcname():
	函数库
		path
				绝对路径 os.path.abspath()
		dir
				是否为目录 os.path.isdir() 
				目录列表 os.listdir()
				删除空目录 os.rmdir()
				路径是否存在 os.path.exists()
				分解为文件名和路径 os.path.split()
				删除目录 shutil.rmtree()
							shutil copy()文件夹
							shutil copyfile 文件
							shutil move 移动
							shutil remove 删除文件
		file
				打开文件 f = open(path,"rwab+") codecs.open(path,"rwab+","utf-8-sig")
				文件读写 f.readlines() f.readline() f.write(str_obj)
				文件偏移 f.tell() f.seek(cur,off)
				关闭文件 f.close()
		string  
				编码转换 str_obj = unicode_obj.encode("utf-8|gbk") unicode_obj = str_obj.decode("utf-8|gbk") chardet.detect(obj)
				字符截取 str_obj[start:end] 其中start和end为负数表示从后往前,0表示第一个字符,-1表示最后一个字符
				字符拆分 str_obj.split(".")
				字符拼接 str_obj.join(str_obj||list)
		excel	
				导入类库 import xlrd
				打开文件 excel = xlrd.open_workbook(path)
				表格操作 sheet = excel.sheet_byname(name) excel.sheet_names()
				子表操作 rowdata = sheet.row_values(n) ctype = sheet.cell(row,col) value = sheet.cell_value(row,col);
		xml		
				导入类库 import xml.etree.ElementTree as ET
				打开文件 root_node = ET.parse(".xml")
				结点属性 node.attrib node.tag node.text
				结点遍历 for child_node in root_node   
	常用操作
		主动执行 __name__ == "__main__"
		执行路径 os.path.abspath(sys.path[0])
		启动参数 sys.argv
		等待输入 raw_input
		文件编码 #coding:utf-8 import sys reload(sys) sys.setdefaultencoding("utf-8")
		数组遍历 for k in values|range(1,n)
		打印堆栈 traceback.print_exc()
	
OC
	函数库 
		#import <Foundation/Foundation.h>
		日志打印:NSLog
		字符串:NSString
	类声明
		声明类以@interface开头,@end结尾 
		@interface cls : NSObject
		@end
	类实现
		实现类以@implementation开头,以@end结尾
		@implementation cls
		{
			大括号内部是成员变量
		}
		@end
	类函数:
		-(void)name:(bool)param1 paramt:(int)param2;  
		-是成员函数,+是静态函数
		:前面是函数名字和返回值
		[object func:param1 paramt:param2]
	类对象:
		创建
			cls* ptr = [[cls alloc] init];
			类对象创建使用中括号,前面是类名,后面是分配函数,在后面是初始化函数
		释放
			[cls release:1];
			OC不支持垃圾回收,用完需要释放,参数用冒号表示开始

Java:
	JDK分类
		J2ME J2SE J2EE分别是针对移动平台和嵌入式、PC平台、企业版设计的JDK
		JDK是Java开发工具包,包括了专用开发环境JRE、Java编译运行工具
		JRE是Java的公共运行环境,包括了JVM虚拟机和核心类库
	JDK工具
		javac 编译工具,把.java编译为.class字节码
		jar 打包工具,把.class文件打包在一起
		java 运行工具,运行.class后缀的java程序
		javap 反编译
	类库
		java.lang 系统基础库,不引入就可以使用的包
		java.io   IO相关类库
		java.nio  非阻塞IO相关类库
		java.net  网络相关类库
		java.util STL相关类库
		java.sql  数据库操作类库
	包
		package x; 类似命名空间,包名是当前java文件的目录结构
		import x;  导入java类库,类似引用命名空间
	线程
		ASyncTask 包:android.os,使用方式:执行execute或executeOnExecutor

Html:
	版本: <!DOCTYPE HTML>
	头部: <head></head>
		编码: <meta charset="utf-8">
		标题: <title></title>
	内容: <body></body>
		换行: <br/>
		空格: <&nbsp>英文半角空格 <&emsp>中文全角空格
		字体: <font size="6" color="ffffff"></font> <b></b> <i></i> <sub></sub> <sup></sup>
		链接: <a href=url>链接内容描述</a>