模块设计
	1.方便插拔特性
		能够快速屏蔽或者开启该模块的使用,方便快速定位BUG以及性能分析
	2.符合编码规范
		对于设计而言,要考虑后续的维护和交接,方便他人理解自己的设计思路
	3.逻辑表现分离
		逻辑计算和渲染表现分开执行各自的循环,特效音效界面等表现层由自己的MGR来TICK驱动
类的设计
	1.方便重置属性
		能够利用对象池提高对象的重复利用程度,降低运行时内存分配的频率
	2.行为组合模式
		用组合的方式来实现对象的行为,不同对象可以添加不同的组件,同类组件可以继承方式扩展
		组件与组件之间的交互尽量不要直接调用(对于动态语言可以利用类型+名字+多参数列表的方式)
设计模式
	创建型
		单例 工厂 建造
	结构型
		组合 适配 外观 代理
	行为型
		命令 状态 事件 策略 迭代器
行为树
	控制结点 
	    多个后继结点,根据打断方式不同每帧做不同子树或者兄弟树条件计算
	        串行序列(and操作  顺序执行,遇到失败返回失败,全部成功返回成功) 
	        串行选择(or操作 顺序执行,遇到成功返回成功,全部失败返回失败)
	        并行序列(并行and操作 顺序执行,全部成功返回成功,有一个失败返回失败)
	        并行选择(并行or操作 顺序执行,有一个成功返回成功,全部失败返回失败)
	        随机选择(随机执行一颗子树,每颗子树有动态权值作为随机条件)
	装饰结点 
	    一个后继结点
	        取反 控制结果
	        失败 控制结果
	        成功 控制结果
	        重复执行直到返回成功 控制结果
	        重复执行直到返回失败 控制结果
	        重复执行N次 控制结果
	条件结点 
	    叶子结点,执行条件检测
	        收到指定事件
	        其它自定义条件
	        行为结点
	        可以外接子树
	行为结点
	    叶子结点,执行具体的动作,没有行为结点那就是一颗决策树


