WEB服务器
	Apache	处理静态请求,动态请求转发给CGI程序,支持负载均衡、反向代理
	Tomcat  处理静态请求,动态请求转发给CGI程序或者JAVA程序
	Nginx   负载均衡,反向代理 http tcp cgi
		配置文件设置 #注释
			全局配置:
				指定所属用户和用户组 user username groupname;
				工作进程个数	 	worker_processes 8;
				进程PID存放目录	 	pid  logs/nginx.pid;
				日志文件		   error_log logs/error.log level(debug|info|error|warn|notice);
			事件配置:
				event
				{
					接受连接互斥锁		accept_mutex on; 默认打开
					同时处理多个链接	multi_accept on; 默认关闭
					事件驱动模型		use select|epoll|poll;
					工作进程连接上限	worker_connections 1024; 默认不超过ulimit -n即单个进程可以打开的描述符个数
				}
			服务配置:
				http {} http负载均衡
					server {}
						listen 443 ssl; HTTPS服务器支持,需要配置ssl证书
						return 301 https://url 重定向http到https
				stream {} TCP/UDP负载均衡
					upstream app {} 上游服务器,具体的应用服务器
						hash $remote_addr consistent; 主要用于缓存服务,同一个客户端的请求转向同一个缓存服务,提高缓存命中率
						server IP:PORT weight=1 max_fails=1 fail_timeout=5s; N秒内失败N次则标记为不可用,N秒后再次检测
					server {} 代理服务器,worker进程
						listen PORT;	监听端口
						proxy_pass app; 代理哪个上游服务
						proxy_connect_timeout 1s;与上游服务器连接超时时间
						send_timeout 1s; 发送超时时间
						proxy_read_timeout 1s;从上游服务器接收数据超时时间
						proxy_send_timeout 1s;向上游服务器发送数据超时时间
						location / { proxy_pass https://app.com }
HTTP协议	
		请求报文
			请求行 METHOD URI HTTP/VERSION
				GET:请求参数附加到URL后面(url?arg1=val1&arg2=val2),没有请求体
				POST:请求参数附加到请求体内,不能收藏为书签,也不会出现在历史记录
				HEAD:与GET方法相同,但是响应报文只返回头部
				HTTP版本:1.1支持range分块请求,connection用同一条TCP传递多次请求
				HTTPS:运行在SSL之上,SSL用来做加密解密操作,更加安全,SSL证书收费
					  服务器会先返回SSL证书,包含公钥以及颁发机构信息
					  客户端会根据本地系统信任的证书做检查,没有给出提示
					  客户端用公钥加密传递对称秘钥和加密算法类型
					  using namespace System.Net;
					  ServicePointManager.ServerCertificateValidationCallback
			请求头 请求参数信息,自定义信息在请求体内,请求头提供一些配置信息
				user-agent:浏览器和系统信息
				accept:客户端支持的内容类型
				language:客户端支持的语言
				encoding:客户端支持的编码
				connection:返回响应报文之后连接是否断开
				host:请求地址,也就是域名
				cookie:响应报文返回的缓存信息,用来记录状态,HTTP是无状态协议
				content-type:请求体信息,表示请求体是什么文件类型
				content-length:请求体长度
			空行
			请求体 请求参数信息k1=v1&k2=v2
				WWWForm是指某个特定的Content-Type:application/x-www-form-urlencoded
		响应报文
			状态行 HTTP/VERSION STATUS_CODE STATUS_DES
				1XX: 2XX:请求成功 3XX:重定向 4XX:客户端错误 5XX:服务端错误
				400:语法错误 403:禁止访问 404:地址不存在 503:服务器不可用
			响应头 响应结果信息,响应头包含一些通用信息
				server:处理该请求的服务器软件信息,nginx、apache
				set-cookie:设置缓存数据
				content-type:返回内容类型
			空行
			响应体
TCP/IP协议栈
		应用层,自定义消息,序列化为字节数据,发给传输层,这一层是用户控制的,跟具体应用关系密切
		传输层,TCP UDP
		        把下层消息传递到上层进程
			    把上层进程的消息加入端口号后传给网络层
			    传递之前会有分组和合并的操作,确保消息完整
			    TCP流量控制  
			       TCP有一个接收缓冲区和发送缓冲区,三次握手时会通知其大小
				   TCP不能发送超出该缓冲的数据,缓冲区满了以后会返回给发送方一个WINDOW大小,代表可以接收的数据大小
				   TCP发送数据时,一次能够发送的数据有限
			    TCP超时重传 
			   	   socket发送数据后,收到接收方反馈确认数据被接收,否则超过一定时间重新发送,被接收之前数据会一直存放在缓冲区内
			       心跳包,定时发送心跳数据包,用来确定连接是否断开				   
		网络层,IP ARP&RARP
			    网络号: A类0-127 0三字节主机号 B类128-191 10两字节主机号 C类192-223 110一字节主机号
			    主机号: 0是网络地址 255是广播地址
			    子网:   子网掩码用于计算两个IP地址是否属于同一个网络,IP地址与子网掩码做and运算,得出网络号
			    首先获取目标主机的MAC地址
			   		计算源IP与目的IP的网络号
					相同则发送ARP请求包给子网内所有主机,目的IP主机收到后反馈RAP附带MAC地址
			   		不相同则发送ARP请求给网关,网关反馈RAP附带MAC
				然后给该MAC地址发送IP数据包
					相同网络号发送数据到子网内所有主机,MAC一致的主机接收IP包
					不同网络号发送数据到网关,网关收到后发给路由器,路由器经过路由选择算法一跳一跳的到达目标网络主机
				内外网访问
			   		提供服务的主机必须拥有公网IP才可以被访问			 
			    	内网机器需要设置路由端口映射,把对外网IP某个端口映射到本地主机的进程	                                  
		接口层
TCP流程
	三次握手  
		1.client  发送syn请求,进入SYN_SENT状态
		  server  收到syn请求,进入SYN_RCVD状态
		2.server  发送syn+ack
		  client  收到syn+ack,进入establistened
		3.client  发送ack确认
		  server  收到ack确认,进入establistened
	四次挥手
	  	1.client  发送fin请求,进入FIN_WAIT_1
		  server  收到fin请求,进入CLOSE_WAIT
		2.server  发送ack确认
		  client  收到ack确认,进入FIN_WAIT_2
	  	3.server  发送fin请求,进入LAST_ACK
	  	  client  返回ack确认,进入TIME_WAIT,等待2MSL之后进入CLOSED,2MSL是报文最大生存时间
		4.server  收到ack确认,进入CLOSED
	收包发包
		丢包 发送速度太快、缓存溢出、带宽太小
		seq是当前数据包的编号,下一个数据包的编号是seq+data_len,也就是发送端的seq号是按照发送字节排序的
		ack是对发送端seq的回应,其数值等于要回应的数据包编号+要回应的数据包长度
		win是发送端剩余可接收数据的大小
	流量控制
		seq和ack报文中包含了SOCKET的剩余接收缓冲区大小
IO模型
	内存空间: 操作系统的内存都属于内核空间,应用进程的内存都属于用户空间,硬盘数据或者网络数据读写都要先经过内核空间
	数据读写: 读:先从硬盘或者网卡拷贝到内核空间,然后从内核空间拷贝到用户空间 写:先从用户空间到内核空间,然后从内核空间到硬盘或者网卡
	阻塞:	  用户空间到内核空间的数据读写是阻塞的,内核空间到硬盘或网卡的数据读写是阻塞的
	非阻塞:   内核从硬盘或网卡读写数据时会返回错误码,用户空间与内核空间的数据读写是阻塞的
	异步:     读数据时异步操作结束后数据已经在内存空间了,整个过程都是非阻塞的
	多路复用: 把io封装到select epoll等函数内,把感兴趣的io加到列表内
网络通信
		sys/socket arpa/inet netinet/in
		winsock2 comment(lib,"ws2_2.lib")
		INVALID_SOCKET SOCKET_ERROR INADDR_ANY
		创建连接
				int sock = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
				地址
					sockaddr_in addr;
					addr.sin_family = AF_INET;
					addr.sin_addr.s_addr = inet_addr(host); ntoa(); htonl();
					addr.sin_port = htons(port); ntohs();
				连接						
					connect(sock,(sockaddr*)&addr,sizeof(sockaddr));
				监听
					bind(sock,(sockaddr*)&addr,sizeof(sockaddr));
					listen(sock,5);
		接受连接
				accept阻塞模式下没有连接到来时会进入挂起状态
				clientsock->id = accept(sock,(sockaddr*)&clientsock->addr,&size);
				clientsock->port = ntohs(clientsock->addr.sin_port);
				strncpy(clientsock->host,inet_ntoa(clientsock->addr.sin_addr),SIZE);
		收发数据
				send(sock,buff,size,0);
				recv(sock,buff,size,0);
				sendto(sock,buff,size,0,(sockaddr*)&addr,sizeof(addr));
				recvfrom(sock,buff,size,0,(sockaddr*)&addr,sizeof(addr));
		断开连接
				closesocket(sock);
		连接状态
				SOCKET收发缓冲区
					g/setsockopt(sock,SOL_SOCKET,SO_RCVBUF,&size,sizeof(UINT))   设置接收缓冲区大小
					g/setsockopt(sock,SOL_SOCKET,SO_SNDBUF,&size,sizeof(UINT))   设置发送缓冲区大小
					g/setsockopt(sock,SOL_SOCKET,SO_RCVTIMEO,&timeout,sizeof(INT)) 设置接收超时时间
			   	SOCKET阻塞非阻塞
					ioctlsocket(sock,FIONBIO,0)
					fcntl(sock,F_GETFL,O_NONBLOCK)
			   	SOCKET关闭行为
					linger l; l.l_onoff = 1; l.l_linger = 0;
					g/setsockopt(sock,SOL_SOCKET,SO_LINGER,&L,sizeof(linger)) 设置关闭时是否发送缓冲区数据和超时时间
					g/setsockopt(sock,SOL_SOCKET,SO_REUSEADDR,1,sizeof(INT))  保证端口被释放后立即可用
			   	SOCKET保持存活
					SO_KEEPALIVE:一定时间内C/S端没有数据交换,会发送探测分节
					ECONNRESET:对端崩溃or重启 ETIMEOUT:网络不通
				TCP_NODELAY
					开启之后TCP不会把数据写入发送缓冲区
		多路复用
				select FD_SETSIZE是单线程最大连接数
					//创建轮询数组
					fd_set; FD_ZERO(&fds); FD_SET(fd,&fds); FD_CLR(fd,&fds);
					//阻塞等待数据
					select(max_fd_no + 1,&read_fds,&write_fds,&exception_fds,&timeout);
					//遍历检查FD_ISSET(fd,&fds); 
					空闲FD比较多的时候遍历消耗,尤其是有上千个FD的时候
				epoll ulimit -n是最大描述符个数
					创建epoll文件 
								int ed = epoll_create(size);
					添加事件监听 
								epoll_event event; 
								event.events = EPOLLIN | EPOLLET; 读和边缘触发
								event.data.fd = fd;
								epoll_ctl(ed,EPOLL_CTL_ADD,fd,event); 
								事件可以是EPOLL_CTL_ADD添加 EPOLL_CTL_MOD修改 EPOLL_CTL_DEL删除
								ET模式只有状态发生变化才有通知,数据未读完不会有通知
								LT模式只要有数据就一直有通知
					等待事件发生
								epoll_event events[size];
								epoll_wait(ed,events,max_events,timeout);
		半开连接
				网线断开、电源断电、进程崩溃等异常情况下,select和epoll收不到断开或错误事件
				这种情况下服务器连接会被一直占用,可以通过心跳检测来处理
		HTTP KEEP-ALIVE
				HTTP建立TCP连接之后不会立即断开,而是通过TCP-KEEP-ALIVE机制保持一段时间
网络同步
	帧同步
		服务器固定间隔统计客户端输入,转发给客户端,客户端以固定的逻辑帧执行指令,逻辑和表现分离
		优点
			流量小,开发方便,打击反馈及时,耗电量低
		缺点
			对网络要求高,断线重连需要追帧,反外挂能力差
			对一致性要求高,需要处理浮点和随机还有容器访问顺序等等
	状态同步
		角色属性、逻辑状态都交给服务器计算然后同步给客户端
		优点
			客户端计算量小,反外挂能力强
		缺点
			流量大,网络延迟高时打击反馈滞后