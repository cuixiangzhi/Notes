Albedo
    固有色贴图,一定没有光照和阴影的颜色信息,只包含物体本身的颜色
    对于金属部分Albedo表示反射率,对于非金属表示BaseColor,可以带轻微的AO效果
    非金属暗色值不低于30sRGB,最好高于50sRGB
    金属亮色值不高于240sRGB,最好在180-255之间
    金属存在污垢或者氧化物或者低于235sRGB时,Albedo区域需要调整对应的反射率
Metalness
    金属度单通道贴图,一定是接近黑白图的,一个金属材质的金属度一定是接近1的,非金属一定是接近0的
Smoothness
    光滑度单通道贴图,用来计算BRDF中的DFG
AmbientOcclusion
    环境光遮挡贴图,用于计算表面接收到的光的遮挡情况,和阴影以及衰减共同影响光的强度
NormalMap
    原理
        T:切线 B:副切线 N:法线
        1.光照计算时需要用法线来体现出物体表面的凹凸感
        2.通过一张纹理来存储每个像素点的法线来减少面数增加凹凸细节
        3.法线贴图存储的法线是切线空间下的一个向量,以TBN表示
            施密特正交化 normalize(T - dot(T, N) * N)
            1.先把光线和视线从世界空间变化到模型坐标系下
            2.根据模型局部法线和切线计算TBN矩阵
            3.把模型坐标下的光线和视线变换到切线空间
            4.TBN矩阵是行优先填充的,TBN*向量是局部坐标系变换到TBN坐标系
        4.法线贴图存储的RGB范围是[0,1],而法线范围是[-1,1],因此存储法线和解析法线需要一个转换公式 
          rgb=normal*0.5+0.5 normal=rgb*2-1 法线贴图法线不会偏移Z轴太远,因此法线贴图都是偏蓝色的
          对应CGINC内的UnpackNormal函数
ParallaxMap
    原理
        1.法线贴图只是通过修改像素的法线方向来调整表面的明暗效果,做出一种假的凹凸感,没有遮挡关系
        2.假设观察物体表面的视点是e,表面落点是b,因为表面是凹凸不平的,因此真正的落点不是点b,而是与凸起的表面交点a
        也就是b点的光照计算应该用a点处的法线和颜色等等光照参数
        3.b点到a点的delta偏移量不是固定值,无法精确计算
        4.一种近似计算是把高度分成N层,同时把视线向量分割成了N段,交点a一般位于其中一段之间,层数越多越精细,采样次数也越多
        5.最简单的计算是假设ba向量长度等于b点的高度,在切线空间下计算a点uv偏移
CubeMap
    通过摄像机拍摄六个方向的观察结果得出由六个面组成的立方体纹理
    纹理映射
        1.根据方向向量得出最大维度所在方向的纹理
        2.其它两个维度除以最大维度,缩放到[-1,1]
        3.通过2n+0.5把纹理坐标映射到[0,1]之内
        4.RenderToCubeMap会使用摄像机的位置和远裁面等渲染CubeMap
    反射折射
        1.texCUBE(reflect(-v,n))
        2.texCUBE(refract(-v,n,ratio))
    BoxProjection
        1.CubeMap采样的uvw向量是从CUBE中心点指向采样点的
        2.视线向量需要经过计算转换为正确的uvw向量(向量与aabb碰撞检测)
        3.根据v+t*d=边界计算射线与AABB交点,根据交点和CUBE中心点计算uvw 
RenderTexture
    渲染纹理,包含一个ColorBuffer和一个DepthBuffer,DepthBuffer包含16位depth和8位stencil
ProcedureTexture
    程序纹理,使用数学公式定义的纹理,不占内存但是需要大量计算
LightMap
    光照贴图,存储了针对静态物体的间接光照信息,利用光线追踪算法使用HDRCudeMap作为光源生成
纹理采样
    概念
        采样点:渲染目标光栅化之后的像素点
        原始信号:渲染所目标使用的纹理
    最近点 
        采样1次,例如纹理坐标映射后为(89.6,70.4),那么直接取(89,70)
    双线性 
        采样4次,例如纹理坐标映射后为(89.6,70.4),那么先获取(89,70)、(90,70)、(89,71)、(90、71)四个像素的值之后按比例进行线性插值
    三线性
        采样8次,分别在两个mipmap下执行双线性采样,然后再对mipmap做加权平均,mipmap是按照pixel的属性变化率来计算的
    各向异性
        线性采样只考虑了表面平行于屏幕,此时uv两个方向的纹素比例是一致的,当表面有一定倾斜角度时,uv比例发生变化
        AF是按照uv比例在两个方向采样不同的次数进行加权平均,4x采样32次,16x采样128次
        AF是在三线性的基础上进行采样的,因此在mipmap变化的地方比三线性更清晰
纹理压缩
    文件存储压缩格式
        基于整幅图片进行压缩,不支持分块解压,无法利用GPU并行功能
        psd tga bmp png jpg gif
    内存存储压缩格式
        DXT
            把整张纹理分成4*4的小块,每个块保留两个16位的颜色,16个像素通过公式差值得出原始的颜色,每个块需要64位
            DXT算法对每个4*4block进行压缩,只保留两个颜色,其他颜色值这两个颜色之间的插值
            DXT1压缩比为0.3 DXT5压缩比为0.6
        ETC
            安卓常用压缩算法,ETC1不支持ALPHA通道,4*4块压缩
            ETC2RGBA压缩比为1:4,ETC2RGB压缩比为1:8,GLES3.0支持
        PVR
            IOS常用压缩算法,压缩分块时会考虑部分块之间的关联性
            PVRTC2是8*4压缩,压缩比为1:8
            PVRTC4是4*4压缩,压缩比为1:4
        ASTC
            IOS6以后支持的压缩算法,不需要POT支持,压缩质量比PVRTC更高
            ASTC压缩比为4x4=1:4 5x5=1:6.25 6x6=1:9 8x8=1:16 10x10=1:24.97 12x12=1:35.93