PlanarShadow
    原理:地面是一个平面(高度为d),通过计算投影矩阵把投影物体的顶点变换到平面上渲染阴影(多一个批次渲染)
    计算:
        假设地面法向量为n,顶点为v,光源方向为l,投影点为p=v-[dot(n,v)-d]/[n*l]*l,其中dot(n,v)-d等于v到平面的距离
        1.先渲染地面
            正常渲染并且开启Stencil,避免阴影渲染到非地面上
        2.渲染物体阴影
            CullBack
            Zwrite Off
            ColorMask RGB
            Blend SrcAlpha OneMinusSrcAlpha
            Stencil { Ref 0, ReadMask 255, WriteMask 255, Comp Equal, Pass Invert, Fail Keep, ZFail Keep }
            顶点shader
                根据投影矩阵计算得出顶点位置
                float3 v = (_Object2World * v.vertex).xyz
                float3 p = (v - [dot(_ShadowPlane.xyz,v)-_ShadowPlane.w] / [dot(_ShadowPlane.xyz,_ShadowDir.xyz)] * _ShadowDir.xyz)
                o.worldPos = worldPos.xyz
                o.projPos = p;
                o.clipPos = unity_MatrixVP * float4(p,1.0);
            像素shader
                根据距离物体原点的距离来做阴影渐变
                o.color.xyz = fixed3(0,0,0);
                o.color.w = pow(1-clamp(sqrt(dot(p2o,p2o)*_ShadowInvLen)-_ShadowFade.x,0,1),_ShadowFade.y) * _ShadowFade.z
ShadowMap
    Hard&SoftShadows
        本影区属于硬阴影,常规SM只能模拟硬阴影
        半影区属于软阴影,通过PCF等过滤操作实现假的软阴影
    ShadowAcne
        阴影图分辨率不够,导致与光源方向角度很小时产生条纹状的自阴影现象
        shadow bias
            计算光源空间深度图时统一离光源远一点,减弱光源空间下倾斜物体的自阴影现象
            bias = max(factor * (1 - dot(normal,light)),constant) 微调factor和constant
        normal bias
            离光源的真实距离变大之后,会导致本来是阴影的地方变亮,物体与地面交接的地方悬空
            计算光源空间深度图时统一把模型沿法线方向稍微缩小,减弱悬空现象
    LightSpaceShadowMap
        1.以实时灯光位置作为视点,对不透明投影物体渲染一张深度纹理
            生成过程(走一遍渲染管线生成深度图)
        2.接受阴影的物体从模型空间转换到灯光空间,和深度图作比较,大于深度图中的深度则为阴影
            计算过程(变换到灯光空间下采样深度图比较远近)
    CascadeShadowMap
        原理:阴影深度图分辨率固定的情况下,可视范围越大近处的物体所占像素越少,精度越低
        实现:把摄像机的视椎体分成N个部分,每个部分单独占用一张阴影深度图
        计算:
            计算灯光摄像机的视椎体参数
                视锥SIZE取决于VIEW.AABB在LightSpace下的XY大小,视锥远近平面位置取决于SCENE.AABB在LightSpace下的Z值范围
                var sceneBound = CalculSceneBoundsInLightSpace()
                var viewBound = CalculViewBoundsInLightSpace()
                camera.localPosition = Vector3(viewBound.center.x,viewBound.center.y,0)
                camera.orthographicSize = math.max(viewBound.size.x * 0.5f,viewBound.size.y * 0.5f)
                camera.nearPlane = sceneBound.zmin
                camera.farPlane = sceneBound.zmax
            计算CSM级别划分和视锥参数
                用户自定义把摄像机远近平面构成的可视范围划分成N份
    ScreenSpaceShadowMap
        1.首先在当前摄像机处创建相机渲染一张深度图_CameraDepthTexture
        2.然后在灯光位置创建相机渲染一张深度图_LightDepthTexture
        3.对屏幕进行一次后处理操作,输入两张深度图,输出_ShadowMapTexture
            顶点shader直接转存uv坐标
                o.uv = v.uv
            像素shader计算屏幕空间阴影图
                屏幕坐标系->摄像机坐标系
                float3 vpos = computeCameraSpacePosFromDepth
                摄像机坐标系->世界坐标系
                float4 worldPos = mul(unity_CameraToWorld,vpos)
                世界坐标系->灯光坐标系
                float4 lightPos = mul(unity_WorldToLightProj,worldPos)
        4.正常渲染物体
            像素shader使用屏幕坐标采样_ShadowMapTexture
    PCF
        1.均值滤波
            原理:使用方框滤波的采样点计算阴影强度
            缺点:半影区的大小都是一样的,半影区锯齿感比较严重
        2.泊松分布
            原理:使用符合泊松分布的采样点计算阴影强度
            缺点:半影区的大小都是一样的(使用随机样本可以减弱这种现象,但是会产生明显的噪点),锯齿感很弱,采样次数更多
        3.PCSS
            原理:遮挡物距离光源越近,半影区越大,采样宽度也就越大 
            缺点:半影区随机性好,但是需要对比较大的区域进行采样,而且遮挡物边缘有重叠时计算不准确
ShadowVolume
    原理:物体背光面会形成一个阴影空间,在阴影空间内的物体都是有阴影的,需要额外算法生成软阴影
    实现:渲染深度图->生成阴影体->渲染阴影体(模板值1表示阴影)
    计算:
        计算阴影体
            根据邻接面法线和光线点乘数值符号不相等来找出投影物体的边缘
            投影物体边缘点沿着光线方向延伸找出交点,这些点组成一个封闭阴影体
            需要三角面邻接面信息(数据量增大),阴影体不需要每帧生成(除非光源发生变化)
        渲染阴影体(ZFail算法)
            渲染正面
                ZTest失败(没有阴影,模板值减1抵消背面的加1)则StencilValue-1,否则不执行任何操作
            渲染反面
                ZTest失败(可能有阴影,模板值加1)则StencilVlaue+1,否则不执行任何操作