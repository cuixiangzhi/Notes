PlayerRender
    BeginFrame
    RenderAllCameras
        Camera.Render
    EndFrame
    WaitForPresent
Camera.Cull
    根据摄像机的cullingMask和viewBounds进行裁剪,得到可见列表
RenderManager.SetCurrentCamera
    设置当前摄像机,记录上一帧位置,计算镜头移动速度向量
Camera.UpdateDepthTextures
    检查是否开启了深度图模式,不开启则跳过该步骤
    检查软粒子是否开启,SOFTPARTICLES_ON宏会影响深度计算
    检查摄像机视口范围是否有效,无效则跳过该步骤
    Camera.RenderDepthTexture
        RT创建
            深度图和深度法线图是两个不同的RenderTexture
            深度图是16位深度+单通道,深度法线图是16位深度+四通道
            每帧都会通过RTBuffer申请和释放TempBuffer
        RT渲染
            RT.SetActive()  && GL.Clear(color+depth+stencil)
            Camera.SetupRender
                设置全局变量CameraPos、CameraToWorld、WorldToCamera、DeltaTime、ZbufferParams、ProjectParams、ColorSpace等等
            Camera.RenderSceneShaderReplacement 
                遍历可见结点,遍历子材质
                    创建RenderObjectData,加入RenderObjects数组
                对RenderObjects按照一定规则排序
                    layer->order->subshaderIndex->distance
                遍历RenderObjects数组,针对每个对象和当前shader的ShadowCasterPass(深度法线图使用的是内置的Shader,Replace渲染)
                    设置Shader数据,主要是变换矩阵以及Shader内包含的RenderState
                    调用Renderer组件的Render函数,先获取到有效的VBO,然后设置Camera全局变量,最后调用DrawElements
            ShaderLab.SetTexture(key,value) 
                把渲染结果设置到全局shader变量
        RT升级
            5.x之前DepthTexture和DepthNormalTexture使用Replace方式用InternalShader来渲染,没有批处理
            5.x之后DepthTexture会使用LightMode为ShadowCaster的Pass来渲染
            5.x之后DepthNormalTexture貌似仍然使用Replace方式渲染
Camera.SetupRender
    设置渲染目标
        后期目标RT设置,HDR、ColorSpace、AntiAliasing等会影响RT的格式(FP16|R11G11B10 SRGB)
        渲染目标RT合并,渲染到RT或者清屏渲染不需要处理之前的渲染结果,修改当前RT(指向第一张后期RT或者当前摄像机的RT)
        渲染目标设置,glBindFramebuffer->glFramebufferTexture2D||glFramebufferRenderbuffer
        渲染视口设置,glViewport
    设置CameraPos、CameraToWorld、WorldToCamera、DeltaTime、ZbufferParams、ProjectParams、ColorSpace等等
Camera.DoRender
    RenderLoop.PrepareFrame
        RenderContext全局环境变量设置,包括各种矩阵、对象数组、排序方式等等
    RenderLoop.TraverseNode
        针对可见结点的所有子材质创建渲染对象,根据queueIndex加入到对应的不透明和半透明数组内
        material       当前子材质球
        matIndex       当前子材质球的数组下标,一般为0
        shader         当前子材质球所使用的着色器
        layerData      渲染队列order和layer打包在一起
        queueIndex     渲染队列,如果材质上没有自定义则获取shader的默认值
        lightmapIndex  当前MESH所使用的lightmapIndex
        batchIndex     当前MESH所在的BatchMesh的InstanceID,静态合批的MESH有自己单独的triangles,共享BatchMesh的顶点数据
        distanceSort   根据摄像机和物体的AABB中心点的距离,正交摄像机算的是Z值,透视摄像机算的是到摄像机距离
        distanceView   Z值距离
        nodeData
    RenderLoop.RenderOpaque
        ForwardRenderLoop.TraverseObject
            查找每个Object的Light信息
            把接收阴影并且位于ShadowDistance之内的物体加入Receiver数组内
        ForwardRenderLoop.TraversePass
            创建RenderPassData并加入Pass数组内
        ForwardRenderLoop.SortPass
            Unity4.7版本排序规则
            layer->order->queue->firstpass->lightmapIndex->staticBatchIndex->matIndex->shader->material->passIndex->distance->objectIndex
            Unity2018.4排序规则,优先按照distance来排序可以利用Early-Z优化
            layer->order->queue->firstpass->distanceBucket->staticBatchIndex->lightmapIndex->shader->material->passIndex->objectIndex
        ForwardRenderLoop.PerformRendering
            先渲染ShadowMap
            ForwardRenderLoop.RenderShadowMap
                FindCasters->SortCasters->RenderCasters->ApplyPass->ApplyProperties->BatchRender.AddOrFlush
            再渲染Object
            ForwardRenderLoop.RenderPasses
                ApplyMaterialProperties->ApplyPassProperties->BatchRender.AddOrFlush
    RenderLoop.RenderSkybox
    RenderLoop.RenderImageFilter
    RenderLoop.RenderTransparent
BatchRender.Flush
    静态批处理
    StaticBatch.BeginStaticBatch->StaticBatch->EndStaticBatch->BindBuffer->DrawElements
    FrameStats.Batches++ BatchedCalls+N
    动态批处理
    DynamicBatch.BeginDynamicBatch->DynamicBatch->EndDynamicBatch->BindBuffer->DrawElements
    FrameStats.Batches++ BatchedCalls+N