光照方程
    经验模型
        Phong
            I = 环境光 + 漫反射光 + 高光
            I = KaIa + KdId*dot(n,l) + KsIs*pow(max(0,dot(r,v)),α)
            K是反射系数,I是光照强度,n是法线方向,l是入射方向,v是视线方向,r是反射方向 α是表面粗糙度,α越小越粗糙
        BlinnPhone
            Phone模型在反射方向和观察方向夹角超过90度,也就是观察方向趋向平行表面时,Phong会发生突变,BlinnPhong更接近真实情况
            pow(dot(n,h),α),h是l和v的半角向量,v在趋向于平行表面过程中h与n的夹角始终在90度之内,也就是边缘有一个渐变过程
    物理模型
	    BRDF:
            https://zhuanlan.zhihu.com/p/21376124
            https://chengkehan.github.io/PunctualLightSource.html
            https://www.cnblogs.com/luxishi/p/6409716.html
            http://www.voidcn.com/article/p-uamrlclq-brb.html
        	通用公式
        		Lo(r)=∫*f(l,v)*Li(l)*dot(n,l)*dwi
            f(l,v)分为diffuse和specular两部分,采用不同的公式
                LambertDiffuse
                    fd=albedo/π * dot(n,l)
                DisneyDiffuse 
                    fd=albedo/π * (1+(Fd-1)(1-dot(n,l))⁵*(1+(Fd-1)(1-dot(n,v))⁵)) Fd=0.5+2m(n,l)²
                CookTorranceBRDF
                    fs=DFG/[4*dot(n,l)*dot(n,v)]
                    D是法线分布函数 F是菲涅尔反射量 G是遮挡比例函数
                    UnrealEngine4中使用的DFG函数分别是
                        Trowbridge-Reitz GGX  D=m²/π*[dot(n,h)²*(m²-1)+1]² m是粗糙度 h是半角向量                    
                        Fresnel-Schlick       F=F0+(1-F0)(1-dot(n,v))⁵ F0=mix(F0,albedo,metalness) 非金属F0值一般在0.17以下,金属一般在0.5-1.0之间
                        Smith's Schlick-GGX   Gs=dot(n,v)/[dot(n,v)(1-k)+k] G=Gs(n,v,k)Gs(n,l,k) m是粗糙度 k=(m+1)²/8
                    Unity使用的DFG函数与UnrealEngine一致
            最终结果
                漫反射系数 * (GI.diffuse + Fd(L,V) * 光源颜色) + 镜面反射系数 * Fs(L,V) * 光源颜色 + 间接光高光系数 * GI.specular * Fresnel
                其中
                    漫反射系数 
                        diffColor = albedo * (1 - metallic) * Ka,非金属接近albedo,金属接近0,Ka是因为没有绝对的纯金属
                    镜面反射系数 
                        specColor = lerp(Krgb,albedo,metallic) 非金属接近Krgb,金属接近albedo
                    间接光高光系数
                        surfaceReduction = 1 / (m^2+1)
                    全局光照GI
                注意
                    固有色贴图
                        一定没有光照和阴影的颜色信息,只包含物体本身的颜色
                    金属度贴图
                        一定是接近黑白图的,一个金属材质的金属度一定是接近1的,非金属一定是接近0的
                    法线贴图
                        一定是偏蓝色的,存储了切线空间的法线信息
光照模式
    Realtime
        对动态物体提供直接光和阴影(ShadowMap)
        RealTimeGI勾选之后对动态和静态物体提供间接光(GI)和阴影(ShadowMap)
        Indirect Multiplier设置为0会关闭GI计算
    Mixed
        BakeIndirect:对静态物体烘焙间接光,直接光和阴影都实时计算
        ShadowMask:烘焙间接光,
      Baked

     混合模式          动态对象                静态对象
                    直接光    间接光       直接光    间接光
    BakeIndirect   Realtime  LightProbe   Realtime   LightMap 
    ShadowMask     Realtime  LightProbe   Realtime   LightMap
    Subtractive    Realtime  LightProbe   LightMap   LightMap
渲染路径
	Vertex
		支持8个点光源,按照亮度排序,位置颜色信息存储在指定数组内
		MESH->VS(光照计算)->FS->FRAME_BUFFER
	Forward
		根据配置的逐像素光源个数,提取最亮的几个光源计算光照,其余的光源都以球谐函数
		MESH->VS->FS(光照计算)->FRAME_BUFFER
		ForwardBase: 
			#pragma multi_compile_fwdbase
			计算自发光、环境光、主平行光、逐顶点光、SH光、光照贴图、阴影
			Unity中设置为NotImporant的光会被按照逐顶点或者SH处理
			逐顶点光照计算 Shade4PointLights(...) unity_4LightPosXYZColorAtten
			球谐光照计算 
		ForwardAdd:  
			Blend One One 
			#pragma multi_compile_fwdadd
			计算额外的逐像素光源,AddPASS会根据照亮该物体的光源数量被执行多次
			照亮每个物体的逐像素光源个数有限制,Unity会根据光源的类型及对物体的影响程度(距离、强度、类型等)进行排序
			_LightColor0和_WorldSpaceLightPos0存储当前逐像素光源的颜色和位置
		光源信息
			Unity会根据当前光源类型为PASS的执行设置对应的光源属性 位置、颜色、衰减纹理、变换矩阵
			获取光的方向 
				UnityWorldSpaceLightDir(i.worldPos)
			获取光的颜色 
				_LightColor0
			获取光的衰减 
				平行光为 atten=1
				其它类型 
						lightSpacePos=mul(_LightMatrix0,i.worldPos).xyz	
						attenUV=dot(lightSpacePos,lightSpacePos).xx
						atten=tex2D(_LightTexture0,attenUV).UNITY_ATTEN_CHANNEL;
				直接获取 
						UNITY_LIGHT_ATTENUATION(atten,i,i.worldPos)
	Deferred
		第一次渲染
			不计算光照信息,只进行深度测试,光照相关数据写入G-BUFFER(坐标、法线、UV、反射系数等等)
		第二次渲染
			遍历屏幕像素,针对有效的像素点读取G-BUFFER数据进行光照计算,更新颜色缓冲区
			Unity默认使用Standard光照模型来计算,Internal-DeferrredShading.shader
		计算流程
			MESH->VS->FS(无光)->MRT(深度、法线、颜色三个BUFFER存储光照所需信息)->FRAME_BUFFER
		GBuffer信息
			RT0,存储漫反射颜色,A通道未使用
			RT1,存储高光反射颜色,A通道存储高光指数
			RT2,存储法线方向,A通道未使用
			RT3,存储自发光+光照贴图+反射探针
	ShadowCaster
		渲染阴影映射纹理时调用该shader,没有会调用Fallback的对应shader,否则不产生阴影