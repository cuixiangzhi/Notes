图形学
	图形 线框图 真实感图形 图像 图形方程 几何属性 非几何属性
	渲染流水线
		主循环->逻辑循环->renderOneFrame->renderTarget(window|texture)->camera->scene->renderqueue->不透明物体(VBO/VAO/EBO)->半透明物体(VBO/VAO/EBO)
		顶点着色器(MVP变换)->细分曲面着色器->几何着色器->图元装配->裁剪->透视除法->视口变换->光栅化
		片段着色器->像素归属测试->裁剪测试->Alpha测试->深度测试->模板测试->颜色混合
	渲染指令调用顺序
		应用程序->操作系统->驱动程序->显卡
	渲染顺序
		不透明物体从前往后渲染,利用EarlyZ技术减少OverDraw的像素shader计算
		半透明物体从后向前渲染,半透明物体不写入深度,执行AlphaBlend操作,EZ在这里也可以用
		AlphaTest无法使用EZ技术,AlphaTest在像素shader之后进行,Z-PRE-PASS不能写深度,因为此时不确定这个像素会不会被剔除掉
	多线程渲染
		逻辑线程和渲染线程分离,采样CommandBuffer队列
		逻辑线程更新帧N,渲染线程渲染帧N-1,逻辑帧N结束后等待渲染帧结束再开始下一帧计算
		使用环形BUFFER产生和消耗渲染命令
	渲染管线
		ForwardShading前向渲染
			DepthTexture->DepthNormalTexture->OpaqueObjects->OpaqueImageEffects->SkyBox->Transparent->ImageEffects
		DeferredShading延迟渲染
			G-Buffer->Lighting->OpaqueImageEffects->SkyBox->Transparent->ImageEffects
	渲染批次
		批次计算公式NVIDIA
			25K*GHz*Percentage/Framerate
硬件
	概念
		显卡即显示适配器是一个硬件,显示芯片即GPU是一个芯片
		显示芯片是安装在显卡上的,显卡用来接收数字信号,显示芯片则负责将数字信号转化为图形信号,并由显卡输出到显示器上
		CPU->GPU->显存->RAMDAC->Display 
	显卡分类
		独立显卡 集成显卡 核心显卡
	显卡型号
		ADM RadeOn HD 美国AMD
		NVIDA Geforce GTX 美国英伟达
		POWERVRSGX 英国Imagination
		MAIL 英国ARM
		Andreno 美国高通
	显示器接口
		VGA接口输入是模拟信号,通过显卡的RAMDAC转换
		HDMI接口输入是数字信号,显卡直接传输
		DVI接口输入是数字信号,显卡直接传输
	显示器刷新
		显示器刷新屏幕的频率是稳定的(根据显卡帧缓存数据扫描刷新屏幕完成一次是一帧,显示器一般工作频率为60帧,有的是72帧)
		显示器每刷新完成一帧后去显卡获取帧缓存数据
			显卡DAC完成一帧的扫描后就会产生一个垂直同步信号,GPU会等待垂直同步信号在开始下一帧绘制
			单缓冲不开启垂直同步,显示器获取的帧数据会产生撕裂
			单缓冲开启垂直同步,显示器获取的帧数据不会产生撕裂,显示器会等待绘制完成在读取帧数据(G-Sync算法)
			双缓冲不开启垂直同步,显卡一直在Render->SwapBuffer,此时会产生很多无效帧数据(高端显卡),不会产生画面撕裂
			双缓冲开启垂直同步,显卡阻塞在Render->SwapBuffer,直到显示器同步信号到来
			低帧率开启会导致更卡,因为显卡计算太慢,计算不完就只能等下一帧切换画面(G-Sync算法会减少这个延迟时间)
			高帧率开启后导致延迟,因为显卡计算阻塞,如果下一帧计算量太大(超过了显示器的刷新一帧的时间),那么显示器会保持一幅画面两帧,会感觉到不流畅
	单元
		GTX1080有88个光栅单元rops
		统一渲染架构(流处理器,不区分像素处理单元和顶点处理单元)
驱动
	驱动程序不同平台有不同的规范以及扩展
	硬件加速部分渲染指令由硬件执行,例如光栅、矩阵变换、着色、采样、光照计算等等
	硬件加速需要显卡支持
编程接口
	opengl和directx都属于操作系统层面的编程接口
	directx是windows平台的专属API
	opengl是跨平台的API,windows也提供了支持
	metal是苹果系列设备的API
	opengles是android设备的的API
版本对比
    DX版本 OGL版本 ES版本   SM版本  特点    						
    8.0    1.0	   1.0		1.0   	固定管线
	9.0    2.0	   2.0		2.0 	可编程管线
	9.0c   3.0	   3.0		3.0 	
	10.0   3.3				4.0     统一渲染架构
	10.1  					4.1
	11.0   4.2				5.0            
	12                      5.1     
	SM3.0版本特性
		32位浮点运算 MSAA抗锯齿 65535条指令上限 HDR支持
		GPUInstance
颜色模型
		RGB模型,通过RGB三基色来调节颜色
		HSV模型,通过色调、亮度、饱和度来调节颜色
		RGB和HSV可以通过公式进行转换
颜色空间	GAMMA空间&LINER空间
		现实中几乎所有图片默认都是存储为GAMMA格式,即经过0.45gamma纠正 
	  	显示器又做了2.2的逆向纠正,使得最终结果保持一致
	  	光照计算是线性的,因此输入图片是线性的跨平台才能更精确
		UNITY中sRGB选项表示该图片是GAMMA图片,注意:Default格式才有这个选项
		LINER需要OPENGLES3.0支持
HDR		
		光的颜色分量是8位,最多0-255,大部分高亮的颜色都超过了255
		人眼瞳孔会根据光线射入量进行自适应调节,太亮时缩小瞳孔减少射入量,太暗放大增加射入量
		不开启HDR选项的摄像机拍摄的图片,亮度会被裁剪到0-255,光照强度*颜色超过255会被削减
		从室内观察室外和从室外观察明暗变化
		游戏中使用HDR算法模拟人眼瞳孔的自适应,根据平均亮度自动调整
		unity开启hdr选项会增加一个hdr buffer,存储超过1的颜色
shader函数
	tex2D根据UV采样纹理,tex2DProj传入齐次坐标,除以uv.w后进行采样