裁剪窗口
    坐标为(xleft,ybottom) (xright,ytop)
    先裁剪在进行光栅化,方便计算,裁剪和光栅发生在顶点着色器之后像素着色器之前
    摄像机的近裁面、远裁面、视角、大小等信息用于场景对象碰撞检测,进行遮挡剔除和投影变换
    摄像机的ViewPort用于裁剪视口
点的裁剪
    直接判断点的X和Y坐标是否在窗口内部
线段裁剪
    编码裁剪算法
        1.区域编码
            裁剪窗口扩展边界线为九宫格后进行四位二进制编码,上下右左
            最终编码为
            1001*1000*1010
            **************
            0001*0000*0010
            **************
            0101*0100*0110
            裁剪窗口所属区域编码为0000
        2.裁剪
            如果两个点编码都是0000,则线段位于窗口内部
            如果两个点编码与运算结果不为0,说明两个点位于上侧或者下侧或者右侧或者左侧,线段位于窗口外部
            计算其中一个外点与边界的交点(内点没有交点),对剩余线段重复执行上述算法
                if(top & code != 0) 该点位于上侧
                elseif(bottom & code != 0) 该点位于下侧
                elseif(right & code != 0) 该点位于右侧
                elseif(left & code != 0) 该点位于左侧 x=xl;y=(y2-y1)*(xl-x1)/(x2-x1)+y1
    中点分割算法
        递归二分计算出交点
    梁友栋算法
    参数化算法
凸多边形裁剪
    不是线段裁剪的简单组合
    逐边裁剪算法
        思想:分别使用窗口的四条边对多边形进行裁剪,按照左上右下顺序依次裁剪,前一次的裁剪结果是后一次的输入(该算法在寻路系统体素化时有使用)
            裁剪线与线段的位置关系有四种,起点终点都在不可见一侧、都在可见一侧、起点可见终点不可见、起点不可见终点可见
            每一次裁剪的输出都是顺时针的顶点序列,构成新的多边形
            都可见输出一个起点;都不可见没有输出;起点可见输出交点;终点可见输出交点和终点
        缺点:凹多边形会生成一条多余的线段(被矩形窗口分割成两个分离的多边形,这两个多边形有一条线段相连)
        流程:
            1.已知多边形顶点数组s,定义新多边形顶点数组f
            2.遍历多边形每条边,检测边的两个顶点
                都在外侧,不输出
                都在内侧,输出起点
                起点在外终点在内,求出交点并输出交点和终点
                起点在内终点在外,求出交点并输出交点
            3.把当前输出f作为输入s,对下一条裁剪线执行算法1、2

