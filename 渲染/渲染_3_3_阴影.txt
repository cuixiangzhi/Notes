ShadowAcne&SelfShadow
    阴影图分辨率不够,导致多个点映射到阴影图中的一个像素,该像素取均值时会导致连续的平面阴影是断开的
    通过shadow bias和 normal bias可以把深度值统一调小,那么阴影区域就会变亮,太大会导致悬空的感觉
ShadowMap
    LightSpaceShadowMap
        1.以实时灯光位置作为视点,渲染一张深度纹理
            生成过程: 
                顶点shader计算深度
                    o.pos = UnityObjectToClipPos(v.vertex);
                    o.depth = o.pos.zw
                像素shader记录深度(因为有差值)
                    float depth = o.depth.x / o.depth.y
                    fixed4 depth_color = EncodeFloatRGBA(depth)
         2.接受阴影的物体从模型空间转换到灯光空间,和深度图作比较,大于深度图中的深度则为阴影
            计算过程
                顶点shader计算深度
                    objectToLightProj = mul(worldToLightProj,unity_ObjectToWorld);
                    o.proj = mul(objectToLightProj,v.vertex);
                    o.depth = o.proj.zw
                像素shader比较深度
                    fixed4 depth_texture_color = tex2Dproj(_LightDepthTexture,o.proj);
                    float depth_texture = DecodeFloatRGBA(depth_texture_color);
                    float depth_current = o.depth.x / o.depth.y
                    if(depth_texture < depth_current) 阴影
    ScreenSpaceShadowMap
        ZBuffer
            zbuffer=(az+b)/(z|-z)
            深度图记录的是非线性变换的zbuffer值,采样之后要使用Linear01Depth映射到[0,1]或者[n,f]
        1.首先在当前摄像机处创建相机渲染一张深度图
            生成结果是_CameraDepthTexture
        2.然后在灯光位置创建相机渲染一张深度图
            生成结果是_LightDepthTexture
        3.对屏幕进行一次后处理操作,输入两张深度图,输出ScreenShadowMap
            顶点shader直接转存uv坐标
                o.uv = v.uv
            像素shader计算屏幕空间阴影图
                首先需要把当前像素点从屏幕坐标系变换到灯光坐标系
                屏幕坐标系->摄像机坐标系
                float3 vpos = computeCameraSpacePosFromDepth
                摄像机坐标系->世界坐标系
                float4 worldPos = mul(unity_CameraToWorld,vpos)
                世界坐标系->灯光坐标系
                float4 lightPos = mul(unity_WorldToLightProj,worldPos)
            生产结果是_ShadowMapTexture
        4.正常渲染物体
            像素shader使用屏幕坐标采样ScreenShadowMap
Projector
    1.以实时灯光位置作为视点,渲染一张透明纹理
        生成过程:
            顶点shader只计算坐标
            像素shader直接返回不透明颜色
            生成的纹理的alpha值大于0表示阴影,等于0表示不是阴影
    2.把纹理投影到场景内,类似于幻灯片投影到墙上一样
        计算过程:
            顶点shader计算当前顶点的投影纹理齐次坐标
                sproj = mul(_Projector,v.vertex);
            像素shader采样然后插值计算alpha进行混合 Blend DstColor Zero 正片叠底
                uv齐次 = UNITY_PROJ_COORD(sproj);
                alpha = tex2DProj(_ShadowTex,uv齐次).a
                uv = uv齐次.xy / uv齐次.w;
                float2 factor = abs(uv4.xy / uv4.w - float2(0.5,0.5));
                if(factor.x <= 0.5 && factor.y <= 0.5)
                {
                    //首先把阴影的范围限制在投影纹理UV之内,然后计算UV和边界的距离插值处理渐变效果(用距离边界最小的值算)
                    float minFactorDis = 0.5 - max(factor.x,factor.y)
                    float dist = 1 - clamp((_ShadowGradient - minFactorDis),0,_ShadowGradient) / _ShadowGradient;
                    color *= (1 - _ShadowFactor * alpha * dist);
                }