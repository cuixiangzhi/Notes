渲染传输
    OGL渲染时并不是立即把渲染指令传到GPU,而是等待一定时机(例如swapBuffers)才会传输
    二如果是渲染和写数据交替进行(使用同一个BUFFER),那么就会导致CPU阻塞传输渲染指令
OpenGL Context
    当前渲染状态,不同的渲染线程有不同的context
OpenGL Object
    vao vbo ubo ebo tbo fbo
    存放原始数据或者中间数据
context与object的关系
    gen创建object bind绑定到context(此时object数据才能传输到显存里) glbufferdata传输数据
    vao存储顶点属性的格式和地址 vbo存储顶点数据 ebo存储索引 ubo存储shader数据 tbo存储纹理数据 fbo存储帧数据
立即模式
    使用方式
        glBegin(GL_*)
            glVertex*();
            glColor*|glIndex*();
        glEnd();
    优缺点:
        传输速度很慢调用次数太多(glVertex命令太多),效率很低
        数据量大一点那么代码量变大,数据发送开销增加
        OpenGL3.0 已废弃
显示列表
    使用方式:
        GLuint id = glGenLists(1);
        glNewList(id,GL_COMPILE);
        glEndList();
        glCallList(id);
        glDeleteLists(id,1);
    优缺点:
        一次性把渲染命令(包含数据)传输到GPU显存,一次传输不可修改
        适用于 材质定义 纹理定义 光照定义 静态图形
顶点数组
    使用方式
        1.定义一维顶点、颜色、UV、法线的数组GLFloat v[];
        2.启用数组glEnableClientState,包括8种GL_VERTEX_ARRAY GL_COLOR_ARRAY GL_TEXTURE_COORD_ARRAY GL_NORMAL等等
        3.指定被启用的数组的地址及内容格式
            glVertexPointer指定顶点在数组内的信息
            glColor|IndexPointer指定颜色在数组内的信息
            glTexCoordPointer指定UV在数组内的信息
            glNormalPointer指定法线在数组内的信息
        4.传输被启用的数组数据进行渲染
            glDrawArrays(MODE,FIRST,COUNT)必须从起点到终点按顺序绘制
            glDrawElements(MODE,COUNT,TYPE,indices)每次绘制多组数据,顶点顺序任意
        5.禁用数组glDisableClientState
    优缺点:
        在传输之前,数据一直在应用程序内存里,很容易修改,每次渲染都要传输
        减少了函数调用次数和冗余顶点数
缓冲对象
    概念:
        VBO:显卡内的一块内存buffer,可以用来存储顶点、颜色、UV、法线等等数据
            存储了真正的数据,不需要传输过程(只在数据修改或者初始化时传输)
        VAO:vbo的集合,用于存储一个对象完整渲染所需的信息
            VAO只存储了数据的指针
        EBO:由顶点数组索引构成的图元
        FBO:用户创建的不显示的帧缓存
        内存:
            SystemMemory 系统内存,主内存,CPU访问速度很快
            AGPMemory    系统内存的一部分,显卡通过特殊通道访问,访问速度介于两者之间
            VideoMemory  显卡内存32M 64M 128M,显卡直接访问,GPU访问速度很快
        bind:
            指定当前状态机内指定的目标使用的是哪个对象
            例如:
                指定纹理单元0使用的是texID这个纹理对象
                glActiveTexture(GL_TEXTURE0) 
                glBindTexture(GL_TEXTURE_2D,texID) 
    VBO渲染流程:
        创建及修改数据过程
            定义顶点数组:GLfloat v[];
            分配VBO句柄 glGenBuffer(1,vboID)
            绑定VBO类型 glBindBuffer(GL_ARRAY_BUFFER,vboID)  顶点属性顶点颜色法线UV都使用GL_ARRAY_BUFFER,索引数据使用GL_ELEMENT_ARRAY
            传输VBO数据 glBufferData() glBufferSubData       传输时指定数据用途GL_静态(不会改动)|动态(频繁改动)|流式(每帧都变)_绘制 读和拷贝标志仅对帧缓存有意义
            解绑VBO     glBindBuffer(GL_ARRAY_BUFFER,0)
            删除VBO数据 glDeleteBuffers(1,vboID)
            映射VBO数据 glMapBuffer|glUnmapBuffer 映射模式包括只读只写读写
        渲染过程
            启动客户端数组 绑定对象 设置指针 绘制 解绑 禁用客户端数组
            glEnableClientState glBindBuffer glVertexPointer glDrawElements glBindBuffer glDisableClientState
            绑定对象 启用attribute数组 设置指针 绘制 关闭attribute数组 就出绑定
            glEnableVertexAttribArray glVertexAttribPointer glDrawElements
            API解释
                glEnableVertexAttribArray(index) index是着色器变量ID,如果不启用着色器获取不到数据
                glVertexAttribPointer CPU传输数据给GPU,并指定着色器变量ID
        优缺点:
            使用VBO在服务端创建缓存对象，并且提供了访问函数来解引用数组
            VBO内存管理会根据用户提示，"target"  和"usage"模式，将缓存对象放在最佳地方
            内存管理会通过在系统内存、AGP内存和视频卡内存(system, AGP and video memory)这3中内存见平衡来优化缓存
            VBO中数据可以通过映射到客户端内存空间而被用户读取和更新
            VBO的另外一个优势是它像显示列表和纹理一样，能和多个客户端共享缓存对象
        EBO(IBO):索引类型的VBO对象
            创建及修改数据过程:         
                分配EBO句柄:glGenBuffers(1,&eboID);
                绑定EBO类型:glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,eboID);
                传输EBO数据:glBufferData(GL_ELEMENT_ARRAY_BUFFER,sizeof(indices),indices,GL_STATIC_DRAW);
    VAO渲染流程
        来历:
            每次VBO渲染都要做一些通用设置,这些通用设置可以封装起来(存储了数据的位置及格式信息),即VAO
        创建及修改数据过程
            分配VAO句柄 glGenVertexArrays(1,vaoID)
            绑定VAO     glBindVertexArray(vaoID)
            针对(顶点、颜色、UV、法线、索引等)创建VBO-绑定VBO类型-传输数据-启动数组-设置指针
            解除VAO绑定 glBindVertexArray(NULL)
            解除VBO绑定
        渲染过程
            绑定vao对象,绘制,解除绑定
            glBindVertexArray(vaoID); glDrawElements(...); glBindVertexArray(0);
    UBO
        uniform buffer object,方便传递大量uniform数据给vs和fs shader
        uniform data
        {
            *
        } name(如果不指定,则data作为全局前缀,内部变量通过data.访问,否则通过name.访问);
        内存布局
            shared:保证不同程序中具有相同定义的block拥有相同布局
            std140:指定aligment大小,添加字节保证字节对齐
        创建UBO glGenBuffers(1,&uboID);
        绑定UBO glBindBuffer(GL_UNIFORM_BUFFER,uboID);
        传递数据glBufferData(GL_UNIFORM_BUFFER,size(glGetUniformBlockSize(index)),NULL,GL_DYNAMIC_DRAW);
        传递部分glBufferSubData(GL_UNIFORM_BUFFER,offset,size,&data);
    TBO
        创建纹理 glGenTexture(1,&texID);
        指定纹理 glActiveTexture(GL_TEXTURE0)
        绑定纹理 glBindTexture(GL_TEXTURE_2D,texID)
        纹理过滤 glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_LINER);
        纹理数据 glTexImage2D(GL_TEXTURE_2D,mipmapLevel,GL_RGBA,宽,高,0,0,GL_RGBA,GL_UNSIGNED_BYTE,PTR);
                 glTexSubImage2D(GL_TEXTURE_2D,mipmapLevel,x,y,宽,高,GL_RGBA,GL_UNSIGNED_BYTE,PTR);
        删除纹理 glDeleteTextures(1,&texID);
        纹理过滤
            当纹理和多边形光栅后的片段像素无法完全匹配时,纹理会被拉伸或者收缩
            根据一个经过拉伸的贴图计算顶点颜色的过程称为纹理过滤
            GL_TEXTURE_MAG_FILTER 指定放大时如何过滤
            GL_TEXTURE_MIN_FILTER 指定缩小时如何过滤
            GL_LINER 线性过滤 双线性过滤
            GL_NEAREST 最近点过滤 各向异性过滤
            最近点过滤 采样1次
            双线性 采样4次
                在同一个mipmap下采样
            三线性 采样8次
                在同一个mipmap下采样后再相邻的mipmap采样
            各向异性过滤 简称AF, 4x采样32次,16x采样128次
                贴图贴到平行于摄像机的面时各向同性,否则是各项异性
                考虑贴图的面与屏幕的倾斜角度
        纹理环绕
            纹理坐标大于1或者小于0时如何采样
            以上两种一般选取线性、重复模式
        MipMap 
            硬件支持生成MIPMAP
            glGenerateMipmap(GL_TEXTURE_2D);
            GL_<FILTER>_MIPMAP_<SELECTOR> filter标记miplevel内如何采样 selector标记如何选择miplevel
        纹理压缩
            文件存储压缩格式,基于整幅图片进行压缩,不支持分块解压,无法利用GPU并行功能
                psd tga bmp png jpg gif
                png32支持24位颜色和8位透明度,支持256色透明度
            内存存储压缩格式
                调色板:16位来组合颜色值,内存中之存储颜色索引,对于颜色丰富,渐变细节很多的会失真严重
                纹理压缩:通过两张n*n的缩略图和一个与原图宽高相同的矩阵M,经过计算得出原图,etc pvrtc dxt astc都是这种算法
                DXT算法原理:把整张纹理分成4*4的小块,每个块保留两个16位的颜色,16个像素通过公式差值得出原始的颜色,每个块需要64位
                DXT算法对每个4*4block进行压缩,只保留两个颜色,其他颜色值这两个颜色之间的插值,PC标准压缩算法,0.6
                ETC,安卓常用压缩算法,ETC1不支持ALPHA通道,4*4块压缩,0.125/0.25
                PVR,IOS常用压缩算法,压缩分块时会考虑部分块之间的关联性,PVRTC2是8*4压缩,PVRTC4是4*4压缩,0.125/0.25
                ASTC,IOS6以后支持的压缩算法,不需要POT支持,压缩质量也更高,压缩比变大0.25
    FBO
        创建缓冲区对象 glGenFrameBuffers(1,&fboID)
        绑定缓冲区对象 glBindFrameBuffer(GL_FRAMEBUFFER,fboID)
        每个FBO都有多个绑定点,用于和真实的渲染目标关联起来,包括多个颜色绑定点(MRT支持)、一个深度、一个模板绑定点
        FBO不能单独使用,必须把渲染目标关联到FBO的绑定点才可以
        离屏渲染
            创建渲染目标 glGenRenderBuffer(1,&rboID)
            绑定渲染目标 glBindRenderBuffer(GL_RENDERBUFFER,rboID)
            分配显存空间 glRenderBufferStorage
            关联绑定点   glFramebufferRenderbuffer(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_RENDERBUFFER,&rboID)
        渲染到纹理
            创建纹理&绑定纹理&分配纹理内存
            关联绑定点   glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D,&tboID)
着色器
    基础知识
        glVertexAttribPointer指定index是着色器中的变量ID
        着色器使用流程:创建shader->编译shader->创建shaderProgram->链接多个shader到program->启用shaderProgram
        具体流程:shader源文件->读取shader源码->编译shader源码->链接shaderObjects->programObject
        ShaderProgram是ShaderObject的集合,例如VertexShader、GeometryShader、FragmentShader等等
        变量类型 
            int float bool vec*float向量 bvec*bool向量 ivec*int向量 mat*矩阵 sampler*D纹理
            shader程序内可以使用struct和变量类型来定义数据结构
        变量修饰符
            const 编译器常量
            attribute 随不同顶点变化的全局变量,opengl程序传递给shader,只能用在顶点shader,只读
                    获取变量位置,只能在link shader程序之后使用 
                    glGetAttribLocation(programID,name);
                    glVertexAttrib*
            uniform 随不同图元变化的全局变量,opengl程序传递给shader,顶点和像素shader都可用,只读
                获取变量位置,只能在link shader程序之后使用 
                    glGetUniformLocation(programID,name);
                    glUniform*设置uniform变量属性
                    //uniform block
                    glGetUniformIndices(programID,uniformCount,uniformNames,indices)
                    glGetUniformBlockIndex(programID,"blockName");
                    glGetUniformBlockSize(index)
                    glGetActiveUniformsiv
                    //uniform texture glActiveTexture在使用多纹理时调用,默认为GL_TEXTURE0
                    glUniform1i(loc,texIndex)
                绑定
                    glUniformBlockBinding(programID,uniformIndex,bindPoint);
                    glBindBufferBase(GL_UNIFORM_BUFFER,bindPoint,uboID)
            varying 顶点和像素shader传递数据的变量,顶点shader内可写,像素shader只读
            lowp highp(默认) mediump 精度限制
    顶点着色器示例
        #version 330 GLSL版本
        layout(location = 0) in vec3 position 顶点属性索引
        uniform sampler2D _TEX;
        void main(){ gl_Position = vec4(position,1.0) } 输出顶点
    片元着色器示例
        #version 330 GLSL版本
        out vec4 color; // 输出片元颜色
        void main(){ color = vec4(0.8, 0.8, 0.0, 1.0); }
    创建过程
        顶点shader
            创建shader对象 shaderID = glCreateShader(GL_VERTEX_SHADER); 
            读取源代码     glShaderSource(shaderID,&shaderSource,NULL);
            编译源代码     glCompileShader(shaderID);
            检查编译状态   glGetShaderiv(shaderID,GL_COMPILE_STATUS,&status);
            获取错误信息   glGetShaderiv(shaderID,GL_INFO_LOG_LENGTH,&length); glGetShaderInfoLog(shaderID,length,&length, &errLog);
        像素shader 同上
    链接过程
        创建program对象  programID = glCreateProgram();
        添加shader对象   glAttachShader(programID,shaderID)
        绑定变量位置     glBindAttribLocation(programID,pos,name)
        链接program对象  glLinkProgram(programID)
        检查链接状态     glGetProgramiv(programID,GL_LINK_STATUS, &status);
        获取错误信息     glGetProgramiv(programID,GL_INFO_LOG_LENGTH, &length); glGetProgramInfoLog(programID,length,&length,&errLog);
    启用过程
        修改当前程序     glUseProgram(programID); glUseProgram(NULL);
        传递程序参数 
            uniform      glGetUniformLocation(programID,uniformName) 
                         基本类型通过 glUniform*直接传递
                         纹理数据首先 glActiveTexture->glBindTexture->glTexSubImage(内存中的纹理在创建时就传递过了,此处不需要)
                                      glUniform1i(loc,0);
                         uniform比较常用,一般为程序参数
            attribute    glGetAttribLocation(programID,attrName)
                         基本类型通过 glVertexAttrib*直接传递
                         顶点属性数据
    释放过程
        移除shader对象   glDetachShader(programID,shaderID)
        删除shader对象   glDeleteShader(shaderID)
    绘制命令
        glDrawElements(GL_TRIANGLES,count,GL_UNSIGNED_INT,0); 绘制整个mesh
        glDrawElementsBaseVertex(); 绘制部分mesh
        glDrawElementsInstanced(GL_TRIANGLES,count,GL_UNSIGNED_INT,0,instanceCount) 绘制多次同一个mesh
批处理优化
    DC
        一个DC就是从设置着色器程序,设置VAO,调用DrawElement的过程
        合批是指相同着色器程序(材质球),设置好合并后的索引数组,调用DrawElement,减少了DC的次数
    静态合批
        对原始MESH数据修改,多个相同材质的MESH合并为一个VBO(包括顶点、颜色、索引、UV等等)
        静态合批可以减少数据传输和DC,但是不利于遮挡剔除
    动态合批
        CPU动态检测相同材质的MESH,合并成一个VBO
        合并有顶点数限制(固定的数组65535个顶点);合并的物体必须拥有一致的缩放
    GPU INSTANCE
        支持 DX11/DX12/GL4.1/GLES3.0/METAL
        合并不同材质的MESH,材质的不同属性通过额外参数传递给shader
        大量物体只提交一个原始模型给GPU,其他属性交给SHADER来处理
        drawmesh(instanced) 代表被GPU INSTANCE
        unity默认只对相同MESH相同材质 不同位置、缩放、旋转的物体进行GPU INSTANCE
            受不同实时灯光或者处于不同光照贴图的也不会被合批
            使用多个材质的无法合批
        其他属性需要自己在shader内添加
            C#  
                创建实例变量
                MaterialPropertyBlock
            shader
                标记编译生成实例变量
                #pragma multi_compile_instancing 
                定义实例ID
                UNITY_VERTEX_INPUT_INSTANCE_ID   
                UNITY_SETUP_INSTANCE_ID
                UNITY_TRANSFER_INSTANCE_ID
                定义实例变量
                UNITY_INSTANCING_BUFFER_START(Props)
                    UNITY_DEFINE_INSTANCED_PROP(fixed4, _Color)
                UNITY_INSTANCING_BUFFER_END(Props)
                获取实例变量
                UNITY_ACCESS_INSTANCED_PROP(Props, _Color)