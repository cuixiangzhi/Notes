基础知识
    DynamicBatching
        运行时会把相同材质的Mesh合并为一个大Mesh,顶点限制300,总数据限制900,消耗CPU资源
    StaticBatching
        场景打包时会把使用相同材质的mesh合并为一个大Mesh
        顶点数限制64K,索引数限制64K(GLES.48K,MACOS.32K),消耗内存资源,降低CPU消耗
        Unity默认会把使用不同材质的MESH也合并在一起,可以自定义合批工具,会减少一定的批次
    GPUInstance
        每个实例引用相同的Mesh数据,Shader内通过StructArray来获取每个实例的不同数据
        数据数组有长度限制,默认500个(vulkan250个),不支持Texture结构数组
    Gfx.WaitForTargetFPS
        CPU速度很快,超出了目标帧率,例如限帧30帧,上一帧耗时15ms,那么当前帧WaitForTargetFPS=33-15=18ms
    Gfx.WaitForPresent
        CPU等待GPU渲染完成或者VSync信号到来,GPU负载很高
    Gfx.SetPass
        一个DrawCall分为setpass和batch两部分,相同的setpass也就是使用相同的材质,batch是合并的Mesh个数
        批次分类及合批影响因素
            DepthLoop
                1.自定义渲染目标可以取消这个批次,需要规范深度图使用方式,好像有一些渲染效果会出异常
            ShadowLoop
                1.Unity会根据ShadowCaster这个Pass的状态设置计算一个hash用于判断是不是相同,相同则可以执行合批
                2.影响合批的是Shader内ShadowCaster的实现和StaticBatchIndex,SkinMesh无法合批
            OpaqueLoop
                1.DistanceSort,安卓平台为了执行Early-Z优化,会优先按照距离排序,导致渲染队列内出现材质穿插现象,批次变多,CPU消耗变高,GPU消耗未知(状态切换消耗是否更高)
                2.BatchIndexSort,Unity默认的静态合批并不是按照材质球分类的,按照StaticBatchIndex排序之后渲染队列内出现穿插现象,手动指定静态合批可以减少一定批次
                3.LightmapIndexSort,静态物体同一个静态批次内会按照光照贴图来排序,光照贴图每增加一张批次数量增加一倍,尽量一张2048搞定
                4.ShadowDistance,同一个静态批次内可能会被ShadowDistance分成两部分,批次极限情况会翻一倍
                5.MaterialCount,批次数量可以用staticBatchCount * lightmapCount * 2粗略计算,材质球极限不多于50个(3张lightmap不多于30个)
            TransparentLoop
关键函数
    Player.Render
        BeginFrame
        RenderAllCameras
            Camera.Render
        EndFrame
        WaitForPresent
    Camera.Cull
        根据摄像机的cullingMask和viewBounds进行裁剪,得到可见列表
    RenderManager.SetCurrentCamera
        设置当前摄像机,记录上一帧位置,计算镜头移动速度向量
    Camera.UpdateDepthTextures
        检查是否开启了深度图模式,不开启则跳过该步骤
        检查软粒子是否开启,SOFTPARTICLES_ON宏会影响深度计算
        检查摄像机视口范围是否有效,无效则跳过该步骤
        Camera.RenderDepthTexture
            RT创建
                深度图和深度法线图是两个不同的RenderTexture
                深度图是16位深度+单通道,深度法线图是16位深度+四通道
                每帧都会通过RTBuffer申请和释放TempBuffer
            RT渲染
                RT.SetActive()  && GL.Clear(color+depth+stencil)
                Camera.SetupRender
                    设置全局变量CameraPos、CameraToWorld、WorldToCamera、DeltaTime、ZbufferParams、ProjectParams、ColorSpace等等
                Camera.RenderSceneShaderReplacement 
                    遍历可见结点,遍历子材质
                        创建RenderObjectData,加入RenderObjects数组
                    对RenderObjects按照一定规则排序
                        layer->order->subshaderIndex->distance
                    遍历RenderObjects数组,针对每个对象和当前shader的ShadowCasterPass(深度法线图使用的是内置的Shader,Replace渲染)
                        设置Shader数据,主要是变换矩阵以及Shader内包含的RenderState
                        调用Renderer组件的Render函数,先获取到有效的VBO,然后设置Camera全局变量,最后调用DrawElements
                ShaderLab.SetTexture(key,value) 
                    把渲染结果设置到全局shader变量
            RT升级
                5.x之前DepthTexture和DepthNormalTexture使用Replace方式用InternalShader来渲染,没有批处理
                5.x之后DepthTexture会使用LightMode为ShadowCaster的Pass来渲染
                5.x之后DepthNormalTexture貌似仍然使用Replace方式渲染
    Camera.SetupRender
        设置渲染目标
            后期目标RT设置,HDR、ColorSpace、AntiAliasing等会影响RT的格式(FP16|R11G11B10 SRGB)
            渲染目标RT合并,渲染到RT或者清屏渲染不需要处理之前的渲染结果,修改当前RT(指向第一张后期RT或者当前摄像机的RT)
            渲染目标设置,glBindFramebuffer->glFramebufferTexture2D||glFramebufferRenderbuffer
            渲染视口设置,glViewport
        设置CameraPos、CameraToWorld、WorldToCamera、DeltaTime、ZbufferParams、ProjectParams、ColorSpace等等
    Camera.DoRender
        RenderLoop.PrepareFrame
            RenderContext全局环境变量设置,包括各种矩阵、对象数组、排序方式等等
        RenderLoop.TraverseNode
            针对可见结点的所有子材质创建渲染对象,根据queueIndex加入到对应的不透明和半透明数组内
            material       当前子材质球
            matIndex       当前子材质球的数组下标,一般为0
            shader         当前子材质球所使用的着色器
            layerData      渲染队列order和layer打包在一起
            queueIndex     渲染队列,如果材质上没有自定义则获取shader的默认值
            lightmapIndex  当前MESH所使用的lightmapIndex
            batchIndex     当前MESH所在的BatchMesh的InstanceID,静态合批的MESH有自己单独的triangles,共享BatchMesh的顶点数据
            distanceSort   根据摄像机和物体的AABB中心点的距离,正交摄像机算的是Z值,透视摄像机算的是到摄像机距离
            distanceView   Z值距离
            nodeData
        RenderLoop.RenderOpaque
            ForwardRenderLoop.TraverseObject
                查找每个Object的Light信息
                把接收阴影并且位于ShadowDistance之内的物体加入Receiver数组内
            ForwardRenderLoop.TraversePass
                创建RenderPassData并加入Pass数组内
            ForwardRenderLoop.SortPass
                Unity4.7版本排序规则
                layer->order->queue->firstpass->lightmapIndex->staticBatchIndex->matIndex->shader->material->passIndex->distance->objectIndex
                Unity2018.4排序规则,优先按照distance来排序可以利用Early-Z优化
                layer->order->queue->firstpass->distanceBucket->staticBatchIndex->lightmapIndex->shader->material->passIndex->objectIndex
            ForwardRenderLoop.PerformRendering
                先渲染ShadowMap
                ForwardRenderLoop.RenderShadowMap
                    FindCasters->SortCasters->RenderCasters->ApplyPass->ApplyProperties->BatchRender.AddOrFlush
                再渲染Object
                ForwardRenderLoop.RenderPasses
                    ApplyMaterialProperties->ApplyPassProperties->BatchRender.AddOrFlush
        RenderLoop.RenderSkybox
        RenderLoop.RenderImageFilter
        RenderLoop.RenderTransparent
    BatchRender.Flush
        静态批处理
        StaticBatch.BeginStaticBatch->StaticBatch->EndStaticBatch->BindBuffer->DrawElements
        FrameStats.Batches++ BatchedCalls+N
        动态批处理
        DynamicBatch.BeginDynamicBatch->DynamicBatch->EndDynamicBatch->BindBuffer->DrawElements
        FrameStats.Batches++ BatchedCalls+N