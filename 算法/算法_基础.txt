压缩算法
  	MD5     生成16字节128位的数,每次处理512位64字节的数据,处理完后更新128位数据,不够64字节补1+0,最后生成128位MD5码
  	UUID    MD5长度128位,UUID是128位数的16进制表示的字符串,格式08-04-04-04-0804
  	HAFMAN  单个字符出现频率编码,由原始的不同的字符出现的次数为权值,构造哈夫曼树,每个字符有一条路径构成的编码
  	LZ77    字典模型,首先有一个字典表,包含了出现过的单词或者句子,再次出现时只有一个位置索引即可
          	滑动窗口,即字典,字典查找过程就是查找最大子串
  	加密    基于异或运算的位加密算法,A^B=C C^B=A   RSA SHA
  	BASE64  HTTP请求发送数据只能发送ASCII码,因此需要进行编码操作,编码后+号传输会变成空格
    VARINT  对原始数据每7位作为一个字节,大于7位时高位补1,不足7位时高位补0,因此0x80表示有效数据,否则表示最后一个字节
    ZIGZAG  VARINT表示负数时一定是5个字节,该算法对它进行优化
    PROTO   TAG-LENGTH(可选)-VALUE TAG=field_number << 3 | wire_type
            VARINT=0
                针对int32 uint32 int64 uint64、bool、enum，采用varint算法(负数使用zigzag)
            FIXED64=1
                针对double,使用64bit编码
            LENGTH-DELIMI
                针对string bytes,tag采用varint,length采用varint,string使用utf-8
            FIXED32
                针对float,使用32bit编码
数据结构
  	二叉树 
  		完全二叉树;深度为d,结点个数为2^d-1;父结点为n,左子结点为2n+1,右子结点为2n+2;结点数为n,深度为log₂n
        叶子结点个数为n0=n2+1(深度为n的一层结点数为(2^n-1)-[2^(n-1)-1]=2^(n-1),之前的结点总数为2^(n-1)-1)
 	二叉搜索树
        当前结点的左子树都小于当前结点,右子树都大于当前结点
        插入有序数据之后退化成了链表,搜索效率降低
    平衡二叉树
        左右子树高度差不超过1,每个结点存储了当前的高度
        先根据大小找到插入点,然后递归向上修改父结点的高度并计算平衡因子,高度差为2或者-2时需要调整该子树
 	B-树
        B树是一颗N叉平衡树,AVL树只有两个子结点,在数据量很大时读取结点的操作会很慢(如果结点数据存在磁盘上)
排序算法
  	稳定排序 
        冒泡  从后往前两两比较,j小于j+1,则不交换 O(n^2)
        插入  从前往后,往前找出不大于当前数据的点,插入 O(n^2)
        归并  先划分子序列,分别排序两个子序列,归并两个有序子序列,递归退出条件,剩余1个数或者左侧小于右侧 O(nlogn)
	    桶排序
	    	原理
	    		把N个数均匀分配到K个桶中,每个桶都是特定范围内的数据,桶是有序的
	    		分配过程是逐位计算,先计算第1位,在计算第2位,直到计算到最高位为止
	    	步骤
		    	首先根据已知数据计算出每个桶的存储范围
		    	然后遍历数组把每个数存储到对应的桶内
		    	最后遍历桶数组,对每个桶执行排序
	    	复杂度
	    		O(nlog(r)m) r为所采取的基数,而m为堆数
  	不稳定排序 
        快排  找出分离轴,左侧找出一个大于该值的位置,右侧找出一个小于该值的位置,交换。继续找直到左侧与右侧相等 O(nlogn)
        堆    对数组下标建立二叉大顶堆,从最后一个非叶子结点(n-1/2),向下调整父子结点,交换堆顶和堆尾,向下调整 O(nlogn)
        选择  每次选出第N小的数和N号位置交换  O(n^2)
  	拓扑排序有向图
        找出一个入度为0的结点,输出该结点并对子结点入度减1
        循环直到所有结点全部被访问过
搜索算法
  	正则表达式 
        ^匹配开头 $匹配结尾 *前面的字符出现>=0次 +前面的字符出现>=1次
        .除了\n之外所有字符 ?前面的字符出现0或1次
        \转义 []多选一 aAsdw
  	A*启发式搜索
        f = g + h,open表存储待查子结点,close表存储已查子结点
  	哈希算法
        首先设置哈希表长度,然后设置哈希函数
        表长度为2^m,计算哈希值 n = (ax+by+cz)&(2^m-1)  
        a,b,c为常数,Recast内为0x8da6b343,0xd8163841,0xcb1ab31f
  	后缀数组
  		子串 字符串s中从i到j的字符串s[i,j]
        后缀 字符串s中从j到len(s)的子串,称为后缀j
    动态规划
        状态方程 f(x) = f(x-1) + f(x-2)