常用寻路地图建模算法
    路点
        内存和计算都很小
        需要手工配置路点,局限性较大,适合路点巡逻之类的需求
    格子
        容易实现,容易动态修改,动态阻挡容易实现
        内存开销大,需要衡量精度、内存、计算量
        走路不平滑,需要做额外算法处理
        不适合3D地图,因为没有高度信息,没有角色的高度信息
    导航网格
        实现复杂,有现成的库使用,但是想要做修改和定制,有点难度
        建立网格的过程比较耗时耗内存,运行时动态阻挡算法复杂
        精度高,适合3D开放地图
导航寻路
    生成导航网格 
        概念
            高度场(HeightField) 根据cell(一般为0.2,0.2,0.2)大小在xyz三个方向切割,由体素构成的对象
            体素(Span) 三维空间的像素
        实现
            首先根据输入文件读取场景信息和生成配置信息
                加载网格信息
                    .gset类型文件是区域标记文件
                        f
                        filename

                        v nverts area hmin hmax
                        %f %f %f
                        s 配置信息 %f %f %f %f %f %f %f %f %f %f %f %f %f %d %f %f %f %f %f %f %f
                        c 代表Off-Mesh信息
                    .obj类型文件是MESH信息文件
                        f代表三角面, %d %d %d
                        v代表顶点 %f %f %f
                初始化配置信息 
                    rcConfig
                        地形配置
                        bmin&bmax           根据输入的网格MESH信息计算出的AABB边界
                        w&h                 根据边界和单位大小计算出的xz平面的单位宽度和高度(也就是xz平面有多少个体素)
                        cs&ch               用户输入的xz平面单位大小,y方向单位大小, 一般为0.2米 0.3米,越小越精确,体素越多,生成速度越慢
                        角色配置
                        walkSlope           坡度大小,角色能在多陡的斜坡上行走
                        agentRadius         角色半径,已转化为单位长度
                        agentHeight         角色高度,已转化为单位长度
                        agentClimbHeight    角色能爬多高的建筑物或者每一步最多跨越多高的距离
                        多边形配置
                        maxVertPerPoly      凸多边形最大顶点数
                        输入网格信息
                        ntris&tris          三角形个数&三角形数组(三个点构成一个三角形,存储了顶点起始下标)
                        nverts&verts        顶点个数&顶点数组(三个表示一个顶点)
            然后创建rcHeightField,最终生成了一个rcSpan二维数组(障碍物集合),并记录了每个体素上边界是否可行走,smax,smin
                创建高度场并初始化
                    rcHeightField
                        bmin&bmax           从配置里读取的AABB边界
                        w&h                 从配置里读取的xz平面宽高
                        cs&ch               从配置里读取的每个单位x、y、z方向的单位大小
                        spans               从配置里读取宽高然后分配好的XZ平面的体素二维数组,大小为sizeof(rcSpan*) * w * h
                标记输入三角形区域ID
                        m_triareas          输入的三角面的区域类型,初始化为RC_NULL_AREA(不可行走)
                        nomal               每个三角面的法线,单位化之后Y值正好等于三角面倾斜角的cos值
                        倾斜角小于最大行走倾斜角度时标记为可行走区域 RC_WALKABLE_AREA(可行走)

                光栅体素化所有三角面,对应于 ********************RecastRasterlization.cpp********************
                        遍历每个三角面,计算其AABB包围盒tmin,tmax(也就是三个顶点的最小xyz,最大xyz)
                        根据包围盒计算zmin=[(tmin[2]-bmin[2])*(1/cs)],zmax=[(tmax[2]-bmin[2])*(1/cs)]
                        for z=zmin;z<=zmax;z+=1 cz=bmin[2]+z*cs
                            切割多边形,每次输入是N个点,输出是上下两部分多边形,最多6边形切割为7个点
                            逆时针遍历所有边,每次把交点(di>=0!=dj>=0,s=dj/(dj-di))和i点加入到输出内,交点两个输出都加入,di大于0加入输出1,否则加入输出2
                        for x=xmin;x<=xmax;x+=1 
                            切割多边形,与上述切割算法一致
                            计算切割后多边形Y方向ymin,ymax,填充x,z处的y方向体素信息(ymin到ymax之间都是实心填充,只包含一部分也算实心)
                            添加体素时计算yminymax相邻区域是否有体素,有就合并,没有则插入新的体素,每个体素包括ymin,ymax,area,next
                        addSpan
                            xz平面每个格子处,y方向从低到高组成一个链表
                            添加结点时没有交叉则直接插入,否则合并当前结点和新增结点并移除当前结点,继续插入
                            根据当前结点和合并后的结点最高点差值和合并参考值选择是否合并area标记

                过滤可行走体素,对应于 ********************RecastFilter.cpp********************
                        根据climbHeight计算Y方向相邻体素距离,如果上一个体素可行走并且当前体素不可行走,相邻体素smax距离小于climbHeight,则标记当前区域可行走
                        for span in yspan do
                            上一个span可行走且当前span不可行走
                            两个span上边界距离小于climbHeight,标记当前span可行走
                        end
                        根据climbHeight计算XZ方向相邻体素距离,如果当前体素周围四个体素有大于或小于climbHeight,则标记为不可行走(悬崖边悬挂物体)
                        for span in yspan do
                            for spand in 四周 do
                                第一个spand下边是空的,此时检查span和spand之间是否有agentHeight的间隙,有则标记span不可行走
                                检查后续spand和span是否可以站人(agentHeight),并且下边界之差是否太大(climbHeight),太大说明是个悬崖,标记span不可行走
                            end
                        end
                        根据climbHeight计算Y方向相邻体素之间的空隙,如果小于agentHeight,说明该体素不可行走
                        for span in yspan do
                            span->smax和span->next->smin的差是否大于agentHeight,否则标记span不可行走
                        end
            接下来要把障碍物空间转化为可行走空间,即生成Y方向相邻的两个Span下ymax上ymin构成的开放可行走Span
                创建CompactHeightfield,只记录上表面即行走面及其与上表面距离的高度场,并记录了与四周的连通性
                    rcCompactHeightfield
                        w&h bmin&bmax cs&ch agentHeight&agentClimbHeight bmax要加上角色高度
                        int spanCount;              可行走Span数量,标记为RC_WALKABLE_AREA的Span个数
                        cells;       二维数组,XZ平面格子, index第一个当前列Span,count表示Span个数,当前列span连续存储在spans内,所属区域记录在reg内(0位空区域)
                        spans;       可行走Span数组,y最低的站立面纵坐标,h距离下一个Span下边界距离,con记录了四个方向邻接Span的index
                        areas        可行走Span标记,默认为空RC_NULL_AREA不可行走
                        dist;        到达边界的最短距离,用于分水岭算法
                    第一步,初始化rcCompactHeightfield结构体
                    第二步,将rcHeightField内的Span修改格式后存储到rcCompactHeightfield内
                    第三步,检测每个cell内的所有span的相邻span,测试其连通性(检查相邻Span是否可以通过一个agentHeight,并且可以一步走上去climbHeight)RC_NOT_CONNECTED

                过滤边界,距离边界太近的Span标记为不可行走 *****************RecastArea.cpp********************
                    遍历spans,如果一个Span为不可行走或者相邻的Span有一个不可行走,则标记该Span到达边界的距离为0
                    检查与周围8个Span的最小距离,XZ轴向距离为2,斜对面距离为3
                    最终距离小于角色半径的全部标记为不可行走
            可选步骤,标记每个span是什么类型的地面
                区域标记 ********************RecastArea.cpp********************
                    Volume是由顶点集合和area标记构成的
                    会检测每个Span在哪个Volume区域内(这里检测的是y方向范围),并修改其区域ID
            可行走空间生成结束,接下来是区域生成阶段
                区域生成算法 ********************RecastRegion********************
                    Watershed partitioning
                        经典算法,有比较好的曲面细分效果,把compactHeightField划分成没有孔洞和重叠的区域,预计算的最好选择
                    Monotone partioning
                        速度很快,可以保证没有孔洞和重叠,但是会产生很多细长的poly,增加寻路消耗
                    Layer partitoining
                        相对快速,分割成不重叠的区域,对于孔洞的处理依赖于输入数据
                        生成结果比第二种要好,但是不如第一种,适合平铺式的navmesh
                经典算法
                    分水岭算法(图像分割)
                        原理
                            基本思想是把图像看做是3D场景,每点的灰度值代表地形高度,谷底及其影响地区称为集水盆,集水盆边界形成分水岭
                            在谷底刺穿一个孔,水从谷底涌出,水位逐渐增高,两个相邻的谷底(区域A和区域B)水位高过中间的峰值就会汇合,汇合点即为分水岭
                            灰度值越低,越趋向于谷底,也就是图像内部
                        实现
                            分水岭计算分为两个步骤,一个是排序过程,一个是淹没过程
                            首先对像素灰度等级从低到高排序,然后在从低到高的淹没过程中,对每一个局部极值在H阶的影响域采用FIFO的方式标注
                    高度图生成
                        边界标记,dist为0
                            遍历每个cell的spans,检查四邻域是否连通,不连通则标记为边界
                        高度生成
                            循环1,从左下角开始计算边界距离,计算左侧四邻域dist,得出距离坐下侧的距离信息
                            循环2,从右上角开始计算边界距离,计算右侧四邻域dist,得出最终距离信息
                        均值滤波(图像降噪处理,会变模糊并丢失细节,但是能够很好地保留边缘信息,用于图像分割、特征提取)
                            针对距离边界距离大于某个阈值的cell执行八邻域加权平均
                            一个邻域连通则2cd,非连通邻域直接加,次邻域连通加cd,非连通直接加
                            对距离图进行过滤方便执行分水岭算法的淹没过程
                    区域生成
                        region project on plane is a simple polygon
                        whtershed isn't perfect,some algorithm is applied to cleanup things up
                            1. island region too small is discarded
                            2. small region unnecessarily are merged into larger region
                            3. null region broken into two regions
                        循环(level > 0) 
                            level是灰度值,初始值为灰度最大值(maxDistance+1)&(~1)_偶数,每次递减2个单位
                            当前处理栈为sID
                            排序:
                                已经标记过的span不参与reg标记
                                当前灰度等级为level>>1(灰度每次处理范围为level/2),span灰度等级为dist>>1
                                如果一个span level差超过栈数量(距离极值太远),则跳过不处理
                                将span所在x,y,i加入到对应level差的栈内
                            标记:分为涌出和扩展两种方式,涌出是新建区域淹没相邻span,扩展是对已有span按照距离扩展
                                遍历当前sID栈上span,清空它的reg标记,每个span只标记一次
                                span所属区域趋向于最近的连通区域中心
                                新建区域只处理两个level和level-2内的
                            过滤:遍历span(x,z,h),向上逐个检查
                                重叠区域,加入到当前span所属区域的floors内
                                connections非空则表示轮廓已找到,不再处理,否则找出与reg相邻的区域信息
                                某个region的span数量低于minRegionArea并且不是边界区域则删除该区域,边界tile
                                合并太小的region,重新生成区域ID               
            轮廓生成 ********************RecastContour********************
                轮廓是指由体素构成的Span的边界信息,边界分为内边界和外边界,外边界是区域边界
                轮廓是由折线(XZ平面)构成的封闭的多边形
                rcContourSet是轮廓的集合,NAVMESH生成的当前阶段结构,包含基本的cs.ch.width.height.aabb.borderSize
                rcContour是轮廓信息,包含简化后的verts nverts和原始的rverts rnverts以及区域IDreg和区域类型area 
                maxError表示简化轮廓时的最大边界误差
                首先,遍历x.y.z-cells,空区域span或者边界span标记为0,否则标记四个方向是否包含连通区域,得出边界信息
                然后,遍历x.y.z.cells,边界span跳过
                        轮廓点生成,从一个外边界方向开始遍历,如果是外边界,则获取高度值,加入轮廓点集内
                        某个方向为外边,处理边界信息,然后则顺时针递增方向,继续判断
                        某个方向为内边,则前进一步,获取前方span,方向回退一步,继续判断
                轮廓每个顶点的Y值都有4个潜在取值可能(相邻的四个span),取最高的Y值,1.确保点在行走面之上,2.确保相邻的轮廓顶点高度一致
                轮廓顶点处于一条直线的中间点会被移除,此处要做检查
                此时轮廓顶点集合内包含很多顶点,而只有区域发生变化的地方的顶点才是必要的,两个区域的边界可以简化为一条直线
                道格拉斯-普克算法,轮廓简化
                    1.已知曲线上两点A、B,AB线段作为曲线的弦
                    2.遍历A到B的曲线上的顶点,找出距离AB线段最大的点C
                    3.比较该距离与给定的阈值threshold大小,去过小于该阈值,则该线段AB作为曲线的近似值
                    4.如果大于该阈值,则将AB分成AC和CB,分别执行上述流程
                    5.曲线分割完毕,依次连接各个分割点,形成的折线是曲线的近似
                    6.分割过程中遇到太长的多边形边,需要分割,避免下一阶段出现细长的三角形
                格林公式面积法
                    1.多边形面积正负可以用于判断环绕方向
                    2.recast内几何采用右手坐标系,这样计算结果才是正确的
                合并内部孔洞
                    1.找出区域内所有的孔洞并按照xz值排序
                    2.遍历每个孔洞,执行合并算法
                        找出最优的分割点(距离最小与其他洞不相交),把外围多边形分割为N个小多边形
                    合并没看到,写的不对 TODO
            导航网格 ********************RecastMesh********************
                1.轮廓的顶点数据是在voxel空间的,坐标点是整数格式,表示距离地面的体素距离,这一步要把它转换到向量空间,坐标转换为原始格式
                2.每个轮廓都是不相关的,这里要把它们合并为一个MESH
                3.轮廓在2D平面是一个简单多边形,包含凸多边形和凹多边形,没有自相交的情况,凹多边形不支持寻路,会被拆分
                4.通过边界的连接信息获取多边形的边的相邻多边形
                rcPolyMesh
                    polys 最终的凸多边形信息(一个轮廓剖分合并后剩下的几个无法合并的凸多边形),数据分为两部分,顶点和邻居
                    regs和areas分别保存region_id和area_type,数量与凸多边形个数一致
                    npolys 当前轮廓生成的凸多边形个数  nvp保存每个凸多边形顶点数上限
                    maxpolys 是根据轮廓顶点数算出来的三角形最大个数    
                    verts 经过去重的轮廓顶点信息
                    nverts 经过去重的轮廓顶点个数
                    bmin&bmax AABB cs ch 宽高 borderSize指定边界
                三角剖分
                    遍历轮廓,每三个顶点一组,检查是否能够成一个内部三角形
                    分析所有的分割情况,选取分割边长度最短的,把拆分后的三角形记录下来
                    对剩余的顶点重复这个过程
                    所需临时变量 
                        tris(maxVertsPerCont*3,每个顶点都要作为起点生成一个三角形,记录了剖分结果)
                        indices(maxVertPerCont,标记每个顶点是否生成过三角形)
                        cont&cont.nverts&cont.verts(要处理的轮廓&顶点数&顶点数组)
                    相关算法
                        内角法判断两个顶点连线是否为有效的分割边(朝向多边形内部的角成为内角)
                            i-1 i j k,首先判断i是凸点还是凹点,凸点只需要判断在不在夹角内部,凹点判断不在夹角内
                        边界法判断这个对角线是否和多边形相交
                    可能情况
                        轮廓简化操作把多边形简化成了一条线
                        有两条边重叠
                多边形合并
                    合并过程
                        1.找出所有可以被合并的多边形
                        2.在这个列表内找出共享边最长的两个,合并他们
                        3.继续操作1.2.直到没有可以被合并的多边形为止
                    合并条件
                        1.有共享边(检查共享边和合并多边形比较简单)
                        2.合并之后是凸多边形(内角判断)
                        3.合并之后边的数量不超过maxVertsPerPoly设置的上限
                    凸性检查
                        1.对共享边的两个顶点分别取前后顶点(合并后的前后),计算夹角是否为锐角(toleft测试)
                        acute 锐角 obute 钝角
                边界过滤
                    首先检查某个顶点是不是边界顶点,然后检查移除之后剩余的边个数是否构成多边形
                邻接信息
                    第一次遍历,记录下每条边的起始点和所属多边形,邻接多边形默认等于自己,邻接边为空(顶点从小到大,环绕方向一致,肯定无共享边)
                    第二次遍历,顶点从大到小,环绕方向一致,此时边的方向是反的,会遇到共享边,记录在edge内
                    遍历每条边,检查正向和反向的两个多边形是否不相等,是则记录邻接多边形(哪条边,哪个多边形)p[vertsPerPoly+e.polyEdge[0]] = e.poly[1]
            高度细节 ********************RecastMeshDetail**************
                1.如果原始网格是投影到2D平面的,那么生成的MESH和原始MESH是重合在一起的
                2.如果原始网格是3D网格,就需要生成高度信息
                    完成这一步需要遍历每一个多边形(PolyMesh),在和原始MESH高度偏差较大的边上新增顶点
                3.从路径搜索的角度来说,高度细节不是必要的,凸多边形是寻路算法的唯一输入,PolyMesh已经有足够的信息用于搜索
                  高度细节一般用在需要把角色放在NAVMESH上,实际上Detour库只使用PolyMesh用于寻路
                    高度细节太多会占用较多的搜索时间和内存
                5.主要步骤有3          
                    rcPolyMeshDetail
                        meshes&&nmeshs  细节多边形及个数信息,一般是三角形
                        verts&&nverts   新增顶点信息及个数
                        tris&&ntris     三角形顶点索引及个数
                    1.生成HeightPatch
                        遍历每一个凸多边形,生成bounds信息(xmin,xmax,zmin,zmax),也就是凸多边形的XZ平面AABB
                        同时计算出凸多边形在XZ平面的XZ范围,也就是xmax-xmin和zmax-zmin的最大值
                        hp.data = new data[dx*dz]; hp.xmin=xmin; hp.zmax=zmax;  hp.width=xmax-xmin; hp.height=zmax-zmin;
                        遍历AABB范围内的CompactCell的每个体素,获取相同区域的最大高度并填充hp.data对应位置
                        queue保存已设置高度的cell,遍历queue检查四邻域cell是否设置过高度,没有设置过说明区域ID不相同,根据连接的cell设置高度
                    2.采样多边形边界添加顶点,根据height patch data得出的距离超过contourMaxDeviation的地方
                        detailSampleDist控制采样间隔  detailSampleMaxError控制高度阈值
                        把每条边分成N个采样点,在每个采样点处通过hp的高度得出一系列新点,如果新点的高度和原始边高度差超过阈值,则这个点作为这条边的新增点
                        对分割后的边重复这个过程直到每个采样点的高度误差低于阈值
                    3.对多边形执行三角剖分
                        先执行三角剖分,从一个三角形边长最小的三角形开始分割,左右逐渐递增,检查左侧和右侧递增后的三角形边长,选最小的生成
                        剖分结果可能类似于一条折线
                    4.采样多边形内部添加顶点,根据height patch data得出的距离超过contourMaxDeviation的地方,新增顶点需要重新剖分
                        sampleMaxError控制采样误差
                        首先根据采样间隔在AABB内找出所有有效的采样点
                        然后遍历所有采样点
                            找出距离三角网格大于误差的点,加入到点集内,如果没有超过误差的点,则退出循环
                            对点集执行Delaunay三角剖分,首先把多边形边界边加入到边集内
                            Lawson算法(逐点插入算法)
                                首先对点集建立一个凸包(Graham扫描算法极值点极角排序),也就是建立一个多边形把点都包围起来
                                然后插入一个新点,该点与包围它的多边形每个顶点相连,逐个检查空外接圆性质,并进行局部LOP,通过交换对角线优化最小角
                                空圆特性检查,首先遍历每条边,然后针对每个顶点建立三角形,计算外接圆圆心和半径,再和其它顶点比较
                                圆外的点忽略,圆内的点需要重新计算外接圆,圆上的点,首先检查是否与端点重合,是则跳过,否则重新计算外接圆
                                每条边都有两个连接的三角面,不同方向面ID不同
                    5.相对坐标转换
                        把原始MESH的verts和DetailMESH的verts顶点的相对坐标加上原点偏移得出世界坐标
                        把verts从临时数组拷贝到dmesh.verts;把tris从临时数组拷贝到dmesh.tris
                        dmesh.meshes存储了每个多边形的顶点数和三角形个数
                6.遍历多边形,检查area标记,修改area和flag类型,area可行走则标记为GROUND;公路草地等flag改为WALK,水的flag改为SWIM,门的flag改为DOOR|WALK
            寻路图生成************************DetourNavMeshBuilder*****************************************
                1.参数信息填充
                    dtNavMeshCreateParams
                    verts&vertCount&polys&polyAreas&polyFlags&polyCount&nvp 2D顶点和多边形信息
                    detailVerts&detailVertsCount&detailTris&detailPolys     高度细节顶点和多边形信息
                    offMeshConVerts&&offMeshConRad&&offMeshConDir&&offMeshConAreas&&offMeshConFlags&&offMeshConUserID&&offMeshConCount
                    walkableHeight&&walkableRadius&&walkableClimb&&cs&&ch&&AABB 角色宽高步长及NAVMESHAABB信息
                2.填充BUFFER,写入文件
                    1.计算数据大小(每一部分都是四字节对齐)
                        headerSize  文件头大小           dtAlign4(sizeof(dtMeshHeader))
                        vertsSize   原始顶点数据大小     dtAlign4(sizeof(float)*3*totVertCount) params.vertCount
                        polysSize   原始多边形数据大小   dtAlign4(sizeof(dtPoly)*totPolyCount)  params.polyCount
                        linksSize   原始多边形链接信息   dtAlign4(sizeof(dtLink)*maxLinkCount)
                        detailMeshesSize 细节多边形信息  dtAlign4(sizeof(dtPolyDetail)*params->polyCount)
                        detailVertsSize  细节多边形非重复顶点 dtAlign4(sizeof(float)*3*uniqueDetailVertCount) 每个细节多边形独立顶点的总数
                        detailTrisSize   细节多边形三角形     dtAlign4(sizeof(unsigned char)*4*detailTriCount)
                        bvTreeSize       AABB包围盒树         dtAlign4(sizeof(dtBVNode)*params->polyCount*2)
                        offMeshConsSize
                    2.文件头填充
                        当前tile的坐标和层级以及用户自定义ID
                        magic&version&tileX&tileY&tileLayer&userId 
                        当前tile的各项数据大下信息
                        vertCount&polyCount&maxLinkCount&bmin&bmax&detailMeshCount&detailVertCount&detailTriCount
                        当前tile的OffMesh信息
                        offMeshBase&offMeshConCount
                        当前tile的AABB信息
                        bvQuantFactor&bvNodeCount
                        当前tile的角色参考信息
                        walkableHeight&walkableRadius&walkableClimb
                    3.数据填充
                        把原始顶点的体素坐标转换为世界坐标 bmin+pos*cs|ch
                        把原始多边形的area和flag设置好,遍历每个顶点,检查邻接信息,设置neis信息
                        把OffMesh信息转换为poly,每个OffMesh由两个顶点组成
                        把细节多边形的顶点和三角形填充到大数组尾部
                        构建AABB包围盒
                        把OffMesh的连接信息加入
                3.创建NavMesh运行时数据
                    dtNavMesh
                        m_tileWidth&m_tileHeight&m_maxTiles tile宽高和数量
                        m_posLookup&m_tileLutSize&m_tileLutMask tile哈希查询表
                        m_nextFree&m_tiles tile链表和空闲链表
                    dtMeshTile
                        header&polys&verts&links            原始简单多边形及其顶点和链接信息
                        detailMeshes&detailVerts&detailTris 细节高度多边形及其顶点信息
                        bvTree&offMeshCons                  AABB包围盒及OffMesh信息
                        next                                tile是一个链表保存的最后一个tile指向free(NULL)
                    dtTileRef&&dtPolyRef
                        tile通过x,y计算哈希值保存在lookup表中,相同xy的tile以链表保存
                        tileRef是一个id,有三个位段,salt+it+ip it占用m_tileBits位,ip占用m_polyBits位,salt占用剩余位
                        如果id使用64位,这几个位段长度固定,否则根据tile数量和多边形数量来计算
                    addTile操作
                        1.检查版本号和坐标是否合法,分配一个新的tile或者修复已有的某个tile(这个会在tile形式的生成中用到)
                        2.除去链接信息之外的顶点和多边形直接引用数据内的
                        3.生成链接信息(每条边的链接多边形ID)
                            dtLink ref(邻接多边形ID) egde(第几条边) side(哪个方向) bmin&bmax(与邻接tile的链接边大小(百分比))
                            内部链接:tile内的多边形链接,polyID从1开始,0表示tile本身
                            外部链接:tile之间的链接,首先生成xy相同layer不同的链接,再生成四周的链接
                                首先对每个多边形找出链接标记为DT_EXT_LINK的边(dir标记了链接的五个方向)
                                然后赋值链接多边形和链接边及方向,然后计算和邻接tile链接的边的大小
                                tile之间是互相链接a<->b,tile之间的链接包含8邻域和上下邻域
                                buildPolyMesh的时候如果是以tile形式生成,则poly会有DT_EXT_LINK标记的边界,判断边顶点在哪个边界上可以得出链接方向
                                connectExtLink建立过程:
                                    首先遍历tile的多边形,检测出边界的链接方向与目标一致的边
                                    然后检查这条边与目标tile内部哪些多边形相连接
                                        计算出边的AABB,遍历目标tile的多边形,找出链接方向正好相反的EXT_LINK边(以相反顺序遍历边,确保边的起始点方向一致)
                                        边不在tile相同边界上不是目标边,计算两条边的最小起点和最大终点以及斜率,然后计算最小最大点的Y值,相交的线段被认为是overlap
                                        平行线段检测Y值距离是否小于指定阈值
                                        链接的边有上限限制
                            OffMesh链接:手动添加的远程链接,可以是tile内部也可以是tile和tile之间
            包围盒树**************************DetourNavMeshBuilder*****************************************
                1.首先对每一个多边形生成BVItem,即AABB信息(以体素为单位),然后开始创建BVNode
                2.对多边形数组执行二分法排序,首先计算数组AABB哪个轴最长,对数组item执行快排算法(按照最长的轴数值从小到大)
                3.分别对排序后的数组左右两部分执行二分法排序(左闭右开),结束条件:剩余两个元素,分别赋值node.bmin&bmax&i  
                4.叶字结点i记录了是哪个多边形,非叶子结点记录了子结点数量和子结点最大的AABB
        Tile区别
            1.根据cellSize计算体素数量,每个tile的大小是通过体素个数定义的正方形
            2.遍历每一个tile,执行buildTileMesh,然后移除目标位置上旧的tile，添加新的tile
            3.buildTileMesh流程
                根据tile找出足够把tile包围的mesh(通过borderSize计算),AABB相比Tile本身的AABB会被扩大
                光栅化是根据AABB做碰撞检测找出的
                其它流程和solo模式一致,只不过会传入borderSize做外部区域标记,buildMesh时边界外的会通过移除顶点给Remove掉
        代码分类
            体素:
                rcHeightField                   Recast.h
                rcCreateHeightField             Recast.cpp
                rcMarkWalkableTriangles         Recast.cpp
                rcRasterizeTriangles            RecastRasterization.cpp
                rcFilterLedgeSpans              RecastFilter.cpp
                rcFilterWalkableLowHeightSpans  RecastFilter.cpp
            区域:
                rcCompactHeightField            Recast.h
                rcBuildCompactHeightField       Recast.cpp
                rcBuildDistanceField            RecastRegion.cpp
                rcBuildRegions                  RecastRegion.cpp
            轮廓:
                rcContourSet                    Recast.h
                rcBuildContours                 RecastContour.cpp
                walkContour
                simplifyContour
            网格:
                rcPolyMesh                      Recast.h
                rcBuildPolyMesh                 RecastMesh.cpp
                rcPolyMeshDetail                Recast.h
                rcBuildPolyMeshDetail           RecastMeshDetail.cpp
    寻路相关算法
        距离点最近的多边形内的点
            首先根据多边形ID找出tile和poly,再根据poly偏移找出detailMesh
            根据点到线段距离算法和pnpoly算法判断点到多边形每条边的距离以及点是否在多边形内部
            在内部: 不需要处理,点已经在内部了
            在外部: 遍历找出距离最近的边,把点坐标限制到边上(多边形内部)
            遍历detailMesh的三角形,根据质心坐标算法求出高度(解方程简化) AP = u * AB + v * BC)
            该功能可以拆分为两部分 获取不带高度的距离多边形最近的点和获取多边形内部某点的高度
            OffMesh是两个点构成的poly,在poly内部也就是在线段上
        距离点最近的多边形
            根据中心点和搜索范围查找距离最近的最多128个多边形
                首先:根据中心点和搜索范围得出一个AABB,然后根据AABB计算搜索范围内tile的个数(bminx|y-ox|y)/tw|th (bmaxx|y-ox|y)/tw|th
                然后:遍历所有范围内的tile,遍历这个tile位置处所有layer的tile,在tile内部根据AABB和过滤器查找多边形
                最后:遍历搜索AABB过滤出的所有多边形,计算距离点最近的多边形内的点
                    如果点在多边形内(XZ平面),则计算高度距离d(在多边形下面则距离为0,在上面d等于点距离减去stepHeight)
                    不在多边形内则距离d为两点直线距离
                    找出距离值d最小的多边形和点
            根据AABB在tile内部查找多边形
                有包围盒二叉树:
                    首先根据TILE的AABB和搜索AABB,计算有效的搜索AABB,bvQuantFactor是体素大小的倒数,因为AABB树是以体素格子为单位
                    根据tile计算出polyIDBase(也就是tile_salt+tile_tile+0)
                    搜索BV二叉树
                        如果当前结点是叶子结点并且被搜索AABB覆盖,则检测该多边形是否通过filter测试,是则加入结果列表
                        如果被AABB覆盖或者当前结点是叶子结点,那么node结点加1,否则跳过该子树(node.i存储了该子树有多少结点(以负数存储),node+node.i就是右子树)
                无包围盒二叉树:
                    首先根据tile计算出polyIDBase(也就是tile_salt+tile_tile+0)
                    然后遍历tile内的所有多边形,针对每个多边形执行filter测试然后计算其AABB是否被搜索AABB覆盖,是则加入结果列表
        启发式搜索算法A*
            数据结构
                open
                    node指针构成的数组(以堆排序算法有序),node数据通过指针来引用,open表不存储数据
                堆排序算法:
                    向上调整:因为二叉有序堆父结点一定小于子结点(左右子结点大小无序),因此向上调整只需要判断i和(i-1)/2大小后父结点数据下调即可
                    向下调整:检查左右子结点2i+1和2i+2,选择较小的交换
                node:
                    pos cost total 坐标点 当前消耗 总消耗
                    pidx 父结点idx state结点状态 flags结点标志 id所属多边形ID
                pool:
                    nodes数组 next链表(存储每个哈希位置处的结点链表next) first(哈希表,存储一个bucket内的链表头结点)
                    getNode:首先对polyID进行hash得出bucket,然后在bucket内查找对应的结点,如果没有那么就新增一个结点
                query:
                    startPoly endPoly startPos endPos 起始点和多边形
                    filter过滤器通过area和flag来检测多边形是否合法
                    bestNode bestNodeCost 搜索过程中的当前最优结点
            1.建立OPEN表(有序队列),和CLOSE表,OPEN表插入初始结点
            2.循环.
                弹出OPEN表头结点,插入CLOSED表
                当前结点是目标结点?结束循环
                遍历当前结点的链接结点(首先根据当前结点的polyID找出poly和tile以及它的父结点)
                    检查当前链接多边形是否是目标类型的多边形,不是则跳过
                    从结点数组内找出对应的结点并计算链接边出口点坐标
                        入口点坐标计算
                            首先找出两个多边形的链接信息
                            如果是OFFMESHLINK,那么链接边左右点相同
                            否则检查链接是否是内部链接,是则返回边的左右两端点,否则返回外部链接计算的conarea范围的左右两个端点
                            计算两个端点构成的边的中点作为入口点赋值给node.pos
                    计算到目标点消耗
                        如果当前多边形是目标多边形
                            g=curNode.cost+distance(curNode.pos,neiboNode.pos)*filter.getCost(curPoly.area)+distance(neiboNode.pos,dstPos)*filter.getCost(neiboPoly.area);
                            h=0 f=g+h
                        如果不是目标多边形
                            g=curNode.cost+distance(curNode.pos,neiboNode.pos)*filter.getCost(curPoly.area)
                            因为没到目标多边形,所以朝向当前多边形链接边的中点移动,检测消耗
                            h=distance(neiboNode.pos,dstPos)*H_SCALE
                    如果当前邻接点已在OPEN表或者CLOSED表
                        新计算消耗大于当前消耗
                            跳过处理下一个链接点
                    修改当前链接点的消耗和父结点
                        在OPEN表内
                            修改消耗并排序
                        在CLOSED表内
                            从closed表移除,插入open表
                    根据h值修改当前最近结点,可以根据该结点检查是不是直接到达了目标点,否则是只走了一部分路径
            3.根据查找出的路径点的父结点标记反向找出路径多边形列表
            4.根据查找出的多边形列表和每个多边形的入口点查找路点
                1.把起始点加入结果数组
                2.如果路径内多边形数量大于1,则遍历多边形数组,根据拐点法查找直线路径
                3.把结束点加入结果数组
        Dijkstra算法
            1.建立二维数组V2,存储当前源点到其他点直接距离,不相邻为无穷大
            2.建立数组V1,存储源点到其他点的最短距离,长度为顶点数(多边形数),每个数组对象存储当前最短距离的父结点ID
            3.遍历每个顶点,检查经过该顶点到其他顶点的距离是否会缩短,修改其他顶点的最短距离和父结点,最终可以求出当前结点到所有点的最短距离和路径
            4.算法复杂度O(N^2)
        拐点法寻找最优路点路径
            1.首先找到起始多边形和穿出边的两个端点,连线L、R
            2.找出下一个穿出边左点,连线L',判断L'是否在L、R之间,如果在,则L更新为L',同理找出右点,连线R',判断R'是否在L、R之间,如果在,则R更新为R'
            如果L'R'都在L左侧或者R右侧,则L或R为一个拐点,连接拐点需要判断当前拐点与新拐点之间的线段是否经过了两个不同的区域
            3.继续找出下一个拐点,直到目标多边形
        射线法判断目标点是否直接可达
            1.遍历初始多边形每条边,判断与射线AB是否相交(判断AOP BOP是否同向,同向不相交)
            2.通过穿出边找出下一个多边形,继续上述判断,直到碰到不可穿出区域或者到达目标区域
            3.计算和多边形相交时会返回两条相交结果,如果是一个,那么这个多边形就是最终的多边形
            4.需要记录与各个多边形的相交点,因为如果按照这个路径移动,需要多边形的area信息来处理移动行为
        多层NAVMESH寻路高度
            首先使用findPath找出起始点到目标点的多边形路径
            然后使用findStraightPath找出起始点到目标点的拐点路径(此时记录了每个拐点属于哪个多边形,边界点属于下一个多边形)
            然后在移动时通过getPolyHeight获取XZ单次移动之后在当前多边形上的高度
        静态阻挡实现
            方法1,在生成NAVMESH的时候导出.gset,标记三角形网格的区域类型
                area类型包括 POLYAREA_GROUND(地面) POLYAREA_GRASS(草地) POLYAREA_ROAD(公路) POLYAREA_WATER(水) POLYAREA_DOOR(门)
                flag类型包括 POLYFLAGS_WALK(行走) POLYFLAGS_SWIM(游泳) POLYFLAGS_DOOR(门)
                flag和area可以扩展,但是flag最多有16位(ushort类型)
                在寻路时通过dtQueryFilter的includeFlag和excludeFlag来过滤掉不可行走的区域
            方法2,对生成的NAVMESH进行裁剪
                
