UBT编译配置
    Build.cs  
        描述当前模块的生成规则,包括依赖模块、搜索路径、宏定义等等
        依赖模块和搜索路径分公有和私有两种，私有只对当前模块生效
        可以根据目标类型、目标平台、编译方式来设置不同的依赖集合
    Target.cs
        描述当前目标的模块组成,包括目标类型(Editor|Game)、模块列表、全局定义等
UHT文件结构
    头文件    
        CURRENT_FILE_ID  当前文件的唯一名字，在generated.h内定义，是GENERATED_BODY的参数之一
        ?GENERATED_BODY  给当前类添加函数(?前缀由CURRENT_FILE_ID和行号构成)，包括FObjectInitializer构造函数、execNative蓝图函数、ConstructUClass友元函数
        DECLARE_CLASS    当前类的UClass类型声明，包含UPackage路径、StaticClass函数、GetPrivateStaticClass函数(UClass对象构造)、_DefaultConstructor(类默认构造函数)
        DECLARE_FUNCTION 把成员函数包装为静态函数供蓝图调用(BlueprintCallable蓝图可调用 BlueprintNativeEvent蓝图可重载带默认实现 BlueprintImplementableEvent蓝图可重载)
        STRUCT_OFFSET    根据类指针和成员变量地址计算成员变量偏移，使用系统宏offsetof(s,m)来实现(size_t)(&((Class*)0)->Property)
    源文件
        IMPLEMENT_CLASS  定义GetPrivateStaticClass函数，把参数传递给GetPrivateStaticClassBody生成UClass
        Z_Construct_UClass_*    构造UClass对象，先执行基类UClass和当前类UPackage的构造，在执行StaticClass
        Z_Construct_UPackage_*  构造UPackage对象，用来作为当前UClass对象的Outer
        Z_Construct_UFunction_* 构造UFunction对象
    注册流程
        利用静态对象在Main函数之前生成UClass，把UClass对象添加到全局注册表，启动之后分帧执行注册
UE4内存管理
    引用关系
        NewObject UObject独立对象，主动创建后需要使用AddToRoot和RemoveFromRoot来添加和删除引用
        UPROPERTY UObject成员变量，UObject类型对象需要使用UPROPERTY宏标记，通过生成TokenStream来记录引用关系
        FGCObject UObject成员变量，非UObject类型对象需要继承FGCObject并重载AddReferencedObjects来记录引用关系
        SharedPtr 智能指针，TSharedPtr=MakeShareable(new T())
        SharedRef 智能引用，TSharedRef=MakeShared<T>() || this->AsShared()
    内存清理
        定时GC  每隔60秒执行一次引擎分帧GC
UE4启动流程
    LaunchWindows LaunchAndroid LaunchIOS分别定义了对应平台的Main函数
    Main函数内执行FEngineLoop的接口(PreInit Init Tick Exit)
    Init函数内执行GEngine的New、Init、Start
    Tick函数内执行GEngine的Tick
    UEngine.Init->UGameEngine.Init
        创建一个GameInstance,执行Init创建一个DummyWorld
        创建一个GameViewportClient,设置World和GameInstance
        创建一个GameWindow(SWindow),设置窗口各种属性(大小、缩放等)
        创建一个GameViewport(SViewport),设置子控件树(SGameLayerManager->SDPIScaler->SVerticalBox->SOverlay->SUserWidget)
        UUserWidget: SCanvasPanel(AddToViewport时添加)->SObjectWidget(引用UserWidget)->SCanvasPanel(WidgetTree.RootWidget)
        创建一个SceneViewport(FSceneViewport),引用了ViewportClient和SViewport,是一个FRenderTarget,用来处理渲染逻辑
        切换GameMode,创建LocalPlayer,加载DefaultMap,创建PlayerController,创建PlayerCameraManager,创建DefaultCharacter
    UEngine.Tick->UGameEngine.Tick
        Worlds.Tick->Levels.Tick->Actors.Tick->Tickables.Tick->Cameras.Tick->Slates.Tick
UE4动画系统
    LayeredBoneBlend
        按照POSE的权重去混合指定的骨骼及其子骨骼,每根骨骼的混合权重由基础权重和BlendDepth共同决定,BlendWeight=Depth/BlendDepth
    PoseAsset&ModifyCurve
        ModifyCurve结点用来修改输入姿势的Curve数值,PoseAsset是一个由动画资源生成的姿势集合，在动画蓝图中根据权重(输入姿势的Curve信息)计算输出姿势
UE4寻路系统
    ANavMeshBoundsVolume 框选需要生成NavMesh的区域，数据来源是场景内所有的StaticMesh，生成参数在ARecastNavMesh对象上配置
    ANavModifierVolume   对可寻路区域进行修改裁剪，Area成员可以指定此区域的Cost和Flag，可以用来制作主路和开关，Brush成员可以指定Mesh类型，例如Cone、Box、Stair等等
    ANavLinkProxy        非连通区域的连接点，连接点可以指定Area类型，通过该成员可以添加额外标记，例如攀爬
UE4工具扩展
    添加扩展 LoadModule(LevelEditor)->Module.GetMenuExtensibilityManager.AddExtender(把菜单按钮命令扩展信息加到关卡编辑器里面)
    扩展实现 FExtender.AddMenuExtension->FMenuBuilder.BeginSection->AddMenuEntry&AddSubMenu(添加命令)->FMenuBuilder.EndSection
    命令实现 TCommands.RegisterCommands()->UI_COMMOND(定义命令)->FUICommandList.MapAction(绑定操作)->AddMenuEntry
    右键菜单 FAssetTypeAction_Base GetActions GetSupportedClass OpenAssetEditor
    插件扩展 UCommandlet.Main
UE4资源管理
    资源路径 类型'/分区/路径/包名.资源名_类型(_C表示类 _Default表示CDO)
    路径名字 PackageName:/分区/路径/包名 Filename:相对于项目EXE的文件路径(../../../Engine/Content/路径/包名)
    加载类型 PackageName->AsyncLoadingThread->FAsyncPackage->FLinkerLoad->Loader(FileReader)
    加载流程 LoadPackage->QueuePackage->TickAsyncLoading->TickAsyncPackage->CreateLinker->LoadImport->LoadExport->PreLoad(Serialize)->PostLoad
    平台文件 IFileManager->FileManagerGeneric->PlatformFileManager->TopmostPlatformFile(职责链模式,CustomPlatformFile->PakPlatformFile->WindowsPlatformFile)
    材质映射 Material->QualityLevel->ShaderMap->VertexFactory->ShaderType
    PSO缓存
        首次构建
            1.COOK开关: DefaultEngine.ini->[DevOptions.Shaders]->NeedsShaderStableKeys=True
            2.COOK资源: 生成scl.csv(一个Global,一个Project,存放在Project/Saved/Cooked/Platform/Project/Metadata/PipelineCaches/)
        收集缓存
            1.收集开关: DefaultEngine.ini->[ConsoleVariables]->r.ShaderPipelineCache.Enabled=True;
            2.开始收集: r.ShaderPipelineCache.LogPSO 1; r.ShaderPipelineCache.Open FileName;
            3.保存文件: r.ShaderPipelineCache.SaveUserCache 1; r.ShaderPipelineCache.Save; 
            4.停止收集: r.ShaderPipelineCache.SaveUserCache 0; r.ShaderPipelineCache.LogPSO 0; r.ShaderPipelineCache.Close
            5.运行结果: 不同质量等级运行之后在指定目录下生成*.rec.upipelinecache,其中安卓:UE4Game\MyGame\MyGame\Saved\CollectedPSOs  苹果:MyGame\Saved\CollectedPSOs
        合并缓存
            1.拷贝缓存: 把收集到*.rec.upipelinecache存放到同一目录下(例如Build/Platform/PSOCache)
            2.生成配置: UE4Editor-Cmd.exe uprojectPath -run=ShaderPipelineCacheTools expand Build/Platform/PSOCache/*.rec.upipelinecache Build/Platform/PSOCache/*.scl.csv Build/Platform/PSOCache/Project_GLSL_ES3_1_ANDROID.stablepc.csv|Project_SF_METAL.stablepc.csv
            3.COOK资源: 把生成的*.stablepc.csv存放到Build/Platform/PipelineCaches/,执行COOK时生成Content/PipelineCaches/Platform/*.stable.upipelinecache
UE4配置系统
    加载顺序 (引擎)Base.ini->(引擎)BaseEngine.ini->(引擎)BasePlatformEngine.ini->(项目)DefaultEngine.ini->(引擎)PlatformEngine.ini->(项目)PlatformEngine.ini->(用户)UserEngine.ini->(项目)UserEngine.ini
    用户目录 AppData/Local/Unreal Engine/Engine/Config/UserEngine.ini