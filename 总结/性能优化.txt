界面
    字体规范
        公共字体 TTF字体(1个)
    图集规范
        公共图集 2048*2048*(3~4个,1个物品图集,1个通用背景图集,1个通用小图图集)
        功能图集 2048*1024|1024*1024*(3~5) 1024*512|512*512*(不限制)
        功能背景 越少越好,最好没有
        功能图标 使用动态图集,大图单个使用,提供缓存机制
        压缩格式 统一使用ASTC6x6 关闭MIPMAP 关闭READ/WRITE
    预设规范
        图集使用 只能使用公共图集和对应系统的功能图集
        背景使用 只能使用公共背景和对应系统的功能背景
        图标使用 预设上不保留对图标的引用,通过代码动态加载
角色
    身体 LOD0:5000面_3000顶点_1.0_1.0 LOD1:2500面_1600顶点_0.7_0.5 LOD2:600面_500顶点_0.35_0.125 76根骨骼
    衣服 LOD0:1700面_1400顶点_1.0_1.0 LOD1:860面_810顶点_0.24_0.5  LOD2:430面_470顶点_0.19_0.25  31根骨骼(带物理模拟)
    脑袋 LOD0:2200面_1400顶点_1.0_1.0 LOD1:1100面_768顶点_0.08_0.5 LOD2:550面_420顶点_0.07_0.25  87根骨骼(15根捏脸) 
场景
    地形 分辨率 高度图 LOD分块 LOD距离
    植被 密度
特效
    GM命令连续播放特效 检测overdraw或者fps测试性能消耗
    LOD逐级减少视觉元素,禁用粒子发射器可以DrawCall  区分主要元素和次要元素  减少次要元素的粒子数和存活时间
    LOD逐级减少粒子总数,减少存活数量可以降低CPU消耗
    例子贴图去掉没有必要的透明边缘 256x256 128x128
    制作粒子LOD 减少叠加的层数 使用小片替代大范围的片,降低填充率
    降低最大屏幕占比
    Fix bounds
    减小更新频率
    减小粒子LOD切换的侦测频率
    减少同时Spawn粒子的数量

    制作粒子LOD
    减小透明材质复杂度
    减少粒子的发射数量
    使用Detail mode
    简化复杂粒子
    减小Decal开销

    r.EmitterSpawnRateScale
    r.DetailMode
    r.RefractionQuality
    r.MaterialQualityLevel
    fx.QualityLevelSpawnRateScaleReferenceLevel
后期    
    Tonemapping
    AA
    Bloom
    除了以上三个最常用到的PP效果确保关闭不必要的其他PP效果
    PP 材质开销取决于材质复杂度

    r.Mobile.TonemapperFilm
    r.PostProcessAAQuality
    r.BloomQuality
    r.DepthOfFieldQuality
    r.Tonemapper.Quality
灯光
    Render
    *物件的投影会增加Drawcall的数量；
    *通过关闭Stationary和Movable类型灯光的动态投影；
    *通过关闭物件上的Cast Dynamic Shadow标签；
    *通过减小这些灯光的影响半径；
    如果要动态投影尽量使用Spotlight来替代PointLight，方便控制范围；
    *如果是CSM，CSM的距离范围极大影响Drawcall的数量（取决于场景中物件数量），尽量减小CSM的投射距离范围，远处使用静态阴影替代；
    *如果使用Far distance CSM，选择性开启物件的这个属性；
    *如果使用Distance Field RayTrace shadow也需要控制其绘制的范围；
    *模型的Instancing可以减少其投射动态阴影带来的Drawcall开销，但会增加三角面的绘制开销（相对低效culling）；

    GPU
    减少Stationary 和Dynamic lights的使用量
        *这些灯的直接光部分为动态，并有可能投射动态阴影；
        *灯光也可以i使用Detail mode来Toggle是否绘制；
    尽量避免使用Area lights
        *这种光的直接光部分开销较其他类型灯光高；如果使用静态勿需注意
    设置灯光的Max Draw distance
        *此针对Spot和Piont Light；设置距离，在此距离外不画此灯光
    减少Stationary 和Dynamic lights的影响像素的重叠
    最小化灯光影响的范围
        *距离和张角的调整；这里比较trick的地方是可以适当的使用更加线性的衰减值配合更小的半径来达到更大半径+快速衰减类似的照明范围（主要可用来做补光）；
    减少动态阴影开销
        *减少投射动态投影的灯光数量：
        选择性关闭Stationary和Movable类型灯光的动态投影；
        *减小这些灯光的影响半径；
        如果要动态投影尽量使用Spotlight来替代PointLight，方便控制范围；
        *如果是CSM，CSM的距离范围极大影响阴影的绘制屏幕像素数量；尽量减小CSM的投射距离范围，远处使用静态阴影替代；
        同样其他类型的动态Shadow（Far distance CSM或RayTrace far distance shadow）都可以通过调整绘制范围的大小控制i开销；
        *减少CSM层级数量，这主要是阴影精度对效率的影响（尤其手机）；
        *手机开启静态物体对于动态物体的遮蔽（single sample shadow from stationary lights）；这是一种手机上提高角色阴影品质的妥协方案；
        PS：这里仅列灯光端的设置，关卡和资源端设置请参考相关栏说明！
    减少同一个像素blend到的reflection的数量
        *放置Refection capture时减少边缘渐变区域的重叠范围和数量；Box Reflection Capture可以通过设置Box Transition Distance控制渐变区域的范围；
        *手机上物件采样最近Reflection capture，除非打开材质high precise reflection选项，可以最多混合三个反射源；增加开销；
    Fog
        *Volumetric fog: 开销主要取决于分辨率，参考相关CVas参数；（见Scalability栏说明）
    Plannar Reflection
        *同SceneCapture，GPU端的优化来自对于效果及渲染物件的数量的Filter；
    Memory
    减轻Lightmaps
        *使用高品质的Lightmass参数设置以及Build quality设置；这可以提高灯光的品质和精度，弥补低分辨率Lightmap带来的问题；
        *考虑使用Build-Light Info中的工具全局调整Lightmap精度；
        *可适当减小Packed lightmap的尺寸，以减小Pack后的浪费（WorldSettings）；
        *有可能的话使用Static Directional light减少生成直射光Shadowmap；考虑使用全动态灯光；

        排除不需要产生Lightmap的物件；合理设置Lightmap（通过Viewmode来控制其密度）；可适当减小Packed lightmap的尺寸，以减小Pack后的浪费（WorldSettings）；
        有可能的话使用Static Directional light减少生成直射光Shadowmap；考虑使用全动态灯光；考虑Foliage(植被)动态，不使用Lightmap；Grass可以使用地形Lightmap，
        避免单独生成（GrassType中设置）；
模型LOD重用Lightmap；这需要LOD模型在引擎内减面；
    减小Pre-computed visibility数据密度（手机）
    适当调整ICL/VLM的密度
        *WorldSettings中调整；
        *通过Volume调整；
    减少不同的Reflection capture的数量
        *Reflection cubemap无法stream；
        *可以反复使用几个自定义的Reflection cubemap来替代自动捕捉环境而生成的cubemap；
        *需要的话适当减小分辨率（Project settings全局）；
代码
    JobSystem
    DrawCall StaticBatch DynamicBatch
    Physics
    Animator
    UIUpdate
    GPUSkin
    GPUAnim
    GCAlloc
    CacheMiss
    ShaderWarmup
    GameObject.SetPos
    UGUI ReBuild是UI元素重建会导致SendWillRenderCanvases Canvas.ReBatch是多线程的(UI元素变化时整个Canvas要重建)
动态分辨率
    设置分辨率缩放上下限 目标帧率耗时 
    需要渲染API支持 
    Unity通过ScalableBufferManager设置缩放比例 通过FrameTimingManager检测CPU和GPU的耗时
    Unreal通过r.DynamicRes系列命令或者DynamicResolution的API设置缩放比例 目标帧率耗时 开关等等
    根据Screen.resolution读取显示器支持哪些分辨率 可以运行时调整,只支持固定的几个分辨率
渲染
    bandwidth数据带宽
        开启遮挡剔除
            尽可能的把不需要渲染的物体裁剪掉,减少数据传输同时减少计算量
        使用LOD和GPUInstance
            远处的物体用低模和实例化渲染都可以减少数据量,降低shader计算量
        开启MIPMAP
            远处的物体使用更小的纹理,降低纹理带宽
    shader计算复杂度
        使用向量运算
            GPU执行的都是向量运算,float和float4的计算耗时是一样的,尽量合并成向量去做计算和赋值
        减少分支语句
            GPU以wrap来执行shader指令,一个wrap包含N个thread,它们的指令完全相同并且同步执行,遇到分支之后会产生新的wrap
        降低变量精度
            精度越低越好,保证范围的情况下使用最低的精度
        减少采样次数
            访问周期:寄存器(1)->共享内存(1~32)->L1缓存(1~32)->L2缓存(32~64)->纹理/常量缓存(400~600)->全局内存
        降低分辨率
            降低屏幕分辨率可以减少需要计算的像素数,从而降低GPU计算量
    overdraw重复绘制
        像素块
            GPU会以2x2的像素块为单位分配给一个core去执行,每个core包含4个thread,每个thread只负责一个像素
        减少AlphaTest和AlphaBlend
            这两个操作都在ZTest之后执行,开启之后无法进行Early-Z
        开启背面裁剪
            不开启两个面都会渲染
        控制粒子数量
            大量的小物体(粒子、植被、沙石、毛发等待)由于像素块的划分机制会造成严重的overdraw
    tbdr优化
        FrameData拷贝
            尽量减少触发FrameData和FrameBuffer之间互相拷贝的操作
    viewmode
        gameview和sceneview镜头同步 使用overdraw模式查看性能消耗
动画
    骨骼动画
	关键帧    AnimationClip,记录了每根骨骼相对于父骨骼的位置、旋转、缩放
	绑定骨骼  SkinnedMeshRenderer.bones,记录了当前SkinMesh的动画绑定的骨骼
	绑定姿势  Mesh.bindposes,记录了顶点变换到骨骼坐标系下的变换矩阵(bone.worldToLocal * renderer.localToWorld)
	绑定权重  Mesh.boneWeights,记录了每个顶点绑定的骨骼和权重
	蒙皮公式  worldPos = bindWeight * bindBone.localToWorld * bindBone.bindPose * vertex,每一帧先计算动画得出骨骼的变换矩阵,然后根据绑定骨骼和权重计算
	动画融合  连续播放的两个动画衔接的过程
	动画混合  同时播放的两个动画衔接的过程 Pelvis混合下半身 Spine混合上半身 LayerBlendPerBone按照骨骼递归按照比例混合,SlotNode控制输入和Slot蒙太奇的混合
	IK动画
		子骨骼带动父骨骼运动,给定子骨骼的目标位置和上一级父骨骼的朝向,可以根据余弦定理计算出父骨骼的位置
		IKBone:需要移动到指定位置的骨骼 JointBone:IK骨骼的父骨骼 RootBone:JointBone的父骨骼
    捏脸动画 表情用内骨骼 捏脸用外骨骼 额头(左中右) 眼睛(左右) 脸颊(左右) 耳朵(左右) 鼻子 鼻翼(左右) 嘴巴 嘴唇(上下) 下巴
	RootMotion
		ApplyRootMotion开启之后会把根骨骼的位移加到模型根结点上(UE4会在移动组件里添加RootMotion的计算)
	GPUInstance
		烘焙 预先把骨骼动画数据烘焙到纹理中,纹理存储动作每一帧的变换矩阵(root.worldToLocal * bone.localToWorld * bone.bindPose)
		数据 静态网格(T-POSE) 绑定权重(顶点属性4*2,boneIndex|boneWeight) 动画贴图(变换矩阵4*4*boneCount*frameCount) 实例变换(变换矩阵,localToWorldArray)
    变形动画
        顶点数据  需要多套数量相同的顶点数据,只能是静态网格
        插值计算  可以在GPU上用额外的顶点属性保存顶点数据来插值
    动画状态机 曲线动画 分层分块 地面状态.直立.蹲下.趴下 空中状态    逐骨骼分层混合 动画后处理(AimOffset 脚部IK 手部IK)
    动画LOD LOD0:IK、LookAt、表情、脚印、全身动画   LOD1:全身动画简化   LOD2:空动画 
    IK设置 Unity:Layer->IKPass->OnAnimatorIK(layer)->SetIKPosition&&Weight(IKBone,position&&weight)->SetIKRotation&&Weight(IKBone,rotation&&weight)
    SetLookAtIK(weight,bodyweight,headweight,eyeweight) 

    调整Anim Tick 行为
        *Visibiity Based Anim Tick Option控制根据角色是否被渲染和是否使用Montage的条件下来决定动画Tick行为：
        总是Tick Pose；
        当被渲染时Tick Pose；
        当不被渲染时只Tick Montage；
        总是Tick Pose并刷新骨骼；
    调整Update Rate
        *考虑使用Use Update Rate Optimizations (URO)，尤其对于远距离角色；
    降低混合动画的节点数量和复杂度
        *LOD掉不必要的节点（LOD Threshlod）
    减小Rigid body数量
        *考虑多骨骼Share一个Physics body；
    减少骨骼数量
    减少骨骼动画
    减少物理模拟时间
    使用Animation Fast path
    避免角色Bounds的动态更新
    布料参考以下物理碰撞
        *减少布料模拟顶点数量；
        *简化Clothmesh；（也对模拟稳定性有帮助）
        *远距离关闭布料模拟
        *减少布料，使用其他物理模拟替代（rigid body）；
    
    *减少角色部件数量，可以把同种类型部件作为一个模型，通过VC塌陷顶点的方式显示隐藏来达到排列组合；
    *减少角色Basemesh的材质ID数量；
    *通过LOD减少角色材质ID数量；
    关闭小物件（附件）的动态投影；

    *目前支持Skeletamesh的动态合并（FSkeletalMeshMerge），但不支持贴图的动态Atlas；美术制作时需要考虑不同部分重用材质以达到合并优化的目的；另外目前合并操作不支持同时合并更新PhysicsAsset和Cloth
    
    *只有做了模型LOD才能做骨骼LOD；一般从减少手指，脚趾，面部表情等网格面开始；
    *通过模型LOD减少三角面的渲染；
    *4.22+支持Editor内生成SKM的LOD模型；

    *Morph的顶点数量根据有变化的顶点数量来统计，因此尽量排除掉变化极小对结果影响甚微的顶点，保持他们没有变化，以减少顶点变化数量；
    *缩短Morph混合的时间；

    减少skin的顶点数量

    减少动画关键帧数量
    合理选择动画压缩方式
    重用动画资源
    减少长动画

    减少长动画的数量
    重用动画资源
    动画压缩
地形
    *考虑Scale地形，默认是1米一格；
    *考虑手动调整地形LOD的Distribution factor来控制LOD行为；
    *考虑手动控制单块Component的LOD Bias；
    *考虑使用Proxy level 替代地形实际Level大量减少三角面数量；

    *减少贴图采样；
    *减少bend mask的层数（per-component）；考虑在同一图层做材质变化来替代增加混合层数；
    *效果上考虑增加混合细节（通过Splatting mask）;
    *目前不支持地形材质做LOD；

    拆分Components到Steam关卡 *结合Proxylevel减少跳变；
    Weightmap 的压缩
    减少分辨率，层数，压缩Weightmap
        *内容制作上对于包体大小的控制在地形这块挑战在于如何使用更低分辨率，更少层数的地形地表来表现丰富的起伏和地表变化；
        方法如：
        *低分辨率地形通过模型和植被来弥补高频转折处的地形变化的突兀；
        *使用材质变化（利用地形的法线信息，或者自定义低分辨率贴图Mask）来弥补地面层数的限制数量；
        *使用植被变化(通过全局贴图，Perinstance random节点等)来增加地表的丰富程度；
关卡
    Merge actor
        *Merge mesh会增加内存开销以及culling的效益；因此是个平衡，相同材质的物体相加后的面数增加不多就可以考虑merge在一起（300-/材质）；
        *考虑合并位置相似，材质相同的Actors；
        *4.20后Merge Actor工具提供多个Merge选项；比如可以Merge为InstanceMesh；
    Distance Culling
        *合理设置Distance culling volume；
        *Distance culling的数值可以在不同平台Scale(r.ViewDistanceScale)；因此在参数设置时考虑从低端机的参数为基础以增量方式配置高端机，以免对Gameplay产生大的影响；
        *单独设置某些物件的Max draw distance；
        *通过Distance Cull Fade材质节点控制普通Staticmesh Actor被culling时视觉表现，减少突变；
        *通过PerInstancefadeAmount材质节点来控制HISM如植被被culling时的视觉表现，减少突变；
    Ocllusion Culling
        *检查方式： r.VisualizeOccludedPrimitives；
        Freezerendering；
        r.ShowPrecomputedVisibilityCells 1
        *手机上Precomputed visibility volume；确保Statically Occluded Primitives大于0
        *检查模型的bounds范围，尤其是旋转后的大mesh；避免bounds远大于mesh本身，无法被效率的cull掉；
    HLOD合并远距离MESH
        *HLOD可以极大的减少Drawcall数量以及GPU开销，但增加内存和包体，并带来潜在的模型切换跳变问题；
        *HLOD和模型本身LOD结合使用，应用与超远距离物件的合并；避免和模型本身LOD的切换距离冲突；
        *同样可以通过使用Dither LOD Transition来减小HLOD和Basemesh切换时的跳变问题（会增加GPU开销）
    HISM合批
        *可以使用Merge actor工具合成ISM，然后转成HISM（手动添加HISM component，复制黏贴ISM的Instance信息，然后删除ISM）；
        尽量考虑使用HISM component而非普通Staticmesh component生成重复的mesh（如利用Spline component生成Mesh）；
        *HISM的culling以及LOD的Transition的单位（Cluster中Instances数量）可以通过foliage.MinVertsToSplitNode 定义；值越小cluster中包含的Instance越少；小数值减少GPU开销，增加CPU Culling计算开销；
        *模型的Instancing也可以减少其投射动态阴影带来的Drawcall开销，但会可能增加三角面的绘制开销（相对低效culling）；
    SceneCapture
        *尽量减少SceneCapture使用；
        *利用Filter选择性排除减少被渲染物件，减少Drawcall；
    Use Attach Parent bounds
        *把一堆Attach在一起的物件使用其Parent的Bounds作为整个Group的Bounds，减少Bounds的检测数量从而减少对于culling的计算开销，优化initialize view的开销；
    关闭一些增加Drawcall的features
        *Dyanmic shadow;投影增加Drawcall的优化参考GPU栏说明，以及灯光部分的相关说明；
        Custom Depth；

    减少动态阴影屏幕绘制像素面积
        *大面积投影考虑使用烘培静态投影；或者假投影；
        *选择性开启物件动态投影
        **物件层级选择性开启Cast Dyanmic Shadow；
        **如果使用Far distance CSM，选择性开启物件的这个属性；
        **同样如果使用Distance Field RayTrace shadow也可以选择性地在物件层级控制是否开启；
    减小阴影投射物体的面数
        *这个比较容易忽略；也是模型制作LOD带来的另一个好处；
    优化静态物体到动态物体的投影（手机）
        *手机上效率关系静态物体投射到动态物体上的影子默认不计算，可以通过Enable single shadow from stationary light开启利用间接光缓存中存储的遮蔽信息来遮蔽动态角色等；但前提是需要build lightmass（这不适用全动态灯光环境）；
    Detail mode
        *设置actor的detailmode，在不同Scalability情况下控制绘制Primitives数量
    注意大量Mask材质（比如草）投射CSM的开销

    使用stream level减少同时加载的资源
        *通过代码或BP
        *通过World Composition功能
        *通过Level Streaming Volume；
    使用Proxylevel 替代实际level减少实际加载资源
        *主要用来弥补关卡未被加载前地图上相应区域视觉上的缺失；更多高质量的Proxylevel的使用减少实际Level的加载数量和距离，从而减少内存的使用；（会增加包体）
    细小物件可以放在单独关卡减小加载距离
        *物体体积较小，并不影响游戏性的物件；
    减小Pre-computed visibility数据密度（手机）
        World Settings中设置：Visibility Cell Size；
    Navigation
        *注意agent的设置，尽量让体形相近的配置其中最大的agent数据，减少不必要的navdata份数；
    复用模型
        *模块化模型；
        *去除使用频率极低的模型；
        *使用材质变化来增加模型外观变化；
    减轻Lightmaps
        *排除不需要产生Lightmap的物件；
        *合理设置Lightmap尺寸（通过Viewmode来控制其密度）；
        *可适当减小Packed lightmap的尺寸，以减小Pack后的浪费（WorldSettings）；
        *有可能的话使用Static Directional light减少生成直射光Shadowmap；
        *考虑使用全动态灯光；
        *考虑Foliage(植被)动态灯光，不使用Lightmap；Grass可以使用地形Lightmap，避免单独生成（GrassType中设置）；
        *模型LOD重用Lightmap；这需要LOD模型在引擎内减面；

        PS：这里仅列关卡端的设置，灯光端设置请参考相关栏说明！
    r.Detailmode
    r.ViewDistanceScale 以此系数缩放物件的MaxDrawDistance(最远渲染距离)；
    r.staticmeshloddistancescale 
        整体以此系数放缩关卡中模型LOD的切换距离；
        数值越大越早切换，提高效率；
    r.SkeletalMeshLODRadiusScale
        以此系数缩放Skeletalmesh的LOD切换距离
    r.skeletalmeshlodbias
材质
    关闭一些增加Drawcall的材质属性？	
        Translucent Material = 1 pass base
        +2 for distortion
        +1 for bUseLitTranslucencyDepthPass
        +1 for bUseLitTranslucencyPostRenderDepthPass
        +2 for bUsedWithFogVolumes
        Opaque / masked Material = 2 passes base
    MaterialParameterCollection	
        *更新MPC的参数效率大于同时改变多个Material instance中的参数；即如果需要同时改变游戏中大量材质属性考虑使用MaterialParameterCollection
    控制Instruction 数量，避免使用比较费的表达式	
        *费的：sin, pow, cos, divide, Noise
        省的：加减乘， clamp，saturate等

        *目前主流PC上的参考
        50-100 instructions 低
        100-200 instructions 正常
        300+ instructions 高
        500+ instructions 太高
        1000+ instructions 必须考虑减少

        *控制好材质复杂度和材质数量的平衡，避免使用一个巨大的材质覆盖所有需求；可以拆分成相对简单的材质，流程上考虑使用StaticSwitch节点做材质的分支；

        *使用Customized UVs做线性计算，减少计算量（顶点不是非常多时）；

        *考虑Bake Material，把复杂材质信息Bake到最终贴图上（效果可能有差异，并增加贴图量）
    控制采样贴图的分辨率和数量	
        *贴图的采样数量除了实际使用的贴图，还有来自shading model本身需要采样的贴图数量；比如lightmap, reflection；fully rough, unlit都可以减少贴图采样数量；因此使用简单的shading model也可以减少贴图采样；
        *考虑Encode贴图（参考memory栏Encode贴图说明）
	材质LOD	
        *实现方式目前通过对LOD模型更换简化的材质实现（但增加材质切换开销）；
        *材质中的高光对外观影响大；需小心简化；比如简化材质打开了fully rough, 简化了roughness等
        *材质简化后LOD的切换变化可以通过材质Dither LOD Transition来平滑（但又增加材质开销）
	材质品质层级	
        *在同一材质中编写简化版本的材质，通过材质QualitySwith节点实现；配合r.materialqualitylevel使用
	Fully rough	贴图压缩格式（手机）	
        *对于不需要光泽的材质尽量可使用fully rough，大大降低材质的开销（材质贴图采样，instructions等）
	简化透明材质	
        *透明收光材质效果较差，开销很大；透明材质尽量不要受光照，利用unlit模拟，或者使用尽量简单的透明光照模式
	如果不需要fog，去掉材质受fog影响（手机）		
        Disable vertex fogging in mobile shaders(project settings)
	有可能的话Disable Lightmap Directionality（手机）		
        *针对一些Normalmap效果不敏感的材质；这会影响仅有lightmap（间接光）影响区域的Normalmap效果；
	减少透明或者Mask材质（手机）的Overdraw		
        *手机上Mask材质的开销大；
        *模型增加顶点尽量贴合贴图创建；
        *通过创建LOD来减少远处模型叠加的数量；
        *尽量使用Opaque材质，比如草的下半部；
        *优化Vertex animation（树叶/草），比如使用更简单对UV的平移去模拟旋转；
    Share Material Shader code
        Project settings(可能增加loading时间)

    优化非压缩格式贴图分辨率	
        *主要是UI以及一些HDR；
        *VectorDisplacement类型的用于Vertex animation的动画非压缩贴图在手机上对内存和包体开销大，考虑减少使用或去除；
        *考虑UI贴图也给Mip，在不同平台上排除性地设定最高分辨率；
        *根据平台合理选择压缩格式，对内存影响大；
        比如ASTC对压缩比率的可控性大；
    2的幂次方方形贴图（手机）	
        *为高效使用贴图
    复用贴图	
        *设计时考虑贴图的重用性；尤其大分辨率
    减少Shader Premutation数量
        *减少不必要的StaticSwitch的数量；

        *减少不必要的usages（材质的使用场合，比如staticmesh，particle， skeletalmesh等）;如果材质复杂分支之多，可以考虑创建单独的材质给予这些不同的usages；

        *减少材质支持的Feature数量；
        **全动态光照方案的话可以Disable Allow Satic Lighting（Project Settings）；
        **Support Atmosphere Fog（Project settings）；如果不需要可以关闭，以减少Shader数量
        **以下手机上选择性关闭：
        Support Combined Static and CSM Shadowing(如果需要表面同时画静态和CSM阴影，比如地面)；
        Support Distance Field Shadows（是否支持Stationary Directional Light 生成的DF 静态 Shadowmap）;
        Support Movable Directional Light(是否要支持全动态的方向光)；
        Max Movable Point Lights(最多支持动态点光源数量-手机)；
        Use Shared Movable Point Light Shaders(这个选项以Shader的复杂度GPU开销换取Shader生成数量)
    注意非压缩格式贴图的分辨率
        *主要是UI以及一些HDR；
        *VectorDisplacement类型的用于Vertex animation的动画非压缩贴图在手机上对内存和包体开销大，考虑减少使用或去除；
        *考虑UI贴图也给Mip，在不同平台上排除性地设定最高分辨率；
    Encode贴图	
        *多通道放置不同类型信息，注意不同压缩方式各个通道精度，重要信息放到高bit通道；
        *减少带Alpha通道贴图的使用（在手机使用ETC1，2压缩方式下）；
        *考虑去掉Normalmap B通道，或通过材质生成NormalZ(DeriveNormalZ)(内存预算很紧情况下)；
    减少材质数量	
        *规划复用材质；
        *减少Shader Premutation数量（见Packed Game Size一栏说明）：
    Fully rough
    non directional lightmap; 
    high/low reflection; 
    force non-metal
    r.materialqualitylevel
网格
    减少材质Elements(ID)数量
        尽量减少Basemesh的ID数量，实在不行就考虑减少其LOD上的材质数量；
        *资源制作合理规划，常用在一起的贴图尽量拼在一起以便使用同一材质；
        *选择性通过Lerp贴图的方式取代增加材质ID；会增加材质的开销，作为一种思路；对于屏幕上数量大，但无法很好做合批的物件，比如角色等可以考虑
    减少模型LOD材质数量
        *当前渲染的LOD的材质数量影响当前Drawcall数量，因此减少LOD上材质数量有利于减少DC；并且高级别LOD距离较远在品质上也可以接受材质的减少带来的影响；

        *通过去除小区域的单独材质，使用已有材质的同颜色明度区域去做匹配，减小优化材质数量后的差异；

        *这个操作对于Basemesh有大量材质ID的模型开始着手；

        *PS：手动编辑LOD导入引擎会导致LOD模型无法和BaseMesh共享Lightmap
    材质层面可以选择性关闭Cast Shadow
        Mesh编辑器（Static&Skeletal）中材质Section部分操作；不同LOD材质可分别设置；以此减少此mesh放置于场景后产生的Drawcall数量；
    制作模型LOD
        *对顶点渲染和动态投影开销两者都有优化；
        *下一级LOD至少减到上级的一半或以下；
        *使用Quad OverDraw的Viewmode来检查远距离顶点Overdraw,为合理设置LOD提供依据；
        *通过材质Dither LOD Transition材质功能来降低LOD切换时的Popping现象（会增加材质开销）；
        *通过模型LOD上的材质复杂度优化减少材质渲染开销；
        *考虑使用Imposter来替代最终的Cardboard；
    使用Staticmesh替换Skeletalmesh
        *Staticmesh的顶点处理开销小于Skeletalmesh；考虑使用Vertex animation替代相对简单基于bone和Skin的Animation
    外部做好模型Tessellation
        *这是在模型需要Tessellation情况下与使用材质做Tessellation的开销对比而言
    减少使用vertex Animation动画的模型面数
        *比如植被，草，这些在场景中大量放置并产生大量overdraw的物件，如果要动画其顶点，优化顶点数是非常有效的优化；远距离LOD考虑优化掉顶点动画；

    减少UV产生的数据量
        *检查模型UV channel的数量，去掉不必要或者误添加的UV channel；一般情况下为2个Channel；
        *UV能焊的点焊一起
    减少Vertex Color的数量
        *检查VC，清理掉有未被使用或者误导入的VC
    减少顶点数量
        *考虑拆分顶点数量巨大的模型，使用模块拼接组合替代
    模型LOD规则
        *LOD每一级间的面数差异至少一半，太多就需要考虑继续减少面数；
        *去除不必要的LOD，可以利用MinmumLOD设置不同平台最低级别LOD；
        *LOD最好引擎内自动生成，以便重用basemesh的Lightmap，减少Lightmap的数量；
    尽量减少模型的光滑组数量
        *可减少顶点Normal的数据
    注意Mesh Distance field的应用
        *3D texture，上升很快；小心增加Distance Field Resolution Scale参数
    为不同平台设置MinimumLOD
        cook时strip掉不需要的LOD；
物理
    *使用基本Primitives: Sphere, Box, Capsule；
    Use Simple as Complex；
    如果非基本Primitives，尽量简化Collision mesh
    流程上考虑使用LOD，简化制作；

    *设置Collision Channel；
    *设置不需要物理物件为NoCollisoin；
    *选择性开启Query only 或者Simulation(Physics only)；
    *减少角色Simulate Physics bodies数量，考虑多骨骼Share一个Physics body；
    *角色物理模拟考虑轻量化的Rigid body AnimBP节点；
    *Rigid body节点可以做LOD Threashold，高级别LOD关闭模拟；
    模拟完毕及时关闭物理模拟计算（Simulation）；
内存
    代码内存
        table_memory
            数据表需要自定义数据格式,支持分行读取,支持LRU缓存
        gcalloc_memory
            closure_memory
                委托、协程、Lambda函数等最终都会生成一个class对象,传递函数给委托类型时会创建委托对象,每次开启协程都会创建协程对象
            array_memory
                调用某些API返回数组时有内存分配,例如GetComponents Mesh.vertices Physics.RaycastAll ParticleSystem.Start|Stop|Clear
            proto_memory
                协议的收发会分配很多小内存,序列化发送时最好直接写到缓冲区,反序列化尽量支持消息池
            boxing_memory
                params_memory
                    禁止使用可变参数,重载多个函数来替代可变参数
                comparer_memory
                    对值类型做Key相等比较时如果没有实现IEquatable接口,会在比较时进行装箱(默认使用ObjectEqualityComparer来获取HashCode并进行Equals比较,60BGC)
            string_memory
                统一日志接口,区分发布和调试接口,禁止使用..拼接日志
        component_memory
            减少没有意义的Actor、Component的创建,可以稍微降低内存和实例化开销
        rendertexture_memory
            RT绑定的是FB所以无法压缩,对每个RT指定名字以方便跟踪,能干掉的都干掉
    资源内存
        shader_memory
            shader_feature
                只生成bundle内引用到keyword的变体
                使用#pragma shader_feature keyword来定义
                使用[Toggle(feature) ..]在材质上显示该选项
            multi_compile
                生成所有keyword对应的变体
                使用#pragma multi_compile keyword来定义(keyword最多256个,超过这个值会报错)
                使用Shader.EnableKeywords和Material.EnableKeywords开启全局或单个材质的宏定义
            variants
                宏定义太多导致shader变体很多,不仅增加了build时间,运行时由于变体太多增加加载和编译时间并增加内存占用
                shader_fallback:      关闭fallback可以减少变体数量(keyword变少)
                i_preprocess_shaders: 打包后处理阶段,可以实现shader变体的剔除
                shader_variant_collection: shader变体集合(指定包含哪些shader和对应variant),可以用来在启动或空闲时预编译(执行wramup)
        texture_memory
            upload_buffer
                从内存中往显存上传的时候,会先放到一个缓冲区内,缓冲区满了才会上传
            read/write
                开启之后内存中会保留一份
            mipmap
                开启之后内存占用会增加30%,但是可以提高渲染效率(降低显存带宽、提高缓存命中率)
            streaming
                根据poolsize和sceneview情况动态加载/卸载纹理的mipmap,poolsize需要根据机器内存指定或者动态调整
        mesh_memory
            MeshCompression
                降低硬盘占用,开启之后会影响下面两个选项,一般关闭
            OptimizeMeshData
                减小打包包体,打bundle时会剔除shader没有使用到的顶点属性
            VertexCompression
                降低内存占用,降低顶点属性的精度(float->half),针对300顶点以上、未开启R/W的网格生效
            Read/Write Enabled
                开启该选项的网格顶点属性会在内存中存在两份(显存+内存)
            DynamicBatching
                开启之后在打包时会把支持动态批处理的网格的R/W选项开启
            StaticBatching
                开启之后引用同一份网格的对象变成多个实例(引用一个StaticMesh的不同部分)
            SkinnedMesh
                由于骨骼动画需要在CPU端每帧计算顶点位置,会强制开启R/W
            ParticleMesh
                粒子和骨骼动画类似,因为要做位置计算,会强制开启R/W
        animation_memory
            animation_cache&io
                游戏内角色会有很多休闲动作,需要支持动态加载和卸载,支持LRU缓存
            animation_frame
                动捕的关键帧几乎是满帧,需要简化(删除缩放曲线、简化直线帧)
        audio_memory
            dsp_buffer
                FMOD播放声音会先写入到一个BUFFER内,BUFFER填充满了才会播放,太大会导致声音延迟,太小CPU消耗上升
            speaker_mode
                FMOD使用双声道内存会占用两份,最好选用mono模式(默认是stereo)
            fmod_bank
                master.string.bank存储了所有event的路径信息,可以通过getStringInfo获取资源信息(event:* bank:* vca:* bus:*)
                name.bank文件是由metadata|sampledata|streamingdata三部分组成,loadBank时可以指定只加载metadata,sampledata自己控制加载
            audio_format
                音乐:Streaming+Vorbis 音效:DeCompressOnLoad+ADPCM 录音频率:8KHZ
            audio_cache
                2D:1 2D_ONE:1 3D:5 BG:1 CG:2
        video_memory
            video_format
                720P:低码率1Mbps,中码率2Mbps,高码率4Mbps 1080P:低码率2Mbps,中码率4Mbps,高码率8Mbps
                MP4格式:H264视频编码和AAC音频编码 WEBM格式:VP8视频编码和VORBIS音频编码
        bundle_memory
            typetree
                为了做不同版本的类型兼容,开启之后会写入变量类型的信息
            lz4&lzma
                lz4分块解压,lzma是整体压缩,lz4占内存小,解压速度快
            size&count
                每个包多大,什么资源打一个,文件头占用内存是否远小于资源内存
音频
    音频采样 8kHZ:人声 22kHZ:广播 44kHZ:音频 声道:Mono&Stereo 编码:PCM无损1411kbps,AAC有损256kbps,OGG有损128kbps
    音频格式 中长音乐:Streaming+Vorbis 短音效:DeCompressOnLoad+ADPCM
    音频数量 2D:1 2D_ONE:1 3D:5 BG:1 CG:2
视频
    视频码率 720P:低码率1Mbps,中码率2Mbps,高码率4Mbps 1080P:低码率2Mbps,中码率4Mbps,高码率8Mbps
    视频格式 MP4格式:H264视频编码和AAC音频编码 WEBM格式:VP8视频编码和VORBIS音频编码
纹理
动画
阴影
    1.LODGroup
        使用LODGroup组件设置Render列表,根据网格占屏比选择适当的LODMESH,支持淡入淡出(unity_LODFade)
        物体占屏比是通过当前屏幕空间AABB和近平面时物体的AABB的比例值来计算
    2.ShaderLOD
        shader实现多个不同LOD的subshader,LOD越低效果越差但是性能越好,例如PBS有高中低三个版本
        shader.globalMaximumLODLevel设置当前渲染质量,低于该值的shader的pass才会被使用
        shader.maximumLodLevel设置特定shader的渲染质量
    4.ParticleLOD
        prefab级别的LOD:按照LOD距离或者平均帧率来计算出当前prefab应该用哪一级LOD,每隔一段时间检测一次
        system级别的LOD:指定每个ParticleSystem所属的LOD级别,LOD变更的时候进行比较
    4.QualityLevel
        运行时通过修改Unity的渲染配置,来提高质量或者降低消耗,通过QualitySettings.SetQualityLevel调节
        渲染
            PixelLightCount Important模式一定是逐像素的,Important个数小于指定个数会选取Auto模式的作为逐像素光源
            TextureQuality  降低显存占用(0级MipMap,贴图R/W一定要关闭),FullRes是完整分辨率,HalfRes是一半分辨率
            AnisoTropicTex  各向异性纹理采样是否开启,开启之后远处的细节会变清晰,PerTexture会使用贴图的设置,ForceOn会强制设置所有贴图
            AntiAliasing    MSAA抗锯齿的采样点个数,可以是2x、4x、8x,需要配合Camera的MSAA选项使用
            SoftParticles   开启之后粒子会计算深度差dz来柔化边缘(当粒子距离物体特别近的时候穿插不会出现硬边),计算需要深度图
            Resolution      通过ScreenAPI设置渲染目标分辨率或者自定义RT作为渲染目标或者使用Camera的动态分辨率选项
        阴影
            Shadows          软阴影会多一步模糊操作,可以减弱锯齿
            ShadowDistance   距离摄像机的深度值低于该值时使用实时阴影,同时该值会影响划分阴影层级的范围
            ShadowNearOffset 直接使用8个顶点计算时可能会导致更外面的物体没有产生阴影(比如高大的建筑物在视椎体外面)
            ShadowCascades   把观察体划分为N个等级,每个等级根据8个顶点和平行光方向计算正交摄像机的AABB,提高近处物体的阴影深度的精度
        其它
            BlendWeights     蒙皮顶点最多受几根骨骼影响,减少该值可以降低蒙皮计算量,提升CPU性能
            VSyncCount       关闭后Unity会全速跑Update,否则会根据同步方式sleep一段时间在执行Update,高帧率可以减少消耗
            LODBias          不同LOD级别之间切换的偏移比例,设置为1在LOD边界立即切换,数值越大高模保留距离越大
            MasterTextureLimit 强制指定最高MIP等级
        加载
            AUPTimeSlice     渲染线程每帧上传数据的时间片,会消耗2倍该时间用于上传,默认值是2ms
            AUPBufferSize    主线程传递数据给渲染线程的RingBuffer大小
    5.GraphicsTier
        阴影
            CascadedShadows  级联阴影,根据摄像机观察范围划分N个等级分别使用不同的深度图,提高近处物体的精度
        HDR
            UseHDR&HDRMode   HDR模式总开关,HDR模式摄像机渲染帧缓冲的格式,FP16是64位,R11G11B10是32位不带A通道
                                开启后会额外创建一个缓冲区存储HDR计算结果
        反射
            BoxProjection    视线向量的起点不在Cubemap中心,因此需要经过计算转换为正确的采样向量
LOD
    场景 shaderLOD waterLOD grassLOD treeLOD terrainLOD thingsLOD npcLOD effectLOD lightModelLOD shadowLOD postLOD(bloom colorgrading hdr dof tod fog weather)
    角色 shaderLOD modelLOD shadowLOD animLOD visibleLOD dynamicBone lightProbes ReflectionProbes
    特效 countLOD(priority quality costlevel)
    音效 countLimit
    物理 fixedDeltaTime
    DPI  resolution
    GenerateLightmapUV
        HardAngle 三角面之间的角度大于该角度会被切割,在光照图上不连续,88度针对机械 180度针对有机体
        AngleError 提高表面的光照连续性
        AreaError
        Margin    UVChart添加间隔,避免重叠,避免双线性采样导致的错误
        ScaleInLightmap 在光照图中的缩放比例,降低像素占用
        MinLightmapResolution 默认使用LightSetting中的分辨率设置,低于该设定值时使用该分辨率
    UCChart
        MaxAngle    同HardAngle
        MaxDistance UVChart之间的距离低于指定值会被合并成一个
        IgnoreNormals 降低邻接面接缝问题(光照不连续),也可以用SeamStiching技术降低接缝问题
        MinChartSize  删除细节可忽略的三角面,降低光照图占用
画质
    分数计算 模拟器->设备->CPU->GPU
    设备等级 特殊机型->GPU型号->默认等级
    低画质 DisableShadow
    中画质 ShadowMask MediumResolution HardShadowOnly StableFit
    高画质 DistanceShadowMask.40 HighResolution HardAndSoftShadow StableFit
    顶级画质 DistanceShadowMask.80 VeryHighResolution HardAndSoftShadow CloseFit FourCascades(5.7 13.3 26.7 53.3)
烘焙
    Cluster  unity先进行体素化然后对体素进行光照计算,IndirectResolution决定体素的多少,和光照图大小无关,调试阶段可以降低
    AO       调试阶段可以关闭AO生成,提高迭代速度
    LightmapParamters  提高烘焙速度Resolution-0.2 ClusterResolution0.4   Resolution-3 ClusterResolution0.6  只影响计算精度,不影响光照图大小和UV分布
    Lightmap 分辨率决定了1米多少个像素
    UVChartingControl  修改物体在光照贴图上的UV分布

    Mixed光源  根据场景原画设定灯光强度和颜色、根据原画阴影设定方向
    Baked光源  只有主光源会有很多暗角,色调单一  补光平行光光源最好一个,太多不真实,  建议用ColorGrading和Lut来处理

    球谐光照适用  结构复杂的小物件 颜色单一  UVChart分布不合理
    低画质可以降低lightprobe数量

    ReflectionProbe 256Bake 禁用Blending

    大场景拆分 避免同一物体占用不同的lightmap
灯光
    模型烘焙质量
        LightmapParamters  
    模型缩放比例
        ScaleInLightmap    粗糙非金属墙面,主要是低频光,0.5  城市街道3 野外大面积地形植被0.5 主体物件2
    光照贴图大小
        LightmapResolution 每米几个像素,数值越大质量越高内存也越大,地形0.1~0.5,室外0.5~1,室内2~3
        LightmapPadding    图元之间的像素间隔,避免不同图元由于采样算法导致混合了不同物体的光照颜色(光照溢出)
        LightmapSize       控制每张贴图最大多大,超过这个数值会生成多张
        DirectionMode      是否生成间接光的贡献度最大的光方向贴图,可以制作出间接高光效果
    光照贴图质量(样本是不是指光源发射光线的数量?)
        Bounces            光线反射次数
        EnvironmentSamples 控制环境光样本数量                                            调试阶段可以降低
        DirectSamples      控制直接光样本数量(在光源方向上采样的光线数量)                 调试阶段可以降低
        IndirectSamples    控制间接光样本数量(在半球方向上采样的光线数量,室外推荐值为100) 调试阶段可以降低
        IndirectIntensity  控制间接光整体强度
        AmbientOcclusion   控制间接光的AO效果  调试阶段可以关闭
        AlbedoBoost        控制间接光反射比例,默认值1是物理精确的
        Filter             模糊图片,减弱光照贴图噪点
    环境光照
        有三种模式,固定颜色、渐变颜色、天空盒,用来计算路径追踪没有碰到光源时的光照颜色
    环境反射
        Bounces            控制镜子类的物体互相反射最多反射几次
光照探头
    LightProbe
        数据存储
            LightmapSettings.lightProbes.bakedProbes
        自动摆放
            探针应该摆放在发生亮度变化的位置,可以沿着寻路图大量设置LightProbe,然后过滤掉变化不大的
        实时补光
            不要用补光的方式来提高角色亮度,可以在LightProbe中添加环境光来提高动态物体亮度
    ReflectionProbe
        给所有物体提供间接反射光,动态的间接高光
光照模式
    Realtime
        直接光实时计算,阴影使用ShadowMap计算(ShadowMap只计算ShadowDistance以内的动态对象)
        RealtimeGI计算静态物体表面所有可能的反射光线,运行时动态计算间接光
        IndirectMultiplier在强度不是0并且不开启RealtimeGI时会把间接光烘焙到LightMap
    Mixed
        BakeIndirect
            直接光实时计算,间接光存储在LightMap和LightProbes,阴影使用ShadowMap计算
        ShadowMask
            直接光实时计算,间接光存储在LightMap和LightProbes,阴影使用ShadowMask(最多4个Mixed光源,存储直接光被静态物体遮挡信息)
                            动态物体Receive     静态物体Receive
            动态物体Cast    ShadowMap           ShadowMap+ShadowMask
            静态物体Cast    ShadowMap           ShadowMap+ShadowMask
    Baked
        直接光、间接光、阴影烘焙到LightMap和LightProbes,只对静态物体生效,LightProbes对动态物体生效
渲染路径
    Forward
        MESH->VS->FS(光照计算)->FRAME_BUFFER
        ForwardBase: 
            #pragma multi_compile_fwdbase
            计算自发光、环境光、主平行光、SH光、光照贴图、阴影
            Unity中设置为NotImportant的光会被按照逐顶点或者SH处理
            逐顶点光照计算 Shade4PointLights(...) unity_4LightPosXYZColorAtten
            球谐光照计算 
        ForwardAdd:  
            Blend One One 
            #pragma multi_compile_fwdadd
            计算额外的逐像素光源,AddPass会根据照亮该物体的光源数量被执行多次
            照亮每个物体的逐像素光源个数有限制,Unity会根据光源的类型及对物体的影响程度(距离、强度、类型等)进行排序
            _LightColor0和_WorldSpaceLightPos0存储当前逐像素光源的颜色和位置
        光源信息
            Unity会根据当前光源类型为PASS的执行设置对应的光源属性 位置、颜色、衰减纹理、变换矩阵
            获取光的方向 
                UnityWorldSpaceLightDir(i.worldPos)
            获取光的颜色 
                _LightColor0
            获取光的衰减 
                平行光为 atten=1
                其它类型 
                        lightSpacePos=mul(_LightMatrix0,i.worldPos).xyz 
                        attenUV=dot(lightSpacePos,lightSpacePos).xx
                        atten=tex2D(_LightTexture0,attenUV).UNITY_ATTEN_CHANNEL;
                直接获取 
                        UNITY_LIGHT_ATTENUATION(atten,i,i.worldPos)
    Deferred
        第一次渲染
            不计算光照信息,只进行深度测试,光照相关数据写入G-BUFFER(坐标、法线、UV、反射系数等等)
        第二次渲染
            遍历屏幕像素,针对有效的像素点读取G-BUFFER数据进行光照计算,更新颜色缓冲区
            Unity默认使用Standard光照模型来计算,Internal-DeferrredShading.shader
        计算流程
            MESH->VS->FS(无光)->MRT(深度、法线、颜色三个BUFFER存储光照所需信息)->FRAME_BUFFER
        GBuffer信息
            RT0,存储漫反射颜色,A通道未使用
            RT1,存储高光反射颜色,A通道存储高光指数
            RT2,存储法线方向,A通道未使用
            RT3,存储自发光+光照贴图+反射探针
    ShadowCaster
        渲染阴影映射纹理时调用该shader,没有会调用Fallback的对应shader,否则不产生阴影
堡垒之夜优化列表
    建筑   DHLOD ProxyHLOD
    植被   HLOD Impostors
    草地   DensityScale WaveAnimScale
    地形   地表层数限制 
    场景   合并物件 3~4级LOD 
    剔除   r.ViewDistanceScale逐平台调整视距  DetailMode剔除装饰小物件
    阴影   HISM DistanceField
    角色   角色4级LOD 武器3级LOD 动画LOD去掉手指、脚趾、表情等 灯光LOD
    特效   ExplicitDetailModes NoMorphTarget 材质重用 关闭环境特效
    材质   
    贴图   Streaming Mipmaps 图集