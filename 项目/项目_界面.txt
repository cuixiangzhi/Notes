NGUI源码分析
    事件系统
        UICamera&UIEventListener&EventDelegate
            ignoreAllEvents 所有NGUI事件的开关
            isOverUI 是否触摸到了NGUI组件
            hoveredObject 触摸对象
            currentTouch 当前触摸信息,包括lastPos&pos&delta
            currentTouchID 当前手指ID,-1表示左手,-2右手,-3滚轮
            CountInputSources() 触摸数量
            selectedObject
                当前选中的对象,通过set触发OnSelect事件
            Update检测并转发事件
                检测Touch事件
                    通过引擎API获取触摸点个数,Input.touchCount
                    遍历每一个触摸结构体,Input.GetTouch(i)
                        获取触摸状态、位置、个数、手指ID,更新对应的MouseOrTouch结构
                        Began或者第一次创建该ID的touch则属于press状态,Cancel或者End属于unpress状态
                        遍历每一个UICamera,检测点到的物体,如果没有则赋值为默认值(由该物体来接收事件)
                            首先检测触摸点是否在视口内,并发射UI摄像机的cullingMask的射线
                            遍历碰撞到的N个对象(根据事件检测类型UI_2D(检测collider2d)UI_3D(检测layer))
                                检查UIWidget或者UIRect组件,alpha值为0或者不可见则跳过检测
                                计算碰撞到物体的深度(如果没有UIWidget则获取子物体,子物体没有返回0,即最低深度)
                                加入到碰撞物体数组并按深度从大到小排序,找出第一个可见的对象
                        ProcessTouch(press,unpress)
                        unpress则移除当前touch结构,当前touch置空
                    鼠标和手指的触摸范围不一样,乘上各自的比值后在计算触摸或者拖拽开始的下限
                    如果当前touch的press对象非空,则优先处理release在处理press,否则反着处理
                        处理release事件
                            press对象非空
                                当前处于拖拽状态?发送DragOut和DragEnd事件
                                发送OnPress退出事件
                                如果是鼠标事件并且press包含Collider,则触发OnHover事件
                                如果当前拖拽对象与按住对象相同,则处理OnClick(必定触发)和OnDoubleClick(0.35秒内触发)事件
                                否则触发OnDrop事件
                        处理press事件
                            press为true且press对象非空
                                触发OnPress进入事件和OnSelect事件
                                修改hoveredObject&pressed&dragged为当前触摸对象
                            press为false且press对象非空
                                当前触摸对象与初次press对象不一致或者拖拽了一定距离,则触发OnDragStart及OnDragOver事件
                                last和current不一致,则触发OnDragOver和OnDragOut事件
                                触发OnDrag事件
                检测Mouse事件(PC端touch事件不触发)                 
                    与Touch一样发射线检测碰撞对象,修改currentTouch状态
                    然后ProcessTouch(press,unpress)
                    鼠标左右中事件会同时检测
                    Touch和Mouse的位置信息都在currentTouch内,pos及delta、fingerId
                    先执行UICamera.onXX回调,在给触摸对象发送事件
                    每个事件触发时通过currentTouchID区分不同的手指ID
            LateUpdate检测屏幕大小变化并转发更新锚点事件UpdateAnchors
        EasyTouch
    输入管理
        UIInput
            Init
                记录label的默认文字、颜色、对齐方式,记录label的局部x坐标
            OnPress
                计算触摸点处字符的位置作为selectEnd
            OnDrag
                计算触摸点处字符的位置作为selectEnd
            OnSelect 
                监听onPress事件,处理输入状态的进入和退出
                OnSelect
                    关闭label的encoding,输入时不处理NGUISymbol
                    编辑器模式下添加UIInputOnGUI,监听鼠标和键盘事件
                    记录选中帧 mSelectTime = Time.frameCount; mSelectMe = Time.frameCount;
                OnDeselect
                    mKeyboard 清理
                    如果输入为空,则修改为默认值、默认颜色、默认对齐方式
                    修改输入法组合模式为Auto
                    UpdateLabel
            Update
                如果未处于选中状态,则不做处理;移动端,检查输入键盘是否已打开;选中后第一帧修改selectStart和selectEnd位置为选中位置或者鼠标点击位置
                移动端
                    修改输入法hideInput标记,修改selectStart和selectEnd为文字尾部
                    打开输入键盘TouchScreenKeyboard.Open(defaultText,keyboardType,autocorrection,multiline,secure,alert,textPlaceholder,characterLimit)
                PC端
                    打开输入法组合模式(支持中文输入)并修改selectStart和selectEnd为鼠标点击位置
                    UpdateLabel
                移动端
                    keyboard输入完毕则取出keyboard的字符串赋给value
                    如果输入完毕并且不是取消输入则执行Submit
                PC端
                    取出ime = Input.compositionString,当前输入的字母
                    inputString非空时遍历插入有效字符
                    ime和inputString都非空时记录lastIme并执行UpdateLabel,此时输入有变化
            UpdateLabel
                如果当前文本和当前输入都是空的,processed = "";否则processed = value
                计算left字符串 math.min(selectstart,selectend,processed.length)
                加入新增字符串left+(如果inputString为空或者ime=inputString,此时输入中文尚未结束,返回空字符串,否则返回ime字符串)
                加入right字符串
                如果label的选项标记为 ClampContent && maxLine==1,则计算CalculateOffsetToFit得出能渲染最后一个字符的字符偏移,截取字符串
                修改label.text为processed字符串
                计算输入位置,闪烁输入图标
            GetLeftText__GetRightText 获取selectStart和selectEnd限定的子字符串,注意start和end的有效性及其大小
            ProcessEvent
                PC端有效,处理回车、空格、删除、回退等等事件
    基础组件
        UIRoot
            UI摄像机Camera.size为高度size,也就是高度为2
            屏幕真实宽高比为Screen.width:Screen.height
            自定义宽高:manualHeight manualWidth
            自适应:
                UI制作的基准分辨率为16:9(1334:750或者1365:768)
                UI摄像机的窗口大小高度为2,宽度为2 * Screen.width / Screen.height = 2 * aspect
                如果目标机器分辨率小于等于16:9
                    此时UI缩放后的宽度与摄像机窗口宽度相等,缩放比值为 2 * aspect / 1334
                    此时摄像机窗口上下会留下空白区
                    半屏UI可以自己执行额外缩放保持UI高度填满屏幕
                如果目标机器分辨率大于16:9
                    此时UI缩放后的高度与摄像机窗口高度相等,缩放比值为 2 / 750
                    此时摄像机窗口左右会留下空白区
            安全区
                iPhoneX有一个安全区的概念,屏幕周边有一圈是无法点击的只能显示
                角落的UI锚点需要设置在安全区之内,否则无法点击
        UIPanel
            widgets__drawcalls
                当前Panel下的所有UI和所有drawcall
            sortingLayerName__sortingOrder__startingRenderQueue__depth__alpha
                控制当前panel的渲染顺序
                新版本NGUI useSortingOrder默认值为false,只有在编辑器修改后才会生效
            clipmode
                裁剪模式,一般用到其中三种,不带裁剪None、带虚边的裁剪SoftClip、不带虚边的裁剪ConstrainButDontClip
            clipRange__clipOffset__finalClipRegion__clipSoftness
                裁剪区域大小xy(中心)zw(宽高) 
                裁剪区域偏移xy
                裁剪虚边界xy,四周有几个像素的虚边
            localCorners__worldCorners
                panel四个角顶点坐标
            SetDirty重绘当前panel下所有drawcall
            AddWidget__RemoveWidget
                添加移除UI,添加时给该UI找一个合适的drawcall(可能是新建的也可能是合并的)
                mUpdateScroll标记会被置为true,lateupdate是会刷新滚动条
            LateUpdate
                UI组件刷新入口,会遍历所有UIPanel并刷新所有UIDrawCall,每帧每个panel一次
                panel数组是按照depth排好序的(没有按照sortOrder排序,sortOrder是按照数组顺序指定的,除非自定义sortOrder)
                首先每个panel执行UpdateSelf,此处只是根据UI组件的当前状态修改drawcall数据
                    UpdateTransformMatrix
                        根据transfrom.hasChanged,修改worldToLocal矩阵,根据clipOffset、clipRange修改minxy和maxxy
                    UpdateLayers
                        panel的layer变化时修改widget的layer和drawcallobj的layer
                    UpdateWidgets
                        遍历widgets,针对每个有效的widget执行更新操作
                            首先UpdateTransform,检查widget是否发生了位移,是则计算其alpha可见性和panel可见性
                            其次UpdateGeometry,重建其顶点数组或者修改顶点变换矩阵,widget的mChanged标记UI是否发生了显示属性上的变化
                                有变化则标记其drawcall为dirty
                    根据Rebuild标记判断是否需要重建整个panel
                        OnEnable、移除DrawCall头尾的UI、在drawcall的深度范围内插入一个不同材质贴图的UI都会导致整个个panel重建
                        重建时先移除所有的UIDrawcall,在对widget排序,遍历widget重建drawcall,相邻的widget材质贴图shader一致的合并使用同一个drawcall
                    不做重建时,刷新所有dirty的drawcall
                        FillDrawCall-->WriteToBuffers->UpdateGeometry->MeshSet->ClearVerts
                        无效的drawCall会被移除

                然后每个panel执行UpdateDrawCalls,起始renderQueue是累积的,按照panel内drawcall个数
            CalculateConstrainOffset
                已知显示区域为clipRange+clipOffset,计算出其minArea,maxArea,减去虚边
                内容区域为minRect,maxRect
                首先扩大area大小(中心点不变)使其可以完全放得下rect
                计算rect移动到area右上角需要的offset
            ConstrainTargetToBounds
                首先计算目标在panel下的bounds数据,然后计算右上角重合的offset
        UIRect
            UI显示组件的基类,是一个虚拟的矩形区域,包含四个锚点
            cachedGameObject__cachedTransform__root 基础组件缓存
            mChildren当前对象的直接子结点(结点路径内不包含其它的UIRect对象)
            parent当前对象的直接父结点(结点路径内不包含其它的UIRect对象)
                注意此时获取了当前对象的parent(UIRect)并缓存了下来,OnEnable时会重新获取,OnEnable之后修改父结点会导致改缓存失效
            Update更新四个锚点,更新时会检查目标是否Update过,没有会执行其Update更新目标的锚点
                OnAnchor虚函数执行具体的锚点刷新操作
                OnUpdate用于执行那些必须在锚点刷新后在执行计算的子类型
        UIWidget
            width height depth color pivot 宽高深度颜色轴
            localCorners__localSize__localCenter__worldCorners__worldCenter__CalculBounds
                左上角为(0,0),右下角为(1,1)
                左下角坐标为min = (-offset.x * width, -offset.y * height)
                右上角坐标为max = (min.x + width,min.y + height)
                根据宽高和轴偏移计算出的(xcenter,ycenter)、(xmin,ymin)、(xmax,ymax)顶点坐标(物体坐标系和世界坐标系)    
            material__mainTexture__shader
                当前UI组件自己独有的材质贴图着色器        
            alpha__finalAlpha 透明度
                CalculateFinalAlpha__UpdateFinalAlpha
                递归向上查找父结点(UIRect),计算alpha乘积就是最终的alpha
                Invalidate操作会导致finalAlpha重新计算
            autoResizeBoxCollider__ResizeCollider 自动计算BoxCollider大小
            aspect* 控制宽高是否成比例变化
            drawRegion是当前显示区域的范围(0,0---1,1),用于计算百分比调整后的可用区域
            drawingDimensions
                显示时的xy,wh(左下角为0,0)
            MarkAsChanged__ParentHasChanged__SetDirty__panel__RemoveFromPanel__CreatePanel
                当前UI有变化,通知其panel重建该UI
                当前UI所在的panel,加入、移除操作
                OnEnable会加入,OnDisable会移除,父panel变化也会触发重建操作
            UpdateTransfrom
                每次移动后会重新计算(xmin,ymin)和(xmax,ymax)
                下次如果Transform.hasChanged标记变化则计算两个点是否发生了变化,是则标记mMoved,并返回true
            UpdateGeometry
                mIsVisibleByAlpha当前widget的最终alpha是否是有效的
                mIsVisibleByPanel当前widget是否在panel内可见
                首先计算finalAlpha检查该UI是否需要显示,chang标记检查该UI是否修改过显示属性
                如果仅仅是位置变化则重新计算变换矩阵localToPanel = panel.worldToLocal * widget.localToWorld并修改Gemotry
                否则清空Gemotry并使用OnFill函数填充顶点、颜色、UV,然后计算矩阵并修改Gemotry
            WriteToBuffers把Gemotry的信息写入到DrawCall内
        UIGemotry
            verts__uvs__cols局部坐标系下的顶点、UV、颜色
            mRtpVerts转换到panel坐标系下的顶点
            ApplyTransform重新计算mRtpVerts
        UIDrawCall
            verts__norms__tans__uvs__uv2__cols
                合并后的顶点、颜色、UV信息
            widgetCount 
                当前drawcall合并了多少个UI
            depthStart__depthEnd
                当前drawcall的深度起点和终点,用来在插入UI时将其加入到该drawcall内
                移除起点或者终点的UI需要重建drawcall
            mTrans__mFilter__mRenderer
                每个drawcall创建一个隐藏的gameobject,并添加了meshfilter和meshrender组件用于渲染
            sortingLayerName__sortingOrder__renderQueue
                控制当前drawcall的渲染顺序
            mMaterial__baseMaterial__shader__mainTexture
                原始的共享的材质着色器纹理
                mMaterial被多个drawcall共享
                mDynamicMat是实例化的材质属于当前drawcall
            Create__Destroy
                创建和删除当前drawcall
                创建只修改共享信息,有重载函数优先获取相同共享信息的drawcall
            CreateMaterial__RebuildMaterial__UpdateMaterials
                修改共享信息会导致材质球重建
                shader默认为Unlit/Transparent Colored
            UpdateGeometry
                首先检查顶点、颜色、UV信息是否合法,个数相等且是4的整数倍
                不超过65000个顶点时
                    计算三角形个数,乘上3得出indexBuffer长度,长度不足时会导致重新分配内存
                    trim移除大小不匹配的信息,setIndices重建indexBuffer(顶点数大小变化时,优先在缓存内找一个相同的,否则新建数组,最大缓存10个)
                超过65000个顶点无法处理              
    文字显示
        UIFont
            BMFont 图片文字类型的Font
            BMSymbol BMFont内的一个小图
            BMGlyph BMFont内的一个小图(创建的时候的FontTexture)内的一个文字
            一张FontTexture,使用Alpha8格式存储成一张灰度图,默认大小为256x256,64KB
            字体太大会导致该Texture不断重建
        UILabel
            基本属性
                fontStyle&Size字体属性  alignment对齐方式 encoding颜色编码 effect* 描边属性 gradient* 渐变属性 space* 间距属性 ellipsis省略句支持
                maxLine换行控制 trueTypeFont字体就是UIFont的dynamic形式,bitmapFont字体支持图片字
                material&&mainTexture 当前使用的字体的纹理、字体自定义的材质(可用于处理字体特效)
                printedSize&&printedText 最终显示出来的文字及其大小(像素)
                keepCrisp && mDensity 
                    activeHeight是用来计算UIRoot下的对象(w=manualWidth h=activeHeight)放到size为1的摄像机下需要缩小多少倍(等比缩放保持不变形)                 
                    用于控制 UNITY屏幕下的大小 转换为 NGUI屏幕下的大小,即fontSize * pixelAdjustment
            文字处理,解析转义、计算大小
                ProcessText
                    初始化NGUIText(使用当前UILabel的基本属性和Font信息)
                    更新NGUIText状态
                        通过Font的RequestCharactersInTexture函数申请添加文字,传入文字、文字大小(Unity屏幕下)、文字格式(粗斜会导致FontTexture重建)
                        根据overflow模式修改NGUIText的rectW&H
                        解析文字,根据UILabel的基本属性处理文字内的特殊字符----NGUIText.WrapText()
                            新建StringBulder,用于存储临时文字,此处可以优化,使用静态stringbuilder
                            计算文字显示区域行数和最大高度、宽度 行尾宽度(省略号图形宽度或者行间距宽度)
                            初始化每一行的start和offset lineIsEmpty lineCount
                            申请在FontTexture内添加文字以便后续获取字符图形信息
                            遍历每个字符
                                1.首先检查是不是换行符,把该换行字符串加入sb内 start=offset+1;lineIsEmpty=true;++lineCount 修改当前行宽度x=0
                                2.其次检查是不是转义符,把该转义字符串加入sb内 start=offset--;
                                3.接着检查是不是图片字,获取图形宽度w=spaceX+(atlasSp.advance or glyphWidth),修改当前行宽度x=x+w offset += symbol.length - 1;
                                4.检查新加入字符后是否超过了最大宽度,处理行尾字符,插入换行符
                        计算处理后的文字显示大小 NGUIText.CalculatePrintedSize
                            遍历每个字符
                                1.非法字符和转义符跳过不计算
                                2.换行符,记录最大的宽度,修改x=0 y+=lineHeight
                                3.图片字或者Glyph文字,计算其宽度,如果放不下该字符则换行,否则修改x+=w+spaceX;y+=lineHeight和下一个字符起始位置
                                4.BMFont对图文混排支持程度有限,一般用于数字或者ASCII+图片的简单方式
                            最终结果v.x=Mathf.Ceil(maxX) v.y=Mathf.Ceil(y+lineHeight)
            顶点计算 NGUIText.Print
                遍历每个字符,获取其Glyph或者BMGlyph等显示数据
                计算其FontTexture内的UV、起点、大小等信息,将矩形文字信息加入到顶点数组、UV数组、颜色数组内
    图片显示
        UIAtlas
            图集,包含材质球、打包的纹理、着色器,List<UISpriteData>存储了所有的图片
            UISpriteData记录了图片的名字、图片内偏移、大小、border等信息
            UIAtlasMaker制作图集时计算最优的图片打包方式来合并图片
        UIBasicSprite
            border slice九宫格切割的边界 (lOff,rOff,bOff,tOff)
            drawingDimensions 绘制区域的xy,wh
            drawingUVs 绘制区域的uv区域x0y0,x1y1
            type 图片的显示模式,常规Simple、平铺Tile、九宫格拉伸Slice、进度条填充模式Fill
            fillDirection__fillAmount__invent 填充方式和进度数值、是否反向填充,水平、垂直、圆形
            flip 翻转图片
            Fill 把原始信息按照flip、slice等方式处理
                FillSimple 直接把原始信息填充进去,如果有渐变,则乘上渐变颜色
                FillSlice border为0则属于Simple方式,否则顶点数翻了9倍,填充9个矩形的顶点、UV信息
                FillTile  根据宽高,计算N个矩形顶点和对应的UV,以左下角为起点进行平铺
                FillFill  水平或者垂直方向则修改UV,圆形则根据切割角度、进度计算出新的4个顶点个4个UV值
        UISprite
            atlas__mat__texture_shader 当前UI使用的图集的信息
            spriteName 当前图片的名字,根据名字在图集内找到对应的UISpriteData
            MakePixelPerfect 根据图集内的对应图片的真实像素宽度高度,设置当前UI的宽高
            OnFill重载UIWidget的OnFill函数,在UpdateGemotry内调用
                找不到图片则不填充否则根据图集内图片的border和xywh作为outer、inner(用于调整UV)调用基类填充函数
        UITexture
            与UISprite的属性几乎一致,只不过材质纹理着色器都是自己特殊的,没有共享的图集
            如果两个UITexture的材质纹理着色器完全一致,那么相邻时会共享同一个UIDrawCall
    交互组件
        Tween系列动画,Tween*.Begin(go,from,to,time) 比较常用,用于一些UE效果
        SpringPanel用于弹簧效果
        UIButton系列,监听OnClick事件做一些按钮处理,一般不使用
        UISlider UIProgressBar  监听OnPress和OnDrag事件 比较常用,用于一些带进度条的UI,可选拖拽 localCorners计算thumb位置
        UIScrollView
            movement__contentPivot 移动方向,起点
            restrictWithinPanel__constrainOnDrag__disableDragIfFits 内容控制在bounds内
            onDragStarted__onMomentumMove_onDragFinished__onStoppedMoving 拖拽移动相关回调
            smoothDragStart__iOSDragEmulation 默认关闭,开启后拖拽时不灵敏  
            shouldMove* 根据content bounds和 finalClipRegion的偏移比较
            scrollWheelFactor__Scroll()__mScroll用于控制滚动一定距离 
            RestrictWithinBounds 计算物体在bounds内的偏移并根据弹回效果和方向弹回到初始位置
                offset = panel.CalculateConstrainOffset; SpringPanel.Begin(go,offset,8)
            InvalidateBounds 重新计算bounds
            SetDragAmount 百分比偏移,以初始点为参考点 
                clip.x - target.x;clip.y-target.y 得出回到初始点需要移动多少距离
                clip.x = target.x - base.x;clip.y = target.y - base.y 得出最终偏移
            MoveRelative 相对于当前panel移动一定距离,会触发onClipMove事件
            Press事件处理
                shouldMove为false则不移动
                如果是取消按下则处理restrict操作,触发onDragFinish和onStopMoving事件
                如果是按下
                    修改offset和localPos,全部四舍五入为整数
                    movement清零
                    关闭Spring操作,触发onDragStart事件
            Drag事件处理
                移动距离使用UnityEngine.Plane来做的计算,此时直接移动一定距离
                3D平面经过的点是UICamera.lastWorldPosition即初始的hit.position,mLastPos
                法线方向沿着屏幕向外,Raycast得出距离平面的距离,ray.GetPoint得出射线交点
            LateUpdate
                拖拽结束后根据是否有偏移执行restrict操作
        UIDrag系列
            UIDragScrollView 监听拖拽或者鼠标滚轮事件,调用UIScollView的Press和Drag
            UIDragObject 监听OnDrag系列事件,拖拽移动UI
            UIDragDropItem 继承该类并重载DragAndDropStart|Move|Release|End事件
            UIDragDropRoot 全局的拖拽根结点
            UIDragDropContainer 拖拽释放时的目标父结点
        UIGrid&UITable 不常用,固定ITEM数或者个数不多时可以使用,单纯的位置排序
            UITable支持多列
                首先根据childCount计算col和row,新建三个Bounds二维数组,分别存储单个ITEM,1行ITEM
                然后循环计算,填充Bounds数组,col个Item一行,计算每行Item的Bounds和每列ITEM的Bounds
                每个ITEM计算在当前行最大Bounds和当前列最大ITEM下的坐标点偏移
                最后计算Table的pivot偏移
        UIWrapContent
            首先对ITEM排序并重置位置(支持多行多列,以父结点位置作为初始点,以ITEM_WIDTH|ITEM_HEIGHT作为每个ITEM的偏移)
            UpdateItem(t,i)根据局部坐标、指定宽高、水平还是垂直方向计算真实的realIndex
            WrapContent在每次onClipMove时都会执行一次
                首先将panel的worldCorners即裁剪矩形转换到局部坐标系下(该矩形世界坐标位置始终不变)
                遍历ITEM,检查其与裁剪矩形中心的距离,如果偏移超过了矩形的一半,则将其移动到最上面或者最下面(必须连续移动)
                计算realIndex时计算y/height或者x/width得出countOfline,执行回调刷新数据
        TypewriterEffect 打字机效果,会创建很多字符串
        UIToggle系列 toggleObject toggle 一起使用
        UIPopupList
    裁剪
        clipSoftness.xy,虚边界大小
        clipRange.xyzw,裁剪区域中心及大小
        shader内_clipRange = (-px/z,-py/w,1/z,1/w) clipArg = (z/sx,w/sy)
        1.计算顶点坐标在Panel内到中心的距离(归一化为0到1的值),o.worldPos = (vx-px)/z,(vy-py)/w = v.vertex * _clipRange.zw + _clipRange.xy
          o.worldPos绝对值大于1则处于Panel外面,小于1在Panel内部,0在中心
        2.计算顶点坐标在Panel内到边界的距离(归一化为0到1的值),o.distance = (1,1)-abs(o.worldPos)
          该距离和虚边界大小比值可用于计算像素点alpha值 clamp(min(o.distance.xy/s.xy),0,1)
        3.整理上述过程得出
          1.设置裁剪参数_clipRange=-px/z,-py/w,1/z,1/w) _clipArg=(z/sx,w/sy)
          2.顶点着色器内计算顶点坐标 o.worldPos = o.vertex * _clipRange.zw + _clipRange.xy
          3.像素着色器内计算alpha值 factor = [(1,1) - abs(o.worldPos)] * _clipArg; a = clamp(min(factor.x,factor.y),0,1)
    拖拽
        由于自适应操作UI的高度范围可能会缩放
        因此需要delta.y * (activeHeight / Screen.height)来计算真正的y偏移
UGUI源码分析
    事件系统
        基础流程
            EventSystem.Update->(TouchInputModule|StandaloneInputModule).Process->ProcessTouchEvents|ProcessMouseEvents->EventSystem.RaycastAll->PointerEventData
            通过之前的流程获取到eventdata(和NGUI的MouseOrTouch结构相似的数据),然后检测应该触发什么事件->ExecuteEvents.Execute

ANDROID界面
IOS界面
    UIView是所有UI控件的基类,UIView是一个容器,可以容纳其它UIView,
        一个view可以有多个子view,只有一个父view
        基础属性
            superview,父控件对象 subviews,子控件列表
            frame 控件的尺寸和位置,以父控件左上角为原点
            bounds 控件的尺寸和位置,以自己左上角为原点
            center 控件中心位置
            tag 控件ID
            transform 控件的位置缩放旋转
    UIButton 按钮 UILabel 文本 UIImage 图片 UIScrollView 滑动列表 UITextField 输入框 UISlider滑动条 UISwitch开关
    UIApplication 应用程序运行入口,管理声明周期、事件转发,一些系统事件都有对应的函数,类似于monobeahviour
    UIWindow UIViewController
    View是用于显示的控件 ViewController是用于控制view布局的控件
